<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>tool on 潜水员的咖啡小屋</title>
    <link>https://ynikl.github.io/tags/tool/</link>
    <description>Recent content in tool on 潜水员的咖啡小屋</description>
    <image>
      <url>https://ynikl.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ynikl.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>gilfoyle.k@outlook.com (潜水员)</managingEditor>
    <webMaster>gilfoyle.k@outlook.com (潜水员)</webMaster>
    <copyright>2022 Ian Lin All rights reserved</copyright>
    <lastBuildDate>Sun, 10 Jul 2022 17:47:42 +0800</lastBuildDate><atom:link href="https://ynikl.github.io/tags/tool/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Make 的基本使用</title>
      <link>https://ynikl.github.io/posts/makefile-basic-use/</link>
      <pubDate>Sun, 10 Jul 2022 17:47:42 +0800</pubDate>
      <author>gilfoyle.k@outlook.com (潜水员)</author>
      <guid>https://ynikl.github.io/posts/makefile-basic-use/</guid>
      <description>想自己整理一篇基本的 make 指令用法, 突然发现 阮一峰大佬已经整理了一篇很完整的博客, 遂放弃.
阮一峰文章地址
如果不写 c, 主要理解就几个概念就可以使用了
target 可以用来当作想要执行的命令集的名称 .PHONY: 可以用来声明命令集名称 recipes 实际执行的命令集合 介绍一下我自己的应用场景 我目前主力编程语言是 go, 我用的编辑器是 vim, 所以我基本就在 shell 里面完成编码任务.
case 1: 简化本地编译和测试, 自动做 setup 和 teardown
当我想要尝试一下整个项目是否编译
1 2 3 4 .PHONY: build build: go build . rm -rf [PROJECT NAME] 使用上面的 makefile, 我就只需要 make build, 就不用再删除编译出来文件. QAQ, 可以再加一些单元测试命令, 检测测试是否通过. 因为公司的项目, 在单测这方面做的不是很好, 我自己就是简单 build 一下
case 2: git 提交代码自动化操作
当我想要把我代码推送到, 测试分支, 进行集成测试
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 .</description>
      <content:encoded><![CDATA[<p>想自己整理一篇基本的 <code>make</code> 指令用法, 突然发现 阮一峰大佬已经整理了一篇很完整的博客, 遂放弃.</p>
<p><a href="https://www.ruanyifeng.com/blog/2015/02/make.html">阮一峰文章地址</a></p>
<p>如果不写 c, 主要理解就几个概念就可以使用了</p>
<ul>
<li>target 可以用来当作想要执行的命令集的名称</li>
<li>.PHONY:  可以用来声明命令集名称</li>
<li>recipes 实际执行的命令集合</li>
</ul>
<h2 id="介绍一下我自己的应用场景">介绍一下我自己的应用场景</h2>
<p>我目前主力编程语言是 go, 我用的编辑器是 vim, 所以我基本就在 shell 里面完成编码任务.</p>
<p>case 1: 简化本地编译和测试, 自动做 <code>setup</code> 和 <code>teardown</code></p>
<p>当我想要尝试一下整个项目是否编译</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="p">.</span><span class="nx">PHONY</span><span class="p">:</span> <span class="nx">build</span>
</span></span><span class="line"><span class="cl"><span class="nx">build</span><span class="p">:</span> 
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="nx">build</span> <span class="p">.</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rm</span> <span class="o">-</span><span class="nx">rf</span> <span class="p">[</span><span class="nx">PROJECT</span> <span class="nx">NAME</span><span class="p">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用上面的 <code>makefile</code>, 我就只需要 <code>make build</code>, 就不用再删除编译出来文件. QAQ, 可以再加一些单元测试命令, 检测测试是否通过. 因为公司的项目, 在单测这方面做的不是很好, 我自己就是简单 <code>build</code> 一下</p>
<p>case 2: git 提交代码自动化操作</p>
<p>当我想要把我代码推送到, 测试分支, 进行集成测试</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">.PHONY: dev
</span></span><span class="line"><span class="cl">ProjectName=&#34;Your Project Name&#34;
</span></span><span class="line"><span class="cl">TargetBranch=&#34;Your want to merge branch&#34;
</span></span><span class="line"><span class="cl">CurBranch=$(shell git branch --show-current)
</span></span><span class="line"><span class="cl">dev:
</span></span><span class="line"><span class="cl">	go build .
</span></span><span class="line"><span class="cl">	rm -f $(ProjectName)
</span></span><span class="line"><span class="cl">	git add .
</span></span><span class="line"><span class="cl">	git commit -m $(msg)
</span></span><span class="line"><span class="cl">	git push
</span></span><span class="line"><span class="cl">	git checkout ${DevBranch}
</span></span><span class="line"><span class="cl">	git pull --rebase
</span></span><span class="line"><span class="cl">	git merge ${CurBranch} -m &#34;Merge branch &#39;${CurBranch}&#39; into ${DevBranch}&#34;
</span></span><span class="line"><span class="cl">	go build
</span></span><span class="line"><span class="cl">	rm -f $(ProjectName) 
</span></span><span class="line"><span class="cl">	git push
</span></span><span class="line"><span class="cl">	git checkout ${CurBranch}
</span></span></code></pre></td></tr></table>
</div>
</div><p>简化 git 的操作流程, 现在只需要<code>make dev</code>就可以完成, 还可以在合并之前和之后增加测试, 我自己目前知识简单的 <code>build</code> 下而已 QAQ.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
