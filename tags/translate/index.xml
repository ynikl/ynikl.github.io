<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Translate on 潜水员的咖啡小屋</title>
    <link>https://ynikl.github.io/tags/translate/</link>
    <description>Recent content in Translate on 潜水员的咖啡小屋</description>
    <image>
      <url>https://ynikl.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ynikl.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>gilfoyle.k@outlook.com (潜水员)</managingEditor>
    <webMaster>gilfoyle.k@outlook.com (潜水员)</webMaster>
    <copyright>2022 Ian Lin All rights reserved</copyright>
    <lastBuildDate>Tue, 01 Nov 2022 00:15:50 +0800</lastBuildDate><atom:link href="https://ynikl.github.io/tags/translate/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang Minimal Version Selection 意识流翻译(仅开头)</title>
      <link>https://ynikl.github.io/blog/golang-minimal-version-selection/</link>
      <pubDate>Tue, 01 Nov 2022 00:15:50 +0800</pubDate>
      <author>gilfoyle.k@outlook.com (潜水员)</author>
      <guid>https://ynikl.github.io/blog/golang-minimal-version-selection/</guid>
      <description>&lt;p&gt;原文: &lt;a href=&#34;https://research.swtch.com/vgo-mvs#low-fidelity_builds&#34;&gt;Minimal Version Selection&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;意识流翻译, 只是简单的把自己的理解转化成中文. 仅供参考.&lt;/p&gt;
&lt;h1 id=&#34;翻译&#34;&gt;翻译:&lt;/h1&gt;
&lt;p&gt;Go 构建相关的命令需要决定模块版本. 把这些模块和版本号称之为编译列表(build list).
为了稳定的开发, 今天的编译列表必须和明天的编译列表是一致的. 但是开发者也必须支持
编译列表的改变: 升级所有的模块, 升级单个模块, 降级单个模块.&lt;/p&gt;
&lt;p&gt;版本选择的问题定位为: 给定一个算法支持对编译列表进行下面四种操作:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构建当前的编译列表&lt;/li&gt;
&lt;li&gt;升级所有模块到各自对应的最新版本&lt;/li&gt;
&lt;li&gt;升级一个模块到对应的版本&lt;/li&gt;
&lt;li&gt;降级一个模块到对应的版本&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后两种操作是在一个具体的模块进行升级和降级. 在满足依赖需求的前提下, 尽量少的进
行升级, 降级, 添加或者移除模块.&lt;/p&gt;
&lt;p&gt;这篇博文展示了最小版本选择算法, 一个新的, 简单的版本选择方案. 最小版本选择是容易
理解和能简单推测出他的运行行为的. 而且还能高稳定构建的, 表名一个用户所使用的依赖
是非常接近开发者所使用的依赖. 能够高效实现, 没有使用什么复杂的递归图算法. 仅仅只
用了几行 go 的代码就是实现了.&lt;/p&gt;
&lt;p&gt;最小选择算法假设所有的模块都声明了它自己对于其他模块的依赖清单. 且所有的模块都遵
守&lt;a href=&#34;https://research.swtch.com/vgo-import&#34;&gt;语义化版本&lt;/a&gt;: 向前兼容的版本使用小版本号,
不向前兼容的版本使用大版本号.&lt;/p&gt;
&lt;p&gt;对应的四种列表操作:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构建当前模块的编译列表: 将当前模块引用的依赖列表加在一起, 重复的仅保持一份.&lt;/li&gt;
&lt;li&gt;升级所有模块版本: 所有最新引用的依赖, 重新构建一份列表&lt;/li&gt;
&lt;li&gt;升级某一具体模块版本: 构建没有升级的列表, 再将升级的模块新的引用列表加入, 加入
时如果如果已经存在, 就是仅保存最新的版本&lt;/li&gt;
&lt;li&gt;降级一个模块到对应的版本: 反解开所有依赖降级的模块, 每一个依赖都需降级到目标
模块版本之下&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些操作简单, 高效, 且容易实现&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;剩余内容 略&lt;/strong&gt;&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>原文: <a href="https://research.swtch.com/vgo-mvs#low-fidelity_builds">Minimal Version Selection</a></p>
<p>意识流翻译, 只是简单的把自己的理解转化成中文. 仅供参考.</p>
<h1 id="翻译">翻译:</h1>
<p>Go 构建相关的命令需要决定模块版本. 把这些模块和版本号称之为编译列表(build list).
为了稳定的开发, 今天的编译列表必须和明天的编译列表是一致的. 但是开发者也必须支持
编译列表的改变: 升级所有的模块, 升级单个模块, 降级单个模块.</p>
<p>版本选择的问题定位为: 给定一个算法支持对编译列表进行下面四种操作:</p>
<ol>
<li>构建当前的编译列表</li>
<li>升级所有模块到各自对应的最新版本</li>
<li>升级一个模块到对应的版本</li>
<li>降级一个模块到对应的版本</li>
</ol>
<p>最后两种操作是在一个具体的模块进行升级和降级. 在满足依赖需求的前提下, 尽量少的进
行升级, 降级, 添加或者移除模块.</p>
<p>这篇博文展示了最小版本选择算法, 一个新的, 简单的版本选择方案. 最小版本选择是容易
理解和能简单推测出他的运行行为的. 而且还能高稳定构建的, 表名一个用户所使用的依赖
是非常接近开发者所使用的依赖. 能够高效实现, 没有使用什么复杂的递归图算法. 仅仅只
用了几行 go 的代码就是实现了.</p>
<p>最小选择算法假设所有的模块都声明了它自己对于其他模块的依赖清单. 且所有的模块都遵
守<a href="https://research.swtch.com/vgo-import">语义化版本</a>: 向前兼容的版本使用小版本号,
不向前兼容的版本使用大版本号.</p>
<p>对应的四种列表操作:</p>
<ol>
<li>构建当前模块的编译列表: 将当前模块引用的依赖列表加在一起, 重复的仅保持一份.</li>
<li>升级所有模块版本: 所有最新引用的依赖, 重新构建一份列表</li>
<li>升级某一具体模块版本: 构建没有升级的列表, 再将升级的模块新的引用列表加入, 加入
时如果如果已经存在, 就是仅保存最新的版本</li>
<li>降级一个模块到对应的版本: 反解开所有依赖降级的模块, 每一个依赖都需降级到目标
模块版本之下</li>
</ol>
<p>这些操作简单, 高效, 且容易实现</p>
<p><strong>剩余内容 略</strong></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
