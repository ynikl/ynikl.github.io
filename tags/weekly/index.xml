<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>weekly on 潜水员的咖啡小屋</title>
    <link>https://ynikl.github.io/tags/weekly/</link>
    <description>Recent content in weekly on 潜水员的咖啡小屋</description>
    <image>
      <url>https://ynikl.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ynikl.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>gilfoyle.k@outlook.com (潜水员)</managingEditor>
    <webMaster>gilfoyle.k@outlook.com (潜水员)</webMaster>
    <copyright>2022 Ian Lin All rights reserved</copyright>
    <lastBuildDate>Thu, 06 Apr 2023 08:45:08 +0800</lastBuildDate><atom:link href="https://ynikl.github.io/tags/weekly/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2023 04 02</title>
      <link>https://ynikl.github.io/weekly/2023-04-02/</link>
      <pubDate>Thu, 06 Apr 2023 08:45:08 +0800</pubDate>
      <author>gilfoyle.k@outlook.com (潜水员)</author>
      <guid>https://ynikl.github.io/weekly/2023-04-02/</guid>
      <description>SQL 对某字段去重， 且取最新的一条数据 在SQL中，可以使用子查询和MAX函数来对某字段去重，并取最新的一条数据。以下是示例代码：
1 2 3 4 5 6 7 SELECT t1.* FROM table_name t1 INNER JOIN ( SELECT MAX(column1) AS max_column1 FROM table_name GROUP BY column2 ) t2 ON t1.column1 = t2.max_column1; 在上面的代码中，首先使用子查询和MAX函数，取出每个column2字段的最大值，然后将结果与原表进行INNER JOIN操作，得到最新的一条数据。 需要注意的是，如果需要根据多个字段进行去重和排序，可以在子查询中指定多个字段，并在INNER JOIN操作中使用多个字段进行连接。如果需要查询的字段比较多，可以使用通配符*来代替所有字段。 总之，在SQL中可以使用子查询和MAX函数来对某字段去重，并取最新的一条数据。需要指定需要查询的表名、字段名和排序方式，以及使用INNER JOIN操作进行连接。
查看是否用重复数据 1 SELECT name, COUNT(*) c FROM table GROUP BY name HAVING c &amp;gt; 1; mysql inner, left, right, full join https://stackoverflow.com/a/28719292
t+1 场景是什么意思 t+1场景通常指的是预测未来某个时间点的情况，即在当前时刻t，预测下一个时间点t+1的情况。这个概念在很多领域都有应用，例如金融、经济、物流、天气预报等等。 在金融领域，t+1场景通常指的是预测未来某个时间点的股票价格、汇率、利率等等。例如，如果当前时刻是2021年1月1日，那么预测2021年1月2日某个股票的价格就是一个t+1场景。 在物流领域，t+1场景通常指的是预测未来某个时间点的货物运输情况，例如预测某个包裹在下一个时间点是否能够按时到达目的地。 在人工智能和机器学习领域，t+1场景通常指的是使用历史数据来预测未来某个时间点的情况，例如预测明天的气温、下一个小时的交通流量等等。这个过程通常需要使用时间序列分析、回归分析等技术来处理。 总之，t+1场景是一个非常常见的概念，可以用于预测未来某个时间点的情况，帮助人们做出更好的决策。
湖仓能力 “湖仓能力”通常指的是企业在数据仓库（Data Warehouse）方面的能力，即构建和管理大规模数据仓库的能力。数据仓库是一个用于存储和管理企业数据的系统，它可以集成来自不同数据源的数据，并对这些数据进行处理、分析和挖掘，以帮助企业做出更好的决策。 “湖仓”是数据仓库的一种类型，它是近年来兴起的一种新型数据仓库，与传统的关系型数据仓库（RDBMS）不同，湖仓采用了分布式、非关系型的架构，可以处理更加海量和复杂的数据，例如半结构化数据、文本数据、图像数据等等。湖仓通常采用了Hadoop、Spark、Hive、Presto等开源技术来构建和管理。 因此，“湖仓能力”通常指企业在构建和管理大规模、分布式、非关系型的数据仓库方面的能力，包括数据的采集、清洗、存储、处理、分析、挖掘等等。对于现代企业来说，湖仓能力已经成为了一项非常重要的核心竞争力，可以帮助企业更好地理解和应对市场变化，提高决策的准确性和效率。</description>
      <content:encoded><![CDATA[<h3 id="sql-对某字段去重-且取最新的一条数据">SQL 对某字段去重， 且取最新的一条数据</h3>
<p>在SQL中，可以使用子查询和MAX函数来对某字段去重，并取最新的一条数据。以下是示例代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">SELECT t1.*
</span></span><span class="line"><span class="cl">FROM table_name t1
</span></span><span class="line"><span class="cl">INNER JOIN (
</span></span><span class="line"><span class="cl">    SELECT MAX(column1) AS max_column1
</span></span><span class="line"><span class="cl">    FROM table_name
</span></span><span class="line"><span class="cl">    GROUP BY column2
</span></span><span class="line"><span class="cl">) t2 ON t1.column1 = t2.max_column1;
</span></span></code></pre></td></tr></table>
</div>
</div><p>在上面的代码中，首先使用子查询和MAX函数，取出每个column2字段的最大值，然后将结果与原表进行INNER JOIN操作，得到最新的一条数据。
需要注意的是，如果需要根据多个字段进行去重和排序，可以在子查询中指定多个字段，并在INNER JOIN操作中使用多个字段进行连接。如果需要查询的字段比较多，可以使用通配符*来代替所有字段。
总之，在SQL中可以使用子查询和MAX函数来对某字段去重，并取最新的一条数据。需要指定需要查询的表名、字段名和排序方式，以及使用INNER JOIN操作进行连接。</p>
<h3 id="查看是否用重复数据">查看是否用重复数据</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">SELECT name, COUNT(*) c FROM table GROUP BY name HAVING c &gt; 1;
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="mysql-inner-left-right-full-join">mysql inner, left, right, full join</h3>
<p><a href="https://stackoverflow.com/a/28719292">https://stackoverflow.com/a/28719292</a></p>
<h3 id="t1-场景是什么意思">t+1 场景是什么意思</h3>
<p><code>t+1</code>场景通常指的是预测未来某个时间点的情况，即在当前时刻<code>t</code>，预测下一个时间点<code>t+1</code>的情况。这个概念在很多领域都有应用，例如金融、经济、物流、天气预报等等。
在金融领域，<code>t+1</code>场景通常指的是预测未来某个时间点的股票价格、汇率、利率等等。例如，如果当前时刻是2021年1月1日，那么预测2021年1月2日某个股票的价格就是一个<code>t+1</code>场景。
在物流领域，<code>t+1</code>场景通常指的是预测未来某个时间点的货物运输情况，例如预测某个包裹在下一个时间点是否能够按时到达目的地。
在人工智能和机器学习领域，<code>t+1</code>场景通常指的是使用历史数据来预测未来某个时间点的情况，例如预测明天的气温、下一个小时的交通流量等等。这个过程通常需要使用时间序列分析、回归分析等技术来处理。
总之，<code>t+1</code>场景是一个非常常见的概念，可以用于预测未来某个时间点的情况，帮助人们做出更好的决策。</p>
<h3 id="湖仓能力">湖仓能力</h3>
<p>“湖仓能力”通常指的是企业在数据仓库（Data Warehouse）方面的能力，即构建和管理大规模数据仓库的能力。数据仓库是一个用于存储和管理企业数据的系统，它可以集成来自不同数据源的数据，并对这些数据进行处理、分析和挖掘，以帮助企业做出更好的决策。
“湖仓”是数据仓库的一种类型，它是近年来兴起的一种新型数据仓库，与传统的关系型数据仓库（RDBMS）不同，湖仓采用了分布式、非关系型的架构，可以处理更加海量和复杂的数据，例如半结构化数据、文本数据、图像数据等等。湖仓通常采用了Hadoop、Spark、Hive、Presto等开源技术来构建和管理。
因此，“湖仓能力”通常指企业在构建和管理大规模、分布式、非关系型的数据仓库方面的能力，包括数据的采集、清洗、存储、处理、分析、挖掘等等。对于现代企业来说，湖仓能力已经成为了一项非常重要的核心竞争力，可以帮助企业更好地理解和应对市场变化，提高决策的准确性和效率。</p>
<h3 id="jwt">JWT</h3>
<p><code>header . payload . secret </code></p>
<p>header 和 payload 都是可以使用 base64 进行解密, 获取其中的 json 信息, 是公开的.
secret 是使用header中的 加密算法 对<code>header+payload+secret</code>进行计算, 验证jwt信息没有被修改过.</p>
<p><a href="https://jwt.io/introduction">https://jwt.io/introduction</a></p>
<h3 id="jwt-1">jwt</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">HMACSHA256</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">base64UrlEncode</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&#34;.&#34;</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">  <span class="n">base64UrlEncode</span><span class="p">(</span><span class="n">payload</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">  <span class="n">your</span><span class="o">-</span><span class="mi">256</span><span class="o">-</span><span class="n">bit</span><span class="o">-</span><span class="n">secret</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="replace-into">replace into</h3>
<p>replace into 跟 insert 功能类似，不同点在于：replace into 首先尝试插入数据到表中， 1. 如果发现表中已经有此行数据（根据主键或者唯一索引判断）则先删除此行数据，然后插入新的数据。 2. 否则，直接插入新数据。
要注意的是：插入数据的表必须有主键或者是唯一索引！否则的话，replace into 会直接插入数据，这将导致表中出现重复的数据。</p>
<h3 id="golang-避免多次打印同一个错误">golang 避免多次打印同一个错误</h3>
<blockquote>
<p>打印错误也是一种错误的处理方式. 所有, 要么选择打印错误, 要么选择向上抛出错误.
不要两者同时.</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>2023 03 26</title>
      <link>https://ynikl.github.io/weekly/2023-03-26/</link>
      <pubDate>Thu, 06 Apr 2023 08:41:54 +0800</pubDate>
      <author>gilfoyle.k@outlook.com (潜水员)</author>
      <guid>https://ynikl.github.io/weekly/2023-03-26/</guid>
      <description>golang 泛型: type parameters interface 定义一系列类型 type constraint ~string [s [] E, E any] type inferene 官方泛型介绍
判断时间是否重叠 startA &amp;lt; endB and endA &amp;gt; startB stackoverflow
python -m python -m 是 Python 命令行工具中的一个选项，用于执行 Python 模块
pypi 名称 Python Package Index , python 的包的目录
拥有多个小项目对公司成本的影响 扎克伯格 的裁员信
&amp;ldquo;人们很容易认为，只要一个项目产生的价值超过其直接成本，它就是正收益的。 但是，任何项目都需要一个主管，我们要么提拔一个工程师，要么从另一个项目挑选一个人，让其负责该项目。这两种情况都分散了人才，并且创造出了更多的管理层。 如果项目继续发展，整个团队也许分散到多个楼层或多个办公室，这让沟通变得更加困难。 我们还需要为项目配备更多的笔记本电脑和其他资源，这些更多的工程师还会导致雇佣更多的 IT 人员、HR 人员和招聘人员。 随着团队越来越大，效率不断降低，反应变迟钝了。它也许会与另一个团队的工作重叠，或者本应使用现有基础架构时却构建了一个定制系统。 总之，那些低优先级项目对公司重要性不大，却带来复杂的间接成本，很容易低估它们。&amp;rdquo;
AES Advanced Encryption Standard 当前最流行的对称加密
wikipeida
golang http 请求转化成 curl 可以方便地将 http.Request 转化成可直接输出成字符串的 curl 对象</description>
      <content:encoded><![CDATA[<h3 id="golang-泛型">golang 泛型:</h3>
<ol>
<li>type parameters</li>
<li>interface 定义一系列类型</li>
<li><code>type constraint</code></li>
<li>~string</li>
<li><code>[s [] E, E any]</code></li>
<li>type inferene</li>
</ol>
<p><a href="https://go.dev/blog/intro-generics">官方泛型介绍</a></p>
<h3 id="判断时间是否重叠">判断时间是否重叠</h3>
<p>startA &lt; endB and endA &gt; startB
<a href="https://stackoverflow.com/a/325964">stackoverflow</a></p>
<h3 id="python--m">python -m</h3>
<p><code>python -m</code> 是 Python 命令行工具中的一个选项，用于执行 Python 模块</p>
<p>pypi 名称 Python Package Index , python 的包的目录</p>
<h3 id="拥有多个小项目对公司成本的影响">拥有多个小项目对公司成本的影响</h3>
<p>扎克伯格 的裁员信</p>
<blockquote>
<p>&ldquo;人们很容易认为，只要一个项目产生的价值超过其直接成本，它就是正收益的。
但是，任何项目都需要一个主管，我们要么提拔一个工程师，要么从另一个项目挑选一个人，让其负责该项目。这两种情况都分散了人才，并且创造出了更多的管理层。
如果项目继续发展，整个团队也许分散到多个楼层或多个办公室，这让沟通变得更加困难。
我们还需要为项目配备更多的笔记本电脑和其他资源，这些更多的工程师还会导致雇佣更多的 IT 人员、HR 人员和招聘人员。
随着团队越来越大，效率不断降低，反应变迟钝了。它也许会与另一个团队的工作重叠，或者本应使用现有基础架构时却构建了一个定制系统。
总之，那些低优先级项目对公司重要性不大，却带来复杂的间接成本，很容易低估它们。&rdquo;</p>
</blockquote>
<h3 id="aes">AES</h3>
<p>Advanced Encryption Standard 当前最流行的对称加密</p>
<p><a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86">wikipeida</a></p>
<h3 id="golang-http-请求转化成-curl">golang http 请求转化成 curl</h3>
<p>可以方便地将 http.Request 转化成可直接输出成字符串的 curl 对象</p>
<p><a href="https://github.com/moul/http2curl">http2curl</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>2023 03 19</title>
      <link>https://ynikl.github.io/weekly/2023-03-19/</link>
      <pubDate>Mon, 20 Mar 2023 08:35:32 +0800</pubDate>
      <author>gilfoyle.k@outlook.com (潜水员)</author>
      <guid>https://ynikl.github.io/weekly/2023-03-19/</guid>
      <description>0314 wrap error
Adding additional context to an error Marking an error as a specific error fmt.Errorf(&amp;quot;%w&amp;quot;, err)
1 bar error -&amp;gt; Wrap error -&amp;gt; fmt.wrapError { bar error } 原先被包裹的 err, 仍保持可用状态 fmt.Error(&amp;quot;%v&amp;quot;,err)变成 string, 原 Err 已经无法追溯
spew 将变量数据格式化输出
可以批量传入参数spew.Sdump(var1, var2, var3) 可以通过 spew.NewDefaultConfig 独立一份特定参数的输出实例 也可以通过 spew.Config 修改包变量, 将配置覆盖整个包 As, Is
As 提供具体错误类型匹配, 对应自定义的某种错误类型结构体. 仅会对比错误错误链的第一个自定义错误类型是否匹配 Is 提供具体的某一个实例错误类型匹配. 会递归遍历是否匹配 </description>
      <content:encoded><![CDATA[<h2 id="0314">0314</h2>
<p>wrap error</p>
<ul>
<li>Adding additional context to an error</li>
<li>Marking an error as a specific error</li>
</ul>
<p><code>fmt.Errorf(&quot;%w&quot;, err)</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">bar error -&gt; Wrap error -&gt; fmt.wrapError { bar error }
</span></span></code></pre></td></tr></table>
</div>
</div><p>原先被包裹的 err, 仍保持可用状态
<code>fmt.Error(&quot;%v&quot;,err)</code>变成 string, 原 Err 已经无法追溯</p>
<p><a href="https://github.com/davecgh/go-spew">spew</a>
将变量数据格式化输出</p>
<ul>
<li>可以批量传入参数<code>spew.Sdump(var1, var2, var3)</code></li>
<li>可以通过 <code>spew.NewDefaultConfig</code> 独立一份特定参数的输出实例</li>
<li>也可以通过 <code>spew.Config</code> 修改包变量, 将配置覆盖整个包</li>
</ul>
<p>As, Is</p>
<ul>
<li>As 提供具体错误类型匹配, 对应自定义的某种错误类型结构体. 仅会对比错误错误链的第一个自定义错误类型是否匹配</li>
<li>Is 提供具体的某一个实例错误类型匹配. 会递归遍历是否匹配</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>2023 03 12, 周记</title>
      <link>https://ynikl.github.io/weekly/2023-03-12/</link>
      <pubDate>Wed, 15 Mar 2023 08:58:05 +0800</pubDate>
      <author>gilfoyle.k@outlook.com (潜水员)</author>
      <guid>https://ynikl.github.io/weekly/2023-03-12/</guid>
      <description>0307 mysql 创建 utf8md4 数据库
1 CREATE DATABASE `test` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci ; mysql utf8mb4 是 utf8的超集，兼容4字节的 unicode (Emoji)
https://www.jianshu.com/p/2b8629af8000
mysql 5.7.32-log 在 varchar(255) 创建索引失败，max key length is 767 bytes. 767字节/4字节每字符 = 191 字符。 须修改为 varchar(191) https://help.aliyun.com/document_detail/41707.html
查看已经合并的分支
1 2 3 4 git branch --merged #删除 git branch --merged | egrep -v &amp;#34;(^\*|master|dev|stage)&amp;#34; | xargs git branch -d vifm : za 显示隐藏文件
1 2 3 za: Toggle showing hidden files zo: Show hidden files zm: Hide hidden files https://codeyarns.</description>
      <content:encoded><![CDATA[<h2 id="0307">0307</h2>
<p>mysql 创建 utf8md4 数据库</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">DATABASE</span><span class="w"> </span><span class="o">`</span><span class="n">test</span><span class="o">`</span><span class="w">  </span><span class="k">DEFAULT</span><span class="w"> </span><span class="nb">CHARACTER</span><span class="w"> </span><span class="k">SET</span><span class="w"> </span><span class="n">utf8mb4</span><span class="w"> </span><span class="k">COLLATE</span><span class="w"> </span><span class="n">utf8mb4_unicode_ci</span><span class="w"> </span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>mysql utf8mb4 是 utf8的超集，兼容4字节的 unicode (Emoji)</p>
<p><a href="https://www.jianshu.com/p/2b8629af8000">https://www.jianshu.com/p/2b8629af8000</a></p>
<p>mysql 5.7.32-log 在 <code>varchar(255)</code> 创建索引失败，<code>max key length is 767 bytes.</code> 767字节/4字节每字符 = 191 字符。 须修改为 <code>varchar(191)</code>
<a href="https://help.aliyun.com/document_detail/41707.html">https://help.aliyun.com/document_detail/41707.html</a></p>
<p>查看已经合并的分支</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git branch --merged
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">#删除
</span></span><span class="line"><span class="cl">git branch --merged | egrep -v &#34;(^\*|master|dev|stage)&#34; | xargs git branch -d
</span></span></code></pre></td></tr></table>
</div>
</div><p>vifm : za 显示隐藏文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">za: Toggle showing hidden files
</span></span><span class="line"><span class="cl">zo: Show hidden files
</span></span><span class="line"><span class="cl">zm: Hide hidden files
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://codeyarns.com/tech/2014-09-10-how-to-show-hidden-files-in-vifm.html#gsc.tab=0">https://codeyarns.com/tech/2014-09-10-how-to-show-hidden-files-in-vifm.html#gsc.tab=0</a></p>
<p>Unicodde 是字符集 &ndash; 支持的所有字符的合集
Utf-8 是编码规则，代表 8 位一组表示 Unicode 字符的格式，使用 1 - 4 个字节来表示字符。</p>
<blockquote>
<p>We should understand the distinction between a charset and an encoding:</p>
<ul>
<li>A charset, as the name suggests, is a set of characters. For example, the Unicode charset contains 2^21 characters.</li>
<li>An encoding is the translation of a character’s list in binary. For example, UTF- 8 is an encoding standard capable of encoding all the Unicode characters in a variable number of bytes (from 1 to 4 bytes).</li>
</ul>
</blockquote>
<p>ChatGPT 是OpenAI 研发的一种生成式聊天机器人，可以理解人类的问题并提供答案， 对搜索引擎业务有着巨大的挑战
<a href="https://youtu.be/zNRvAMJOfAI">小Lin说 ChatGPT</a></p>
<p>感受太阳发热，其实是电磁波碰撞到物体产生的热量。 太阳如果是核聚变的化，太阳表面温度不好解释。 等离子体宇宙论，解释太阳拥有的日冕就是类似与闪电之类的东西，据说NASA太阳表面可能是27度。
<a href="https://youtu.be/Ep803Xiso5E">老高说 太阳</a></p>
<h2 id="0309">0309</h2>
<p>查看数据库表的大小</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="n">use</span><span class="w"> </span><span class="n">information_schema</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">select</span><span class="w"> </span><span class="n">concat</span><span class="p">(</span><span class="n">round</span><span class="p">(</span><span class="k">sum</span><span class="p">(</span><span class="n">data_length</span><span class="o">/</span><span class="mi">1024</span><span class="o">/</span><span class="mi">1024</span><span class="p">),</span><span class="mi">2</span><span class="p">),</span><span class="s1">&#39;MB&#39;</span><span class="p">)</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="k">data</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">tables</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">table_schema</span><span class="o">=</span><span class="s1">&#39;database_name&#39;</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="k">table_name</span><span class="o">=</span><span class="s1">&#39;table_name&#39;</span><span class="p">;</span><span class="w"> 
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://www.51cto.com/article/641931.html">https://www.51cto.com/article/641931.html</a></p>
<p>varchar(50)
其中 50 在Mysql 5.1 版本之后代表的是字符长度， 以前代表的是字节长度</p>
<p>使用 varchat(50) 和直接使用 varchar(255) 存储的区别
空间占用基本一致</p>
<ol>
<li>一般情况下255和50占用的空间大小是一致的。但如果是一utf8 可能会255超过255bytes 会需要2个bytes 标记变成
性能影响越小越优</li>
<li>255 会消耗更大的查询中间表的空间大小。</li>
<li>索引长度的大小的限制， InnoDB 限制为 3072bytes， 255长度无法建立索引</li>
<li>过大的字符长度可能会脱离数据页存储。
<a href="https://dba.stackexchange.com/a/76470">https://dba.stackexchange.com/a/76470</a></li>
</ol>
<h2 id="反思总结">反思总结</h2>
<p>逃避</p>
<p>当项目组的整个团队配合出问题的时候 &ndash; 工作开始不顺心, 没有想着怎么去解决, 团队的
矛盾, 而是在想着换工作</p>
<p>傲慢</p>
<p>喝酒敬酒的时候就很随意</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
