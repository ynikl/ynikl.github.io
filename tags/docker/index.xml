<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Docker on 潜水员的咖啡小屋</title>
    <link>https://ynikl.github.io/tags/docker/</link>
    <description>Recent content in Docker on 潜水员的咖啡小屋</description>
    <image>
      <url>https://ynikl.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ynikl.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>gilfoyle.k@outlook.com (潜水员)</managingEditor>
    <webMaster>gilfoyle.k@outlook.com (潜水员)</webMaster>
    <copyright>2022 Ian Lin All rights reserved</copyright>
    <lastBuildDate>Thu, 07 Apr 2022 13:34:55 +0800</lastBuildDate><atom:link href="https://ynikl.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker 基本使用</title>
      <link>https://ynikl.github.io/blog/docker-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 07 Apr 2022 13:34:55 +0800</pubDate>
      <author>gilfoyle.k@outlook.com (潜水员)</author>
      <guid>https://ynikl.github.io/blog/docker-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;h2 id=&#34;启动一个容器&#34;&gt;启动一个容器&lt;/h2&gt;
&lt;p&gt;打个样&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run -itd --rm --name hello image_name 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&amp;ndash; it
将当前的终端和容器内的终端连接在一起, 正式所谓的交互模式&lt;/p&gt;
&lt;p&gt;&amp;ndash;rm
当容器停止之后, 会自动删除改容器&lt;/p&gt;
&lt;p&gt;外挂文件夹
参数 &lt;code&gt;-v &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker run -it -v /home/dock/Downloads:/usr/Downloads ubuntu64 /bin/bash&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;与容器交互&#34;&gt;与容器交互&lt;/h2&gt;
&lt;h3 id=&#34;进入容器&#34;&gt;进入容器&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;docker attach&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;exec&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker -it exec CONTAIN_NAME bash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;exex 会再目标容器内部执行一个命令, 命令名为 bash, 就是起一个 shell 咯.
加上 &lt;code&gt;-it&lt;/code&gt;, 进入交互的终端模式&lt;/p&gt;
&lt;h3 id=&#34;查看日志&#34;&gt;查看日志&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;docker logs CONTAINER&lt;/code&gt;
可以查看容器日志&lt;/p&gt;
&lt;p&gt;-f
可以持续输出容器内部的最新日志&lt;/p&gt;
&lt;h2 id=&#34;管理容器&#34;&gt;管理容器&lt;/h2&gt;
&lt;p&gt;启动&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker start CONTAINER
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;暂停&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker stop CONTAINER
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;提交&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker commit --author=&amp;#34;ian&amp;#34; CONTAINER NEW-IMAGENAME:TAG
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;管理镜像&#34;&gt;管理镜像&lt;/h2&gt;
&lt;p&gt;查看所有的镜像列表&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h2 id="启动一个容器">启动一个容器</h2>
<p>打个样</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">docker run -itd --rm --name hello image_name 
</span></span></code></pre></td></tr></table>
</div>
</div><p>&ndash; it
将当前的终端和容器内的终端连接在一起, 正式所谓的交互模式</p>
<p>&ndash;rm
当容器停止之后, 会自动删除改容器</p>
<p>外挂文件夹
参数 <code>-v </code></p>
<p><code>docker run -it -v /home/dock/Downloads:/usr/Downloads ubuntu64 /bin/bash</code></p>
<h2 id="与容器交互">与容器交互</h2>
<h3 id="进入容器">进入容器</h3>
<p><code>docker attach</code></p>
<p>exec</p>
<p><code>docker -it exec CONTAIN_NAME bash</code></p>
<p>exex 会再目标容器内部执行一个命令, 命令名为 bash, 就是起一个 shell 咯.
加上 <code>-it</code>, 进入交互的终端模式</p>
<h3 id="查看日志">查看日志</h3>
<p><code>docker logs CONTAINER</code>
可以查看容器日志</p>
<p>-f
可以持续输出容器内部的最新日志</p>
<h2 id="管理容器">管理容器</h2>
<p>启动</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">docker start CONTAINER
</span></span></code></pre></td></tr></table>
</div>
</div><p>暂停</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">docker stop CONTAINER
</span></span></code></pre></td></tr></table>
</div>
</div><p>提交</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">docker commit --author=&#34;ian&#34; CONTAINER NEW-IMAGENAME:TAG
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="管理镜像">管理镜像</h2>
<p>查看所有的镜像列表</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">docker image ls
</span></span></code></pre></td></tr></table>
</div>
</div><p>删除镜像</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">docker rmi IMAGE
</span></span></code></pre></td></tr></table>
</div>
</div><p>删除 <code>&lt;none&gt;</code> 名称的镜像</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">docker rmi $(docker images --filter &#34;dangling=true&#34; -q --no-trunc)
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="fqa">FQA</h2>
<h3 id="cmd和entrypoint的区别">CMD和ENTRYPOINT的区别</h3>
<p>RUN、CMD 和 ENTRYPOINT 这三个 Dockerfile 指令看上去很类似，很容易混淆。本节将通过实践详细讨论它们的区别。</p>
<p>简单的说：</p>
<p>RUN 执行命令并创建新的镜像层，RUN 经常用于安装软件包。</p>
<p>CMD 设置容器启动后默认执行的命令及其参数，但 CMD 能够被 docker run 后面跟的命令行参数替换。</p>
<p>ENTRYPOINT 配置容器启动时运行的命令。</p>
<p><a href="https://www.cnblogs.com/LucasSong/p/12701357.html">CMD和ENTRYPOINT的区别</a></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
