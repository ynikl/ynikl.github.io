<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>thoughts on 潜水员的咖啡小屋</title>
    <link>https://ynikl.github.io/tags/thoughts/</link>
    <description>Recent content in thoughts on 潜水员的咖啡小屋</description>
    <image>
      <url>https://ynikl.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ynikl.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>gilfoyle.k@outlook.com (潜水员)</managingEditor>
    <webMaster>gilfoyle.k@outlook.com (潜水员)</webMaster>
    <copyright>2022 Ian Lin All rights reserved</copyright>
    <lastBuildDate>Mon, 08 May 2023 19:52:59 +0800</lastBuildDate><atom:link href="https://ynikl.github.io/tags/thoughts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Seven Levels of Busy</title>
      <link>https://ynikl.github.io/posts/the-seven-levels-of-busy/</link>
      <pubDate>Mon, 08 May 2023 19:52:59 +0800</pubDate>
      <author>gilfoyle.k@outlook.com (潜水员)</author>
      <guid>https://ynikl.github.io/posts/the-seven-levels-of-busy/</guid>
      <description>生活的忙碌可以分成七个层次。
大家可以对照一下，自己属于哪个层次？
第 1 级：一点不忙。
时间很自由，怎么安排都可以，没有一定要去完成的事项，周末想睡多久就多久。
第 2 级：有一些小事。
你记得有一些事要做。这些事情是合理的事项，没有截止期，但是你知道这些事迟早要做。
第 3 级：有一些重要的事。
你有必须要做的事情，需要及时跟踪，不能拖延，你会时刻提醒自己这些事情。
第 4 级：日程排满了。
你的日程排满了，不得不经常问自己&amp;quot;什么事情更重要？&amp;quot;，以便决定先做哪些事，后做哪些事。
你没有计划外的时间，不过你还能控制日程。
第 5 级：生活出现混乱。
你的事情在工作时间做不完，你开始加班了。
你经常因为事情来不及，而对别人说&amp;quot;对不起&amp;quot;。那些事情并没有被你放弃，只是你不得不赶时间，有些事情执行变得草率。
第 6 级：任务做不完。
你需要做的事情，超过了你安排日程的能力。即使放弃某些事情，你依然做不完剩下的事情。
你的工作时间大大延长，影响到正常生活。你感到非常疲劳。
第 7 级：日子过不下去。
各种任务塞满了你醒着的每一分钟。吃饭和其他生活必需的事情，都是抽时间来做。你忙起来的时候，甚至饭也没时间吃。
你不写日程安排了，因为根本没有时间做计划，每个小时情况都在发生变化。
你走路也心不在焉，常常觉得要崩溃，日子过不下去了。
来源: 阮一峰周报</description>
      <content:encoded><![CDATA[<p>生活的忙碌可以分成七个层次。</p>
<p>大家可以对照一下，自己属于哪个层次？</p>
<p>第 1 级：一点不忙。</p>
<p>时间很自由，怎么安排都可以，没有一定要去完成的事项，周末想睡多久就多久。</p>
<p>第 2 级：有一些小事。</p>
<p>你记得有一些事要做。这些事情是合理的事项，没有截止期，但是你知道这些事迟早要做。</p>
<p>第 3 级：有一些重要的事。</p>
<p>你有必须要做的事情，需要及时跟踪，不能拖延，你会时刻提醒自己这些事情。</p>
<p>第 4 级：日程排满了。</p>
<p>你的日程排满了，不得不经常问自己&quot;什么事情更重要？&quot;，以便决定先做哪些事，后做哪些事。</p>
<p>你没有计划外的时间，不过你还能控制日程。</p>
<p>第 5 级：生活出现混乱。</p>
<p>你的事情在工作时间做不完，你开始加班了。</p>
<p>你经常因为事情来不及，而对别人说&quot;对不起&quot;。那些事情并没有被你放弃，只是你不得不赶时间，有些事情执行变得草率。</p>
<p>第 6 级：任务做不完。</p>
<p>你需要做的事情，超过了你安排日程的能力。即使放弃某些事情，你依然做不完剩下的事情。</p>
<p>你的工作时间大大延长，影响到正常生活。你感到非常疲劳。</p>
<p>第 7 级：日子过不下去。</p>
<p>各种任务塞满了你醒着的每一分钟。吃饭和其他生活必需的事情，都是抽时间来做。你忙起来的时候，甚至饭也没时间吃。</p>
<p>你不写日程安排了，因为根本没有时间做计划，每个小时情况都在发生变化。</p>
<p>你走路也心不在焉，常常觉得要崩溃，日子过不下去了。</p>
<p><a href="http://www.ruanyifeng.com/blog/2023/05/weekly-issue-253.html">来源: 阮一峰周报</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>活着的意义</title>
      <link>https://ynikl.github.io/posts/the-meaning-of-living/</link>
      <pubDate>Tue, 09 Aug 2022 23:40:37 +0800</pubDate>
      <author>gilfoyle.k@outlook.com (潜水员)</author>
      <guid>https://ynikl.github.io/posts/the-meaning-of-living/</guid>
      <description>我觉得人生活着没有意义，但是我又为什么还活着呢？今天， 刚好看到了史铁生的《我与地坛》里面给了我答案
可我为什么还想活呢? 因为你还想得到点儿什么, 你觉得你还是可以得到点儿什么的, 比如说爱情, 比如说价值感之类的, 人真正的名字叫欲望</description>
      <content:encoded><![CDATA[<p>我觉得人生活着没有意义，但是我又为什么还活着呢？今天， 刚好看到了史铁生的《我与地坛》里面给了我答案</p>
<blockquote>
<p>可我为什么还想活呢? 因为你还想得到点儿什么, 你觉得你还是可以得到点儿什么的, 比如说爱情, 比如说价值感之类的, 人真正的名字叫欲望</p>
</blockquote>
]]></content:encoded>
    </item>
    
    <item>
      <title>Life Is Not Short</title>
      <link>https://ynikl.github.io/posts/life-is-not-short/</link>
      <pubDate>Fri, 01 Jul 2022 08:55:44 +0800</pubDate>
      <author>gilfoyle.k@outlook.com (潜水员)</author>
      <guid>https://ynikl.github.io/posts/life-is-not-short/</guid>
      <description>The most surprising thing is that you wouldn’t let anyone steal your property, but you consistently let people steal your time, which is infinitely more valuable.
life if not short</description>
      <content:encoded><![CDATA[<blockquote>
<p>The most surprising thing is that you wouldn’t let anyone steal your property, but you consistently let people steal your time, which is infinitely more valuable.</p>
</blockquote>
<p><a href="https://dkb.show/post/life-is-not-short">life if not short</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>我们为何选择 XXX 技术方案</title>
      <link>https://ynikl.github.io/posts/thinking-choosing-tech/</link>
      <pubDate>Wed, 08 Jun 2022 20:15:26 +0800</pubDate>
      <author>gilfoyle.k@outlook.com (潜水员)</author>
      <guid>https://ynikl.github.io/posts/thinking-choosing-tech/</guid>
      <description>一个完善的方案的需要考虑的三个方面
当前需求 理清楚初心，当前方案要解决的问题。聚焦到主要解决的问题。
结果上下文 好处：当前方案的好处，解决了什么 弊端: 什么是它不能解决的 问题：引入什么新的问题 与其他方案的关系 前导：当前方案是怎么演变出来。 后续：当前方案会引入什么新问题，有什么后续的解决方案 替换：可以解决同样需求的情况下，还没什么备选方案。为什么选择了当前方案 参考《微服务设计模式》的1.6.2&amp;quot;模式和模式语言&amp;quot;, 相对减少了模式关系中的泛化和特化。</description>
      <content:encoded><![CDATA[<p>一个完善的方案的需要考虑的三个方面</p>
<ol>
<li>当前需求</li>
</ol>
<p>理清楚初心，当前方案要解决的问题。聚焦到主要解决的问题。</p>
<ol start="2">
<li>结果上下文</li>
</ol>
<ul>
<li>好处：当前方案的好处，解决了什么</li>
<li>弊端: 什么是它不能解决的</li>
<li>问题：引入什么新的问题</li>
</ul>
<ol start="3">
<li>与其他方案的关系</li>
</ol>
<ul>
<li>前导：当前方案是怎么演变出来。</li>
<li>后续：当前方案会引入什么新问题，有什么后续的解决方案</li>
<li>替换：可以解决同样需求的情况下，还没什么备选方案。为什么选择了当前方案</li>
</ul>
<p>参考《微服务设计模式》的1.6.2&quot;模式和模式语言&quot;, 相对减少了模式关系中的泛化和特化。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Linked List</title>
      <link>https://ynikl.github.io/dsa/linked-list/</link>
      <pubDate>Mon, 06 Jun 2022 19:18:31 +0800</pubDate>
      <author>gilfoyle.k@outlook.com (潜水员)</author>
      <guid>https://ynikl.github.io/dsa/linked-list/</guid>
      <description>链表的定义： wiki 百科给出定义:
In computer science, a linked list is a linear collection of data elemetns whose order is not given by their physical placement in memory. Instead, each element points to the next.
翻译一下：
一个线性表 每个元素会指向下一个元素的位置 链表的优缺点 优点:
不需要提前分配内存 在查找到元素位置的提前下，插入和删除动作是一个常量，即 O(1) 没有容量上限，可以自由扩容 缺点:
查询某个元素，需要从头开始遍历，即 O(n) 实现代码
单向链表 最普通的链表
双向链表 循环链表 </description>
      <content:encoded><![CDATA[<h2 id="链表的定义">链表的定义：</h2>
<p>wiki 百科给出定义:</p>
<blockquote>
<p>In computer science, a linked list is a linear collection of data elemetns whose order is not given by their physical placement in memory. Instead, each element points to the next.</p>
</blockquote>
<p>翻译一下：</p>
<ul>
<li>一个线性表</li>
<li>每个元素会指向下一个元素的位置</li>
</ul>
<h2 id="链表的优缺点">链表的优缺点</h2>
<p>优点:</p>
<ul>
<li>不需要提前分配内存</li>
<li>在查找到元素位置的提前下，插入和删除动作是一个常量，即 O(1)</li>
<li>没有容量上限，可以自由扩容</li>
</ul>
<p>缺点:</p>
<ul>
<li>查询某个元素，需要从头开始遍历，即 O(n)</li>
</ul>
<p><a href="https://github.com/ynikl/dsa/blob/main/linked-list.go">实现代码</a></p>
<h2 id="单向链表">单向链表</h2>
<p>最普通的链表</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"></code></pre></td></tr></table>
</div>
</div><h2 id="双向链表">双向链表</h2>
<h2 id="循环链表">循环链表</h2>
]]></content:encoded>
    </item>
    
    <item>
      <title>并发与并行的区别</title>
      <link>https://ynikl.github.io/blog/concurrency-and-parallelism/</link>
      <pubDate>Tue, 31 May 2022 22:36:34 +0800</pubDate>
      <author>gilfoyle.k@outlook.com (潜水员)</author>
      <guid>https://ynikl.github.io/blog/concurrency-and-parallelism/</guid>
      <description>举个例子，电脑的鼠标，键盘或者其他设备的驱动程序，他们是并发的，但不是并行的。他们也不需要并行去运行。
并发是很多程序（形容运行任务，不是广义上的程序）的独立运行，并发是一种程序设计结构
并行是一次性运行很多程序，并行是一种程序的运行现象，当成程序设计成并发的，他很容易就变成了并行， 但并行不一定是并发的目的。
Concurrency is not Parallelism by Rob Pike</description>
      <content:encoded><![CDATA[<p>举个例子，电脑的鼠标，键盘或者其他设备的驱动程序，他们是并发的，但不是并行的。他们也不需要并行去运行。</p>
<p>并发是很多程序（形容运行任务，不是广义上的程序）的独立运行，并发是一种程序设计结构</p>
<p>并行是一次性运行很多程序，并行是一种程序的运行现象，当成程序设计成并发的，他很容易就变成了并行， 但并行不一定是并发的目的。</p>
<p><a href="https://www.youtube.com/watch?v=oV9rvDllKEg&amp;list=WL&amp;index=5&amp;t=9s">Concurrency is not Parallelism by Rob Pike</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>如何做决定——遗憾最小化</title>
      <link>https://ynikl.github.io/posts/how-make-decisions/</link>
      <pubDate>Mon, 30 May 2022 19:17:51 +0800</pubDate>
      <author>gilfoyle.k@outlook.com (潜水员)</author>
      <guid>https://ynikl.github.io/posts/how-make-decisions/</guid>
      <description>读Randy&amp;rsquo;s的博客遗憾最小化框架有感
在面对人生岔路口的时候，很多时候就需要对不同决定做取舍，是否勇于打破自己的人生的桎梏。怎么样要做出让自己十年之后的自己不会后悔的决定
做决定之前，问问自己的内心，如果我不这么做，几年之后，年老之后会不会后悔，会不会遗憾
Jeff Bezos 曾经谈到了自己是如何做决定的，他称之为 Regret Minimization Framwork (遗憾最小化框架) —— 他会想象自己到了 80 岁的时候，是否会认为不做这件事情会让自己遗憾。尽量让人生的遗憾数量最小化。即使当时的选择后来看来是错误的，但也不会后悔尝试过。
Bezos的视频地址 Cycle.js 作者 staltz 回答是否会对自己做的库没有像 React / Vue 那样火起来而感到气馁
Ask yourself: in 10 years from now, will you be proud of having done this? &amp;hellip; Do things that your future self will be proud, is my motto for the time being.</description>
      <content:encoded><![CDATA[<p>读Randy&rsquo;s的博客<a href="https://lutaonan.com/blog/regret-minimization-framework/">遗憾最小化框架</a>有感</p>
<p><em>在面对人生岔路口的时候，很多时候就需要对不同决定做取舍，是否勇于打破自己的人生的桎梏。怎么样要做出让自己十年之后的自己不会后悔的决定</em></p>
<p><strong>做决定之前，问问自己的内心，如果我不这么做，几年之后，年老之后会不会后悔，会不会遗憾</strong></p>
<blockquote>
<p>Jeff Bezos 曾经谈到了自己是如何做决定的，他称之为 Regret Minimization Framwork (遗憾最小化框架) —— 他会想象自己到了 80 岁的时候，是否会认为不做这件事情会让自己遗憾。尽量让人生的遗憾数量最小化。即使当时的选择后来看来是错误的，但也不会后悔尝试过。</p>
</blockquote>
<p><a href="https://www.youtube.com/watch?v=jwG_qR6XmDQ&amp;ab_channel=MickyThompson">Bezos的视频地址</a>
Cycle.js 作者 staltz 回答是否会对自己做的库没有像 React / Vue 那样火起来而感到气馁</p>
<blockquote>
<p>Ask yourself: in 10 years from now, will you be proud of having done this? &hellip; Do things that your future self will be proud, is my motto for the time being.</p>
</blockquote>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
