<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>computer science on 潜水员的咖啡小屋</title>
    <link>https://ynikl.github.io/tags/computer-science/</link>
    <description>Recent content in computer science on 潜水员的咖啡小屋</description>
    <image>
      <url>https://ynikl.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://ynikl.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 04 Jun 2022 00:19:23 +0800</lastBuildDate><atom:link href="https://ynikl.github.io/tags/computer-science/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>计算机中的：大端和小端</title>
      <link>https://ynikl.github.io/posts/endianness/</link>
      <pubDate>Sat, 04 Jun 2022 00:19:23 +0800</pubDate>
      
      <guid>https://ynikl.github.io/posts/endianness/</guid>
      <description>大端和小端的命名出处是来自于《格列佛游记》中吃鸡蛋分成从大端开始吃的“大端派”和从小端开始吃的“小端派”
大端的优势是高位计算，和可读性 小端的优势的低位运算 各自的优劣分析本质上还是因为内存的连续性，需要修改和读取的位数越少越有优势。
以上是阅读阮一峰的博文-字节序探析：大端与小端的比较的简单总结。本来自己也是想要整理一篇关于大小端分析的文章。刚好阮老师发文了，收获甚多，就不在自己整理了。
参考连接 阮一峰的博文-字节序探析：大端与小端的比较 </description>
    </item>
    
  </channel>
</rss>
