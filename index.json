[{"content":"《国富论》## 亚当·斯密\n203个笔记\n总结## 分工提高产生效率，产生生产物的剩余，引发了商业交换行为。商业行为进一步分化分工，进一步提高生产率，再进一步繁荣商业行为，如此往复。频繁的商业行为产生了货币。`` 商品的价格由：资本的利润，工人的工资，地主的租金组成。`` 资本是流动的，但是国家的财富重点在于生产，要鼓励国内的生产性消费。贸易顺差代表国家财富的增加，但是在自由世界贸易顺逆是财富增加的结果而不是原因。`` **## ## 点评## **\n**2024/02/24 **认为好看 ## 第## 1## 章## ## 论增进劳动生产力的因素及分配劳动生产物给各个阶层的自然顺序## 分工提高生产率`` 凡是能分工的工艺，分了工就可以相应地增强劳动生产力。分工的这种好处，也体现在各种行业各自分立这一社会现象上。如果一个国家有着较高的产业与劳动生产力的增进水平，那么其各行各业的分工一般也都达到了较高水平。\n也许就是因为农业不能采用完全的分工制度，才使得农业在劳动生产力的增进上，总是跟不上制造业的步伐。\n比如，法国的富裕和进步程度远胜于波兰，但品质同样优良的小麦在波兰的售价与在法国的售价是一样低廉的\n分工对工业的改良影响了售价，但是农业产品不变`` 出现了分工之后，同样数量的劳动者所完成的工作量，就能比过去多得多。其原因有三点：第一，劳动者因为专业而掌握了技巧；第二，免除了由一种工作转到另一种工作所带来的时间损失；第三，随着简化和缩减劳动的机械的发明，一个人能够做原本需要许多人才能完成的工作。\n相比较而言，人类的注意力如果只集中于单一的事物上，会比分散在许多事物上更容易发现达到目标的更简易、更便利的方法。分工出现以后，每个人的注意力都会自然而然地全部倾注在一种简单的事物上\n## 分工的起源**## **\n是一种互通有无、物物交换的倾向逐渐发展起来的结果。\n某一动物要想从人或其他动物那里取得某物，唯一的说服手段就是博取授予者的欢心。\n乞丐的大部分临时需要，也是通过契约、交换和买卖而得到的，就像其他人一样。他拿出别人给他的金钱购买食物；\n这样一来，人们就拿出自己生产而又消费不了的剩余劳动产物，以换得自己所需的别人劳动生产物的剩余部分\n成年人在其所从事的不同职位上所表现出的非常不同的才能，与其说是分工的原因，不如说是分工的结果\n## 市场大小会限制分工**## **\n如果市场过小，人们就不能用自己劳动生产物的剩余部分，来随意换得自己所需的别人劳动生产物的剩余部分，这样他们也就不会终生从事某一职业。 小城镇的服务和种类就不够多，因为市场太小了`` ## 货币的起源和效用**## ** 商业起源于生产剩余的交换，货币是方便交换媒介`` 据说，在未开化的社会里，牲畜曾是商业上的通用媒介，也就是牲畜可以用来交换各种物品\n金属与其他任何货物相比都不逊色。它不易磨损，不仅具有很强的耐久性，还能全无损失地任意分割，而且分割之后还可以再熔回原形。金属的这种性质，是其他一切有耐久性的物品都不具有的。因此，金属成了商业流通中最适宜的媒介\n“价值”这个词有两个不同的意思，一个是物品的效用，一个是由于占有某物而获得的购买他种货物的能力。我们称前者为使用价值，后者为交换价值\n**## ## 商品的劳动价格与货币价格## ** 商品的价值是用劳动量衡量`` 在分工完全确立之前，一个人享受人生的必需品、便利品和娱乐品的程度，反映了他的贫富水平。但是，自从分工确立了之后，各人所需要的物品大部分都来自他人的劳动。所以，衡量贫富水平的尺度，变成了一个人能够支配的劳动的多少，也就是他能够购买的劳动的多少。一个人占有着某种自己不愿消费的货物，然后又用它去交换他物。那么，这一货物的价值，就等于他能购买或支配的劳动量。因此，衡量一切商品交换价值的真实尺度就是劳动。\n都是获得它所付出的辛苦和麻烦\n需要经过十年学习才能做的工作，即使做一个小时，它所含的劳动量也可能比普通业务做一个月所含的要多。\n对于劳动者来说，等量的劳动一般都有等量的价值；但是，对雇用劳动者的雇主来说，等量劳动的价值却会因时而变\n## 商品的价格组成**## ** 商品价格的组成：`` ``利润，工资，地租`` 随着资本在个别人手中积聚，其中有一些人把资本投在了劳动人民身上。\n这些人为劳动者提供了原材料和生活资料，叫他们劳作，以生产更多的劳动生产物或增加劳动原材料的价值\n在这种情况下，增加的劳动原材料的价值，就被分成了两个部分，一部分用于支付劳动者的工资；另一部分则变成了雇主的利润。\n而且，资本的利润取决于所投资本价值的大小，而不是由监督指挥这种劳动的数量、强度与技巧决定的。\n在这种情况下，劳动者的全部劳动生产物，就不再由劳动者自身独占，而是要分出一部分给雇用他的资本所有者。决定某一商品所应交换、支配或购买的劳动量的因素，除了花费在取得或生产这一商品上的劳动量，还要再加上垫付劳动工资并提供材料的资本的利润。\n可是现在，劳动者要获得这些自然产物，却要另外付出代价，不但要获得采集权，还必须把他采集的产物分出一部分给地主。这一部分（或者说这一部分的代价）就是地租\n所以，生产乃至运输社会全部劳动年产物所需要的劳动量，要远远小于这些年产物所能购买或支配的劳动量\n**2024/01/14 **发表想法 资本再产生了资本 原文：假设社会每年所能购买的劳动量都被雇用，那么后一年度生产物的价值将比前一年度的更大。因为，经过了一年又一年，劳动量大大增加了\n游惰阶\n**## ## 商品的自然价格与市场价格## **\n**2024/01/24 **发表想法 自然价格生产商品的全部费用 原文：如果有一种商品，它的售价刚好等于它被生产、制造乃至运送到市场所花费的全部费用（包括按自然水平支付的全部地租、工资和利润），那么它就是按自然价格出售的\n如果一个人愿意以自然价格来购买某一商品，那么他就是这一商品的有效需求者，他的需求就是有效需求\n决定市场价格上升程度的因素有两个，一是货品的缺乏程度；二是竞争者的富有和奢侈程度。_ _\n如此说来，一切商品的市场价格，都围绕着自然价格这一中心价格上下波动。有时候，难免会发生各种意外，从而影响了商品的市场价格，使它有时抬高到中心价格之上，有时又强抑到中心价格以下。\n**## ## 工资## **\n**2024/01/24 **发表想法 技术进步造成产品价格低廉 原文：但是事实上，是后者的一磅比以前低廉了二分之一，也就是现在生产这一磅货物比以前容易了两倍。因为，虽然生产这一货物所需的其他货物量是以前的五倍，但所需的劳动量也同时减少到了以前的一半。\n但是事实上，是后者的一磅比以前低廉了二分之一，也就是现在生产这一磅货物比以前容易了两倍。因为，虽然生产这一货物所需的其他货物量是以前的五倍，但所需的劳动量也同时减少到了以前的一半。\n支付给仅靠劳动过活者的工资，至少要足够其维持生活。一般情况下，这一工资还得能够让劳动者赡养家室\n明显地，雇主对靠工资生活的劳动者的需求，必定会随着他垫付的劳动工资的增加而增加，而且会成比例地增加。这种增加的资本，一部分来自雇主超过生活所需的生活费，一部分来自雇主超过自己使用所需的资财。\n当雇主的资产增加，对雇员的工资投入也会增加，劳动者最高的工资出现在国家的增长期`` 因此，一国对靠工资生活的劳动者的需求，取决于该国的收入和资本是否增加。当收入和资本增加时，这一需求自然也随之增加；而当收入和资本没有增加时，这一需求也绝对不会增加。\n**2024/01/25 **发表想法 发展中的中国 原文：决定劳动工资增高的因素，不是现有的国民财富有多庞大，而是国民财富的不断增加。所以，出现最高劳动工资的国家，往往不是最富有的国家，而是那些最快变得富裕、繁荣的国家。\n决定劳动工资增高的因素，不是现有的国民财富有多庞大，而是国民财富的不断增加。所以，出现最高劳动工资的国家，往往不是最富有的国家，而是那些最快变得富裕、繁荣的国家。\n那么每年所需的劳动者人数也会得到满足，甚至还有剩余。这么一来，雇主就不会因为劳动者不足而相互竞争了。\n支配劳动工资的因素，并不是劳动者的最低生活所需，而是工作数量及工作价值\n但是，大都市及其附近地区的劳动工资跟数里之外的劳动工资相比，往往会更高\n，当社会处于进步并日益富裕，但还没有达到绝顶富裕的状态时，也许大多数贫穷劳动者都会觉得幸福、安乐。当社会处于静止的呆滞状态时，人民生活是艰难的；当社会处于退步的悲惨状态时，人民生活是困苦的；\n**2024/01/26 **发表想法 休息日 原文：在连续数天都进行着紧张的脑力或体力劳动之后，大多数人都会有强烈的休息欲望。这种欲望，只有暴力或某种强烈的需要才能抑制住。在紧张劳动之后纵情放松是人的天性，不管是悠闲自在一会儿，还是去闲游浪荡或消遣娱乐，都可以避免产生危险甚至致命的后果。如果这一天性要求得不到满足，劳动者迟早都会产生特殊的职业病。\n在连续数天都进行着紧张的脑力或体力劳动之后，大多数人都会有强烈的休息欲望。这种欲望，只有暴力或某种强烈的需要才能抑制住。在紧张劳动之后纵情放松是人的天性，不管是悠闲自在一会儿，还是去闲游浪荡或消遣娱乐，都可以避免产生危险甚至致命的后果。如果这一天性要求得不到满足，劳动者迟早都会产生特殊的职业病。\n支配劳动价格的因素有两种，一是劳动需求，二是生活必需品和便利品的价格。\n## 资本与利润**## **\n**2024/01/26 **发表想法 降息升息 原文：当使用货币能够获得较多利润时，通常可以提高货币的利息率；当使用货币所获得的利润较少时，则可以降低货币的利息率。由此，我们可以确信一点：一国市场一般利息率的变动，必然会影响该国资本的一般利润，使得利润随着利息率的升降而同步地升降。\n当使用货币能够获得较多利润时，通常可以提高货币的利息率；当使用货币所获得的利润较少时，则可以降低货币的利息率。由此，我们可以确信一点：一国市场一般利息率的变动，必然会影响该国资本的一般利润，使得利润随着利息率的升降而同步地升降。\n商人们之所以会埋怨商业衰退，是因为利润减少了。可是，利润减少恰恰是商业繁盛，也就是所投资本比以前更多的自然结果。\n哪怕是财富正迅速增加的国家，也会因为获得新领土或开发新的经营行业而提高资本利润、增加货币利息。\n## 劳动与资本对工资与利润的影响**## **\n因为，在这个一切都自由的社会里，每个人都可以自由地选择自认为适当的职业，还能随时自由地转业。这时，每个人必然都会出于自身利害的考虑，抛弃不利用途而寻求有利用途。\n2024/01/31 **发表想法 职业之间的收入差距的原因 原文：一、职业本身是否令人愉快；二、学习该职业的难易程度、学费的多少；三、该职业有没有安定性；四、职业责任的轻重；五、取得职业资格的可能性大小****。**\n尊贵职业的报酬，大部分都是荣誉。就像本节的后面所论述的那样，如果从金钱得利说上考虑，尊贵职业的工资一般都比较低。卑贱职业的情形却刚好相反。\n演员、歌唱者和舞蹈者的报酬之所以会那么高，有两个原因：一是这种才能罕见而美好，二是运用这种才能会蒙受声名损失。我们在鄙视某人人格的同时又因为其才能而给予其相当优厚的报酬，乍看起来似乎极不合理。其实，他们凭借才能所获得的优厚报酬，只是他们的人格被鄙视的一种补偿。\n第三，劳动和资本的不同用途，必须是使用者唯一或主要的用途，才会有这样的平衡。\n有排外特权的同业组合，一般都设立在城市。在排外特权的控制下，只有那些有自由经营此项业务的人才能互相竞争。通常情况下，得到这种自由的必要条件是在当地有适当资格的人门下做学徒。\n以前的欧洲，大部分有同业组合的行业，其学徒期限似乎都是七年。这些同业组合，以前的拉丁文原名都是“university”\n第一，把部分原料加工，制成成品后再运回农村，以高于原价的价格出售。因为，成品中包含了劳动工资及资本利润。第二，把从外国或国内的遥远地方运来的粗制品，或是一部分精制品，送往农村，以高于原价的价格出售\n## 地租**## ** 地租会在土地产出价格下尽可能高`` 地主在制定租约时，都会设法使租地人所得土地生产物的数额，不但要能足够补偿他预先垫付的这些农业资本，还要能提供当地农业资本的普通利润\n就算生产物中分给租地人的那一部分会超过这个数额（或者说是超过这一数额能够获得的价格），其超过额也自然会被地主设法以地租的形式据为己有。所以说，地租是租地人按照土地情况支付给地主的最高代价。\n因为，工资和利润决定了价格的高低，而地租则由价格决定。\n良好的商业经营，最忌讳的就是独占，而只能靠自由和普遍竞争得以确立。在自由和普遍竞争的驱使下，每个人都会为求自卫而采用良好的经营方法。\n在农业发展的初期，国内的绝大部分土地都没有被开辟，主要用来养畜，所以家畜肉要多于面包。于是，面包这种食物就会因为供不应求而成为竞争对象，因而其售价也较高。\n生产粮食的耕地地租决定了其他大部分耕地的地租。如果有哪块土地因为生产某种特殊产物，提供的地租低于大部分耕地的地租，那么这种低价也绝对不会持续很久，因为那块土地一定会马上改作他用。\n## 有条件提供地租的土地生产物**## **\n有些煤矿，其产出物只够支付劳动工资、开矿资本和普通利润，因而它只能给企业家带来获得若干利润的期望，却不能给地主提供地租。 **## ## 上述两种土地生产物相对价值的变动（一）## **\n土地改良和耕作进步的日益扩大，使得粮食产量日益增加。于是，对一切能供实用及装饰用的非食用土地生产物的需求，就随着粮食产量的增长而增加了。因此，可以预见这两种生产物的相对价值只会发生一种变动，即有条件提供地租的生产物的价值会不断增长，而总能提供地租的生产物的价值则变化不大 ## 本章总结**## **\n一国土地和劳动的全部年产物，其全部价格都由土地地租、劳动工资和资本利润这三部分构成。这三个部分，代表了分别以地租、工资和利润为生的这三个阶级的人民的收入。这三个阶级，是文明社会的基本阶级；他们的收入，是其他所有阶级收入的总源头。\n劳动者的全部重要活动，都由资本使用者的规划和设计支配和指导着\n## 论资本的流通、累积和作用**## ** 资本和生活资料`` 比如织匠吧，他在织品尚未做成并卖出以前，就需要足够维持生计的积蓄，以及工作的材料和工具，不然他也无法织出东西来\n他的资财就被分成了两个部分。他希望从中取得收入的部分，叫作资本；他用以消费的部分，叫作生活资料。\n生活资料总共包括了以下三类。第一，为生活消费而保留的资财；第二，通过各种方法逐渐取得的收入；第三，用上述两类资财购进，且现在尚能使用的物品，比如被服、家具等\n这类资本，叫作流动资本。第二，改良土地、购买有用机器和工具。这类资本叫作固定资本，它们一般无须易主或进一步流通就可提供利润。\n房屋只有在租赁的情况下，才可能作为能够给屋主提供收入的资本，但它对社会大众不提供任何收入，因而也就不能归入资本当中。\n在个人和整个社会留作消费的各种资财中，投在房屋上的那一部分资本的消费是最慢的\n一是所有有助于节省劳动的便利机器和工具。二是所有能够提供利润的建筑物，三是土地，四是全部国民所掌握的有用才能。\n## 维持国民资本的货币**## **\n由于社会上流通的金块量远远小于它在流通中的价值，所以它绝对不能归入社会收入之内。构成社会收入的真正元素，是那些辗转流通于人们之间的金块陆续购得的货物，即那些少量金块的实际购买力。\n如果是甲国人民把本国的巨额金银运到了国外，并用它来购买乙国的货物供人们消费，那么他们所经营的就是“贩运贸易”。由这种贸易增加的利润，自然会增加甲国的纯收入。所以，这笔巨额金银，能够像新筹措的资金一样开办新事业；而国内原本需要由金银来经营的事业，就转由纸币来经营了。\n**2024/02/09 **发表想法 站在国家的角度上，如果你要把自己排除于游惰阶级外，那么你说从事的工作就需要产生真正的价值，不然你也是一个游惰阶级，你的劳动力并不会对国家的生产价值有所提升 原文：游惰阶级的费用也基本上不会增加，他们对外国货物的需求也几乎照旧\n商人们可以依赖现金结算法，没有危险地扩大自己的经营范围。\n在商业状况不变的情况下，一国无障碍流通的纸币总金额，绝对不能多于该国没有纸币时所必需的流通金银量\n一国的产业，会因为慎重的银行活动而增加。但是，增加一国产业的方法，与其说是增加国内资本，不如说是使原本无用的大部分资本，都变得有用；并使原本不生利的大部分资本，都变得能够生利\n可以限制纸币的流通范围，使它仅能在商人之间流通，或是靠它来完成商人与消费者之间的大部分交易\n如果这种天然的自由只是危害全社会安全的少数人的自由，那么法律就应该对其进行限制\n如果一国规定一定要用纸币来缴纳一部分赋税，那么就算纸币的兑现时间是由国王意志决定的，纸币的价格也多少会有所提高。\n无论在任何场合，决定金银和其他货物价值比例的因素，都不是国内通用纸币的性质与数量，而是当时金银矿藏的肥瘠程度，亦即金银上市所需劳动量与等量其他货物上市所需劳动量的比例。\n## 资本积累与生产和非生产性劳动的关系**## **\n加在物品上可以增加物品价值的劳动，称为生产性劳动；加在物品上但不能增加物品价值的劳动，称为非生产性劳动。\n无论是生产性劳动者、非生产性劳动者，还是不劳动者，都要靠土地和劳动年产物过活\n例如，就连工资丰厚的普通工人都经常会雇用一两个仆人，或是看一回木偶戏，更别说是大地主和富商了。这时，一部分土地和劳动年产物，就被用于维持非生产性劳动者了\n无论在什么地方，地租和利润都是非生产性劳动者生活资料的主要来源，\n我们在前面提到过，无论是土地的天然产物还是土地的劳动产物，都会在刚生产出来时就被分成两部分，一部分用来补偿资本，另一部分则是以地租或利润形式出现的收入。现在，我们还要知道，这两个部分的比例，在很大程度上决定了一国生产者和不生产者的比例，并会随着国家的贫富程度而产生差异。\n农业日益进步时期，地租虽然在数量上日渐增大，但其与土地生产物的比例却日益减小。\n一国的年产物，一部分会固定用来雇用生产性劳动，另一部分则既可能用于雇用生产性劳动，也可能用于雇用非生产性劳动\n劳而无功，尚不如戏而无益。\n如果勤劳者的节俭不足以抵消奢侈者的奢侈，那么奢侈者的所作所为，就会使他自己和全国都陷入资源匮乏的境地。\n如果这些被不生产者消费的食物和衣服能够分配给生产者，那么生产者就会把他们消费的全部价值再生产出来，并提供一部分利润。虽然这些货币留在国内，但它们却能再次生产出一个等值消费品，从而将原有的价值提高一倍。\n增加的一部分生产物自然就会四散出去，并购买一些必要的金银。这时，是社会繁荣增加了国内的金银量，而不是国内金银量的增加促进了社会繁荣\n造成一个人浪费的原因，自然是他的享乐欲望。这种欲望，虽然一般都只是暂时而且是偶然发生的，但有时也会热烈得难以抑制。至于一个人节俭的原因，当然是他希望自己的状况能够通过节俭而得以改善。\n在耐久物品上花费收入，对储蓄和养成俭朴的生活风尚都非常有利\n## 贷出取息的资财**## **\n他使得原本可以用于维持勤劳阶级的资金，被转用在了游惰阶级身上，这时，借款者如果不依靠侵蚀地产或地租这类资源，就无法偿付借款的本金和利息。\n这笔货币所能购买的货物的价值，就是三个借钱者贷出的资财，而他们借贷出去的总资财，其实是购买货物所需货币的三倍。\n一是一国资本的增加使得投资利润减少了。这时，新资本要想在国内找到有利的投资方法，将会越来越困难，于是就发生了资本竞争，使得新资本的所有者努力通过互相倾轧的方式去排挤原来的那些投资者\n如果地租比货币利息少得多，那么土地的普通价格就会因为供过于求而下跌。反之，如果从土地中所得的利益不但比货币利息多，而且还有很多剩余，那么人们自然会愿意购买土地，从而使得土地的普通价格因此而提高。\n**## ## 资本的用途## **\n资本的用途总共有四种：一是获取社会每年要使用和消费的原生产物；二是制造适于使用和消费的原生产物；三是将多余的原生产物或制成品运至缺乏它们的地方；四是为适应临时需求而将一部分原生产物或制成品分成更小的部分。\n制造者的资本应该留在国内，这一点比较重要。因为，如果国内有这种资本，那么它必然能在较大程度上推动本国的生产性劳动量、增加本国土地和劳动年产物的价值。\n2024/02/11 **发表想法 一个国家是否完全鼎盛 原文：如果一国资本不足以同时兼营农业、制造业和零售业**，那么我们就可以断定，农业投资越大，越能增加国内的生产性劳动量，并能更多地增加土地和劳动年产物的价值。其次就是制造业，效果最小的是投在出口贸易上的零售业资本。\n如果一国的资本不足以兼营这三种事业，那么其富裕程度就没有达到自然允许的极限\n事实上，这种贸易赚回本钱的速度，很少能像国内贸易那么快\n投在运输贸易上的资本都是从本国抽调出来的，它们原本是可以用来维持本国的生产性劳动的，现在却被用在了维持外国的生产性劳动上\n比如，某个荷兰商人先把波兰的谷物运到葡萄牙，再把葡萄牙的水果和葡萄酒运到波兰，他的所得虽然偿还了两部分资本，即分别为波兰和葡萄牙的生产性劳动提供了支持，却没有为荷兰的生产性劳动提供支持，只有他所得的利润归属了荷兰，所以并没有对荷兰的土地和劳动年产物的增加产生较大的影响\n既然增进本国富强是政治经济学的大目标，那么最值得奖励的是国内贸易，然后是消费品的国外贸易，最后才是运输贸易。所以，出于本国利益的考虑，不应该强制或诱使大部分资本流进消费品的国外贸易或运输贸易方面去。\n**2024/02/11 **发表想法 自由发展 原文：但是，如果这三种贸易是不受拘束地顺应事物发展的趋势自然发展起来的，那么无论是哪一种贸易，都是有利而且必需的\n**2024/02/11 **发表想法 贸易战争是否是为克制这一自然自由行为的举动 原文：一国的累积资本，如果没有全部用于供给本国消费和维持本国的生产性劳动，那么剩余的资本，自然会通过运输贸易的渠道流入外国，供他国消费、维持他国的生产性劳动。运输贸易代表着国民财富，它是国民财富增加的自然结果，而不是国民财富增加的原因。这种贸易，不但得到了有些政治家的赞成，还得到了他们的特别奖励。不过，这些政治家似乎是把它当成国民财富增加的原因了\n还要受制于这些生产物所能购得的物品的价值\n**2024/02/11 **发表想法 贸易产生于生产剩余 原文：运输贸易，是在世界范围内交换剩余生产物的贸易，所以其贸易范围，必然受制于世界剩余生产物的价值\n运输贸易，是在世界范围内交换剩余生产物的贸易，所以其贸易范围，必然受制于世界剩余生产物的价值\n决定资本用途的唯一动机是私人利润。\n## 论不同国家资本发展的不同**## **\n**2024/02/11 **发表想法 士农工商并非平白无故，士应该只是统治阶层额外施加的社会尊重 原文：因为，只有先开垦了一些土地之后，才能逐渐建立更多的城市，然后才可能出现粗糙的城市制造业，并逐渐出现一些愿意投身于国外贸易的人。\n因为，只有先开垦了一些土地之后，才能逐渐建立更多的城市，然后才可能出现粗糙的城市制造业，并逐渐出现一些愿意投身于国外贸易的人。\n## 欧洲农业在罗马帝国崩溃后曾受到抑制**## **\n宾夕法尼亚作出了释放黑奴的决议，由此我们相信，那里的黑奴总数一定不多。因为，如果人们的大部分财产都是奴隶的话，那么释放黑奴的决议是绝对不可能通过的。 ## 罗马帝国崩溃后都市的发展**## **\n但是当地的市民，大都逐渐发展起来，最终成为征服当地贵族的独立的民主社会，从而有权力迫令贵族们拆毁乡间城堡，让他们跟其他和平居民一样在都市里居住 ## 城市工商业会促进农村的发展**## **\n封建法律用尽一切强制手段都不能削弱的大领主权力，却被国外商业和制造业逐步地分解了。自从出现了国外商业和制造业之后，大领主所得的土地剩余生产物，就有了与其他物品进行交换的市场。而且，大领主由此换得的其他物品，也无须与佃农和农奴分享，完全可以由他独享。于是，就出现了“专门利己，毫不利人”的信条。这一信条，几乎得到了所有主子的认同和遵守\n**2024/02/12 **发表想法 感慨历史权利的变迁多种多样 原文：既然大领主与佃农和门客相互独立了，那么大领主执行或干涉法律的权力也就跟着消失了，自然无法再扰乱社会治安。这样，就等于他们已经卖掉了他们那由来已久的权利，但他们卖出这种权利的原因，并不是饥饿或是追求成人所应追求的宝石或钻戒，而仅仅是满足儿童式的娱乐。渐渐地，他们就变得跟城市中的殷实市民或平凡商人一样了。于是，无论是城市还是乡村，都设立了政府。此后，都市和乡村的政治都开始处于安定有序的状态。\n所以，事实上，是城市工商业促进了欧洲大部分农村的开发与发展，而不是农村的开发与发展导致了城市工商业的出现。不过，由于这种发展违背了自然趋势，所以其发展速度也是缓慢的，而且充满了不确定性。比如，欧洲各国就是以工商业为富国基础的，所以其进步速度比较慢，在将近五百年的时间内，大部分地区的人口也没有增加一倍；而我们在北美的殖民地则是以农业为富国基础的，所以进步速度比较快，有些地区在二十或二十五年的时间内就增加了一倍的人口。\n**2024/02/12 **发表想法 商业资本是游离的 原文：有一种说法是，商人并不属于某个特定的国家，这话说得的确没错。因为，对于商人来说，营业场所在什么地方并不重要。如果他们对某个国家有一些小意见，那么他们可以直接从这个国家抽出他们的资本，带着这些资本去其他国家投资。既然资本迁移了，那么资本所维持的产业必然也要跟着迁移。只有在资本以建筑物或土地永久改良物的形式在某国固定下来时，它才属于该国\n有一种说法是，商人并不属于某个特定的国家，这话说得的确没错。因为，对于商人来说，营业场所在什么地方并不重要。如果他们对某个国家有一些小意见，那么他们可以直接从这个国家抽出他们的资本，带着这些资本去其他国家投资。既然资本迁移了，那么资本所维持的产业必然也要跟着迁移。只有在资本以建筑物或土地永久改良物的形式在某国固定下来时，它才属于该国\n**## ## 论政治经济学体系## **\n当一国的输出大于输入时，差额部分就由外国以金银偿还，这么一来，国内的金银量就会增加。而当一国的输出小于输入时，差额部分就由本国以金银支付，这样，国内的金银量就减少了\n有些货物即使存货充足，也会因为体积的影响而不能被随意转移到存货不足的市场\n财富无疑是由货币或金银构成的，如果有人对此产生怀疑，于是力图证明财富是由货币所购得的货物构成的，并认真地说明货币只有在购买货物时才有价值，那么他的看法未免过于可笑\n明显地，一国的金银量也是受其实际用途限制的\n**2024/02/12 **发表想法 需求驱动存量 原文：决定一国有多少铸币的因素，是国内借铸币流通的商品的价值。当商品价值增加时，商品流通所需的货币量也会相应增加\n决定一国有多少铸币的因素，是国内借铸币流通的商品的价值。当商品价值增加时，商品流通所需的货币量也会相应增加\n国家限制输入的情况有两种。一、凡是本国也能生产的外国货物，一律限制其输入。二、如果在与某国进行对外贸易时，出现了不利于本国的贸易逆差，那么无论从该国再输入任何货物，都要加以限制。政府在执行这些限制时，所采用的方法也不同，主要有征收高额关税和绝对禁止这两种方法。\n## 限制进口本国也能生产的外国货物**## **\n不过，这种限制基本上不起什么作用，还可能带来一些危害。因为，当国内市场的本国生产物和外国生产物同样低廉时，这种限制是起不到什么作用的；而当本国生产物比外国生产物价格高昂时，这种限制一般是有害的。\n如果没有限制输入，那么有些特定制造业就不能快速地确立\n有时候，某国在生产某些特定商品时，占有了非常大的自然优势，以致其他国家都认为违背这种自然优势来行事是徒劳的。\n第一种情况，这种外国产业是国防所必需的特定产业。\n第二种有利用途产生在对国内生产物征税的时候。\n虽然只有生活必需品缴纳了这种赋税，但事实上就相当于国内的所有商品都纳了税；要使国内外产业地位相等，就要对输入本国的所有外国商品都征税，税额与本国商品价格增高的数目相等\n在这两种情况之下，对人民最有利的事情，自然是让他们自己尽可能地适应环境，为其资本和劳动寻找更有利的用途，从而使他们能在情况不利时也能在市场上处于稍微有利的地位\n高额关税或禁止输入，受到了普遍的斥责。而采取报复政策的目的，就是废止高额关税和禁止输入。如果它能达到目的，就可以说它是好政策。\n在这种情况之下，如果按照人道主义的要求来恢复自由贸易，也许只能小心翼翼地一步一步进行恢复。因为，如果高额关税和禁止输入突然被废止，那么外国一些低廉的同类商品就会迅速流入国内，夺走我国人民的大量生活资料，并使国内很多人失业，引起极大的社会混乱。\n并不是所有对外国商品征税的行为，都是以限制输入为目的的，有些征税行为的目的是筹集政府资金\n**## ## 限制进口那些使我国陷入贸易逆差的外国货物## **\n**2024/02/14 **发表想法 谁生产谁制造谁获益 原文：当两地进行的全是国产商品的交换贸易，而且贸易额平衡，那么两地一般都会得利，而且所得利益也必然近于相等。在这种情况下，两地互为对方的一部分剩余生产物的消费市场。这时，甲方投在生产和制造这部分供居民消费的剩余生产物上的资本，可以从乙方那里得到补偿；乙方投入的同类资本，也可以从甲方那里得到补偿。所以，两国居民的收入和生活资料，都有一部分是间接从对方那里取得的\n**2024/02/14 **发表想法 当可支配的劳动量充裕，但无处使用，又该如何 原文：一国的资本是由全体人民的个人资本组成的，它决定了一国每年所能维持的劳动量。\n勤劳的富人邻居，比穷邻居更适合做顾客\n**2024/02/14 **发表想法 去大城市发展 原文：一个人在穷乡僻壤里是很难发财的，只有大城市才是他实现目标的好地方。因为，当财富的流通量非常少时，一个人能够从中取得的财富量也很少。\n**2024/02/14 **发表想法 中美 原文：每一国的商人和制造者，都担心对方会给自己带来技术和商业活动上的不利竞争。这么一来，由激烈的民族仇恨激起的商业嫉妒，现在又反过来强化民族仇恨，二者相互助长彼此的气焰。\n**## ## 退税## **\n退税，在各种奖励中，可以说是最合理的了。所谓退税，是指因货物出口而退还给商人的全部或一部分本国产业税或国内税。\n退税制度建立的目的，是为了奖励出口贸易\n**2024/02/14 **发表想法 退税制度存在有目的性，且对整体资本的流动没有较大影响 原文：但是这种奖励本身是合理的。这是因为，退税制度只是为了防止进口税排斥某种贸易，它并不会使流入出口贸易的资本大于在无进口税时流入该贸易的资本；并且，对于那些既不能投入本国农业和制造业，又不能投入国内贸易和国外消费品贸易的资本，出口贸易解决了它的出路。\n但是这种奖励本身是合理的。这是因为，退税制度只是为了防止进口税排斥某种贸易，它并不会使流入出口贸易的资本大于在无进口税时流入该贸易的资本；并且，对于那些既不能投入本国农业和制造业，又不能投入国内贸易和国外消费品贸易的资本，出口贸易解决了它的出路。\n**## ## 奖励金## **\n对待外国人，不能像对本国人一样，强迫他们购买本国生产的商品，所以有人想出了一个办法，那就是我们来为外国人的消费埋单（也就是给这些商品发放奖励金）\n**2024/02/15 **发表想法 奖励金是鼓励和促进，不能处于维持阶段 原文：如果某些商业部门销售货物所得的利益，不能补偿成本或不能提高利润，那么发放奖励金支持这些商业部门的继续经营，实际上就是在鼓励一种收益小于成本的经营方式，即每一次经营都只会亏本而不会赢利。试想，如果所有的商业部门都这样的话，国家的资本很快就会被消耗殆尽。\n如果某些商业部门销售货物所得的利益，不能补偿成本或不能提高利润，那么发放奖励金支持这些商业部门的继续经营，实际上就是在鼓励一种收益小于成本的经营方式，即每一次经营都只会亏本而不会赢利。试想，如果所有的商业部门都这样的话，国家的资本很快就会被消耗殆尽。\n**## ## 通商条约## **\n**2024/02/15 **发表想法 历史的通商条约 原文：如果甲国与乙国签订条约，禁止或以征收重税的方式限制其他外国的某种商品的进口，只允许乙国这种商品的进口，并且对其免税，那么乙国的商人和制造业者，就一定可以从这种条约中获得较大的利益。因为，乙国商人和制造业者，在甲国便享受了一种垄断权；甲国也就成为他们商品的一个更广阔而又更有利的市场。更广阔，是指在其他国家货物进口要缴纳重税的情形下，乙国货物进入甲国市场的数量要比没有条约时多得多；更有利，是指乙国商人在甲国享受了一种垄断权，因而常常能够以比自由竞争场合更高的价格出售他们的商品。 ## 新殖民地繁荣的原因**## **\n这是因为罗马殖民地是在被征服的地方建立的，因而遭受着两种不利的条件：一、在那里，人口差不多已经非常稠密了，因此殖民者们分得的土地也不多；二、殖民地没有独立于原城邦，殖民者们不能按照最有利于自己的方式来自由处理自己的事务。\n良地的富饶与地价的低廉，是殖民地繁荣的主要原因\n从以上可以看出，所有新殖民地的繁荣都有两大原因：一是有大量优良的土地，二是殖民地人民可以按照有利于自己的方式自由处理事务。\n## 关于重商主义的结论**## **\n**2024/02/18 **发表想法 提升国外原料价格降国外生产效率 原文：这种政策限制工业原料和生产工具的出口，使我国商人处于有利地位，使他们在外国市场上能够以比其他国家更低的价格出售货物，从而更有竞争力\n这种政策限制工业原料和生产工具的出口，使我国商人处于有利地位，使他们在外国市场上能够以比其他国家更低的价格出售货物，从而更有竞争力\n## 论国家的收入**## ** 国家的支出：军事常备军的维持，司法费，公共工程和机关。**** 在比较进步的游牧民族社会，情况也大致相同。例如，在鞑靼民族和阿拉伯民族中，人人既是游牧者又是战士。他们没有固定的住所，要么生活在帐篷中，要么生活在能够迁徙的马车中。\n对于文明国家而言，邻近的狩猎民族不足为惧，而游牧民族的威胁则大得多\n**2024/02/20 **发表想法 因为游牧民族一直稳定迁徙，人数规模可以扩大 原文：对于文明国家而言，邻近的狩猎民族不足为惧，而游牧民族的威胁则大得多。\n如此看来，在一个国家里，如果大部分居民都是技术工人和制造业者，导致大部分人都要去服兵役，那么国家就得负担他们服兵役期间的生活费用。\n**2024/02/21 **发表想法 国家的军队受限于国家的财富（劳动力） 原文：对于劳动者来说，他们不仅要负担军队的开支，还要维持自己的开支，并且根据自己的身份相应地负担行政司法机关的开支。因此，士兵的数目就不能超过这些劳动者所能维持的限度\n对于劳动者来说，他们不仅要负担军队的开支，还要维持自己的开支，并且根据自己的身份相应地负担行政司法机关的开支。因此，士兵的数目就不能超过这些劳动者所能维持的限度\n国家一般都只好采取以下两种国防战略：不顾国民的利益、资质、职业、意愿，用严厉的法令强迫所有或部分适龄市民参与军事训练；雇用一部分市民参加军事训练，使士兵成为一个特殊的独立的职业\n**2024/02/21 **发表想法 民兵是一般通过法律临时召集的临时士兵，常备军则是提供报酬的长期军队 原文：当国家采取第一种策略时，国家的军队就被称为民兵部队；当国家采取第二种策略时，国家的军队就被称为常备军\n**2024/02/21 **发表想法 常备军的必要性 原文：纪律严明的常备军，使得文明国可以抵御外敌，而野蛮国可以变得文明。 国家可以依靠常备军的威力，将君主的法令推行到帝国最偏远的地方。并且，常备军的威力，可以在那些没有常备军就无政治的国家里维持相当程度的正常统治\n如果全国的兵力都是由那些享有最多民政权力的人掌握，这些人的最大利益就在于支持民政权力时，常备军就绝不会妨碍自由了\n在古代，富裕的文明国家很难抵御贫穷的野蛮国家的侵略；但是在近代，贫穷的野蛮国家则很难抵御富裕的文明国家的宰割\n**## ## 司法经费## **\n然而，随着社会的发展，富人的贪得无厌和穷人的好逸恶劳，使人们产生了侵害他人财产的情绪\n也就是说，少数人的富有总是伴随着多数人的贫穷。而穷人对富人的嫉妒和怨恨，会促使他们产生侵犯富人财产的情绪\n人类社会的第一个时期是狩猎民族社会，在这个社会里不存在财产的不平等。普遍贫困，造成了普遍平等。年龄和个人资质的优越，就是唯一决定命令和服从关系的条件。人类社会的第二个时期是游牧民族社会，在这个社会里财产出现了非常不平等的可能，这时期由财产造成了优越性的不同，从而明确地区分了命令和服从的关系\n门第和财产，既是使一个人的地位高于另一个人的两大因素，也是个人优越性的两大前提\n政府组织的建立，就是为了保障财产的安全，保护富人来对抗穷人，保护有产者来对抗无产者。\n只好任命代理人去处理。在罗马帝国强盛时期，大执政官因为忙于政务而无法顾及司法行政，只好任命民政官来代行这种职务。罗马帝国衰落之后，在它的废墟上建立起来的欧洲各王国，他们的君主或大领主们，都视司法行政为一种过于烦琐的工作，亲自处理不免有失身份。于是，一般情况下，他们也是委任代理人或裁判官去从事这项工作\n**## 公共工程和机关的费用（一）****## **\n建立和维持某些公共机关和公共工程，是君主和国家的第三大任务\n**2024/02/22 **发表想法 缴交车船税以提供公共基础建设费用 原文：对于车辆和船舶的通行税，如果是以货物的重量或吨数为标准来缴纳的话，那么可以说，正是按照它们所带来的损耗程度支付维持费用的。这也是维持这些公共工程所采用的最公平的办法了。我们都知道，通行税是由运输者暂时支付，最后由购买货物的消费者来负担的\n以前，无论是战争关系还是同盟关系，国家都不用在外国建立使馆，但现在，国家常常为了商业的利益而在外国建使馆\n**2024/02/22 **发表想法 大使馆存在的原因 原文：例如，当本国人民之间在驻国发生诉讼时，大使或领事可以依本国的习惯进行裁判；当本国国民和驻国国民之间发生诉讼时，大使或领事可凭外交官的身份进行干涉，按照本国的习惯进行裁判\n例如，当本国人民之间在驻国发生诉讼时，大使或领事可以依本国的习惯进行裁判；当本国国民和驻国国民之间发生诉讼时，大使或领事可凭外交官的身份进行干涉，按照本国的习惯进行裁判\n如果国家为保护一般贸易而征收一般税收的话，那么为保护特殊贸易，就应当征收特殊税收。\n**2024/02/22 **发表想法 由多数商人集合自我保护，演变成特殊政府部门 原文：但最后总是因为经营的不当或者范围狭窄，这些商业部门全都变成了无用且花费资本的部门\n组合公司似乎在任何方面都类似于欧洲各都市普遍流行的同业协会，是一种大的垄断组织。如果一个人不先从同业协会那里取得自由营业权，那么他就不能从事同业协会的所有行业\n**## 公共工程和机关的费用（二）****## **\n无论哪种职业的人，他努力的程度都与他努力的必要性相适应\n如果一个人仅仅有大的目标而没有实现的必要性的话，那么这种目标也不会激励人们作出多大的努力\n如果无论他是否履行义务，他的薪水都是一样的，那么他就会选择不去履行义务。\n## 公共收入的来源**## **\n但总的来说，这些费用的来源有两个：一是属于君主或国家的特别收入；一是人民的收入。\n各国君主和私人一样，为了改善财产状态，经常会从事其他的许多商业，从而变成那些商业部门的冒险家。然而，他们并没有获得多少成功。君主经营一种商业往往会浪费，而浪费就会使他们不可能获得成功\n一般来说，国家大部分的收入都是来自货币的利息和资本的利润。\n近代有两件事情花费了大国大部分的必要费用，那就是战争和准备战争。\n## 公债**## **\n商业社会的状态带来了国家借款的必要，那么它同样也会带来借款的便利\n当人民对政府的公正失去了信任时，这个国家的商业和制造业也必然不会得到长远的发展\n**2024/02/24 **发表想法 在君主喜怒无常的情况下，也就不会有人借贷给国家 原文：在没有商业和制造业的野蛮社会，人们把自己节约的货币都藏匿起来，就是因为他们不相信政府。并且，他们还害怕政府知道货币藏匿之处后会掠夺他们的货币。在这种情况下，当政府处于危急关头时，几乎没有人愿意且有能力贷款给政府。而君主也早就知道借款的难度，因此平时厉行节约，以备紧急关头之用。\n","permalink":"https://ynikl.github.io/books/%E5%9B%BD%E5%AF%8C%E8%AE%BA/","summary":"《国富论》## 亚当·斯密\n203个笔记\n总结## 分工提高产生效率，产生生产物的剩余，引发了商业交换行为。商业行为进一步分化分工，进一步提高生产率，再进一步繁荣商业行为，如此往复。频繁的商业行为产生了货币。`` 商品的价格由：资本的利润，工人的工资，地主的租金组成。`` 资本是流动的，但是国家的财富重点在于生产，要鼓励国内的生产性消费。贸易顺差代表国家财富的增加，但是在自由世界贸易顺逆是财富增加的结果而不是原因。`` **## ## 点评## **\n**2024/02/24 **认为好看 ## 第## 1## 章## ## 论增进劳动生产力的因素及分配劳动生产物给各个阶层的自然顺序## 分工提高生产率`` 凡是能分工的工艺，分了工就可以相应地增强劳动生产力。分工的这种好处，也体现在各种行业各自分立这一社会现象上。如果一个国家有着较高的产业与劳动生产力的增进水平，那么其各行各业的分工一般也都达到了较高水平。\n也许就是因为农业不能采用完全的分工制度，才使得农业在劳动生产力的增进上，总是跟不上制造业的步伐。\n比如，法国的富裕和进步程度远胜于波兰，但品质同样优良的小麦在波兰的售价与在法国的售价是一样低廉的\n分工对工业的改良影响了售价，但是农业产品不变`` 出现了分工之后，同样数量的劳动者所完成的工作量，就能比过去多得多。其原因有三点：第一，劳动者因为专业而掌握了技巧；第二，免除了由一种工作转到另一种工作所带来的时间损失；第三，随着简化和缩减劳动的机械的发明，一个人能够做原本需要许多人才能完成的工作。\n相比较而言，人类的注意力如果只集中于单一的事物上，会比分散在许多事物上更容易发现达到目标的更简易、更便利的方法。分工出现以后，每个人的注意力都会自然而然地全部倾注在一种简单的事物上\n## 分工的起源**## **\n是一种互通有无、物物交换的倾向逐渐发展起来的结果。\n某一动物要想从人或其他动物那里取得某物，唯一的说服手段就是博取授予者的欢心。\n乞丐的大部分临时需要，也是通过契约、交换和买卖而得到的，就像其他人一样。他拿出别人给他的金钱购买食物；\n这样一来，人们就拿出自己生产而又消费不了的剩余劳动产物，以换得自己所需的别人劳动生产物的剩余部分\n成年人在其所从事的不同职位上所表现出的非常不同的才能，与其说是分工的原因，不如说是分工的结果\n## 市场大小会限制分工**## **\n如果市场过小，人们就不能用自己劳动生产物的剩余部分，来随意换得自己所需的别人劳动生产物的剩余部分，这样他们也就不会终生从事某一职业。 小城镇的服务和种类就不够多，因为市场太小了`` ## 货币的起源和效用**## ** 商业起源于生产剩余的交换，货币是方便交换媒介`` 据说，在未开化的社会里，牲畜曾是商业上的通用媒介，也就是牲畜可以用来交换各种物品\n金属与其他任何货物相比都不逊色。它不易磨损，不仅具有很强的耐久性，还能全无损失地任意分割，而且分割之后还可以再熔回原形。金属的这种性质，是其他一切有耐久性的物品都不具有的。因此，金属成了商业流通中最适宜的媒介\n“价值”这个词有两个不同的意思，一个是物品的效用，一个是由于占有某物而获得的购买他种货物的能力。我们称前者为使用价值，后者为交换价值\n**## ## 商品的劳动价格与货币价格## ** 商品的价值是用劳动量衡量`` 在分工完全确立之前，一个人享受人生的必需品、便利品和娱乐品的程度，反映了他的贫富水平。但是，自从分工确立了之后，各人所需要的物品大部分都来自他人的劳动。所以，衡量贫富水平的尺度，变成了一个人能够支配的劳动的多少，也就是他能够购买的劳动的多少。一个人占有着某种自己不愿消费的货物，然后又用它去交换他物。那么，这一货物的价值，就等于他能购买或支配的劳动量。因此，衡量一切商品交换价值的真实尺度就是劳动。\n都是获得它所付出的辛苦和麻烦\n需要经过十年学习才能做的工作，即使做一个小时，它所含的劳动量也可能比普通业务做一个月所含的要多。\n对于劳动者来说，等量的劳动一般都有等量的价值；但是，对雇用劳动者的雇主来说，等量劳动的价值却会因时而变\n## 商品的价格组成**## ** 商品价格的组成：`` ``利润，工资，地租`` 随着资本在个别人手中积聚，其中有一些人把资本投在了劳动人民身上。\n这些人为劳动者提供了原材料和生活资料，叫他们劳作，以生产更多的劳动生产物或增加劳动原材料的价值\n在这种情况下，增加的劳动原材料的价值，就被分成了两个部分，一部分用于支付劳动者的工资；另一部分则变成了雇主的利润。\n而且，资本的利润取决于所投资本价值的大小，而不是由监督指挥这种劳动的数量、强度与技巧决定的。\n在这种情况下，劳动者的全部劳动生产物，就不再由劳动者自身独占，而是要分出一部分给雇用他的资本所有者。决定某一商品所应交换、支配或购买的劳动量的因素，除了花费在取得或生产这一商品上的劳动量，还要再加上垫付劳动工资并提供材料的资本的利润。\n可是现在，劳动者要获得这些自然产物，却要另外付出代价，不但要获得采集权，还必须把他采集的产物分出一部分给地主。这一部分（或者说这一部分的代价）就是地租\n所以，生产乃至运输社会全部劳动年产物所需要的劳动量，要远远小于这些年产物所能购买或支配的劳动量\n**2024/01/14 **发表想法 资本再产生了资本 原文：假设社会每年所能购买的劳动量都被雇用，那么后一年度生产物的价值将比前一年度的更大。因为，经过了一年又一年，劳动量大大增加了","title":"国富论"},{"content":"背景：\n后端（Golang) 接口卡控前端给的md5 值的长度， 百度md5 结构为128位长度，心理默认8位为一个字符。卡控判断md5 长度为16位，但是前端时间传入 md5 长度位32字符\n原因：\ngolang 的 len 判断的是 字符数（bytes) md5 的结果是128位， 也即是16bytes 没错，但是通常md5会原先转成16进制，即4位一个字符，即转化成一个128/4=32 字符的字符串。传递到后端即为32位字符。\n","permalink":"https://ynikl.github.io/posts/md5-length/","summary":"背景：\n后端（Golang) 接口卡控前端给的md5 值的长度， 百度md5 结构为128位长度，心理默认8位为一个字符。卡控判断md5 长度为16位，但是前端时间传入 md5 长度位32字符\n原因：\ngolang 的 len 判断的是 字符数（bytes) md5 的结果是128位， 也即是16bytes 没错，但是通常md5会原先转成16进制，即4位一个字符，即转化成一个128/4=32 字符的字符串。传递到后端即为32位字符。","title":"md5 128位但长度为32位"},{"content":"使用背景\n一套程序代码，配置文件，需要同时在不同的云厂商运行。\n通过修改 jenkins, 的部署 pipeline , 让开发人员准确的获取到当前程序的运行环境 还能保持代码统一.\nldflags 修改的变量, 无大小写限制, 小写变量也可修改编译过程进行修改\n变量引用需要 fullpath. 例如 main 文件中的变量 go build -ldflags=\u0026quot;-X 'main/varName=xxx'\n子包，需要当前 mod 包名称开头。 可以查看第二篇文章\ngo build variable\nhttps://programmingpercy.tech/blog/modify-variables-during-build/\n发现更加简单的解决方案\ngo build -tags targetCloud\nhttps://pkg.go.dev/go/build#hdr-Build_Constraints ","permalink":"https://ynikl.github.io/posts/go-build-time-variable/","summary":"使用背景\n一套程序代码，配置文件，需要同时在不同的云厂商运行。\n通过修改 jenkins, 的部署 pipeline , 让开发人员准确的获取到当前程序的运行环境 还能保持代码统一.\nldflags 修改的变量, 无大小写限制, 小写变量也可修改编译过程进行修改\n变量引用需要 fullpath. 例如 main 文件中的变量 go build -ldflags=\u0026quot;-X 'main/varName=xxx'\n子包，需要当前 mod 包名称开头。 可以查看第二篇文章\ngo build variable\nhttps://programmingpercy.tech/blog/modify-variables-during-build/\n发现更加简单的解决方案\ngo build -tags targetCloud\nhttps://pkg.go.dev/go/build#hdr-Build_Constraints ","title":"Go Build Time Variable"},{"content":"架构设计的核心\n分离控制，和业务逻辑, 分离依赖 学习到的经验\n代码实现设计使用开闭, 单一职责. 业务逻辑不应该依赖, 外部具体细节，需要控制反转. 梳理 UML 图, 合理的描述整个项目代码结构. 如果当前项目重新开始?\n禁止数据结构体的透传(从持久层透传到呈现层) 采用依赖注入，利用编译器，比例go的internal 文件夹，控制不合理的依赖 业务逻辑引用 usecase，采用业务场景分层，放弃 MVC 平铺式写法 禁用通过 SQL 完成业务逻辑, 数据层与业务逻辑解耦，禁止直接复用对象 梳理好项目架构设计图文档，避免新人打乱代码层级（或通过服务设计强制分割依赖 文摘 然而，其中一些程序员发现，只让代码跑起来是不够的，因为这个世界是不断变化的，他们发现自己需要花更多的时间来维护代码：增加新的需求，扩展原有的流程，修改已有的功能，优化性能……一个人完全维护不过来，还需要更多的人，于是代码还需要在不同人之间轮转；他们发现代码除了需要跑起来，还需要易读、易扩展、易维护，甚至可以直接重用。于是，这些人使用各种各样的手段和技术不断提高代码的易读性、可扩展性、可维护性和重用性。我们把这些有“洁癖”、有工匠精精、有修养的程序员叫作工程师，工程师不仅仅是在编写代码，他们会用工程的方法来编写代码，以便让编程开发更为高效和快速。他们把编程当成一种设计，一种工业设计，把代码模块化，让这些模块可以更容易地交互拼装和组织，让代码排列整齐——阅读和维护这些代码就像看阅兵式一样舒心畅快。\n但是有一些资深的工程师开始站出来挑战这些问题，有的基于业务分析给出平衡的方案，有的开始尝试设计更高级的技术，有的开始设计更灵活的系统，有的则开始简化和轻量化整个系统……这些高智商、经验足、不怕难的工程师们引领着整个行业前行。他们就是架构师！\n2023/09/27发表想法 分离控制，和逻辑\n论是三种编程范式还是微服务架构，它们都在解决一个问题——分离控制和逻辑。所谓控制就是对程序流转的与业务逻辑无关的代码或系统的控制（如多线程、异步、服务发现、部署、弹性伸缩等），所谓逻辑则是实实在在的业务逻辑，是解决用户问题的逻辑。控制和逻辑构成了整体的软件复杂度，有效地分离控制和逻辑会让你的系统得到最大的简化。\n◆ 推荐序二 久远的教诲，古老的智慧\n我提了一个很“笨”的办法：把所有“共享变量”都抽到Redis中进行读写，消灭本地副本，然后把稳定版本程序多部署几份，这样就可以多启动几个实例，将这些实例标记为AB两组。同时，在前面搭建代理服务，用于分流请求——核心功能请求分配到A组（程序基本不更新），外围功能请求分配到B组（程序按业务需求更新）。这样做看起来有点多此一举——AB两组都只有部分代码提供服务，而且要通过Redis共享状态，但是却实现了无论B组的程序如何更新，都不会影响A组所承载的核心服务的目的。\n，我看到接口的设计非常随意，接口不是基于行为而是基于特定场景的实现，没有做适当的抽象，也没有为未来预留空间，直接导致契约僵硬死板。每新增一种终端呈现形式，整个内容生产流程就要大动干戈，这样的例子并不罕\n◆ 第1章 设计与架构究竟是什么\n总的来说，架构图里实际上包含了所有的底层设计细节，这些细节信息共同支撑了顶层的架构设计，底层设计信息和顶层架构设计共同组成了整个房屋的架构文档。软件设计也是如此。底层设计细节和高层架构信息是不可分割的。它们组合在一起，共同定义了整个软件系统，缺一不可。所谓的底层和高层本身就是一系列决策组成的连续体，并没有清晰的分界线。\n2023/10/09发表想法 降低发布变更成本\n一个软件架构的优劣，可以用它满足用户需求所需要的成本来衡量。如果该成本很低，并且在系统的整个生命周期内一直都能维持这样的低成本，那么这个系统的设计就是优良的。如果该系统的每次发布都会提升下一次变更的成本，那么这个设计就是不好的。就这么简单。\n一个软件架构的优劣，可以用它满足用户需求所需要的成本来衡量。如果该成本很低，并且在系统的整个生命周期内一直都能维持这样的低成本，那么这个系统的设计就是优良的。如果该系统的每次发布都会提升下一次变更的成本，那么这个设计就是不好的。就这么简单。\n要想跑得快，先要跑得稳。\n◆ 第2章 两个价值维度\n业务部门与研发人员经常犯的共同错误就是将第三优先级的事情提到第一优先级去做。换句话说，他们没有把真正紧急并且重要的功能和紧急但是不重要的功能分开。这个错误导致了重要的事被忽略了，重要的系统架构问题让位给了不重要的系统行为功能。\n◆ 第3章 编程范式总览\n结构化编程对程序控制权的直接转移进行了限制和规范。\n这两个程序员注意到在ALGOL语言中，函数调用堆栈(call stack frame)可以被挪到堆内存区域里，这样函数定义的本地变量就可以在函数返回之后继续存在。这个函数就成为了一个类(class)的构造函数，而它所定义的本地变量就是类的成员变量，构造函数定义的嵌套函数就成为了成员方法(method)。这样一来，我们就可以利用多态(polymorphism)来限制用户对函数指针的使用。\n面向对象编程对程序控制权的间接转移进行了限制和规范。\n函数式编程对程序中的赋值进行了限制和规范。\n◆ 第4章 结构化编程\nDijkstra提出的解决方案是采用数学推导方法。他的想法是借鉴数学中的公理(Postulate)、定理(Theorem)、推论(Corollary)和引理(Lemma)，形成一种欧几里得结构。Dijkstra认为程序员可以像数学家一样对自己的程序进行推理证明。换句话说，程序员可以用代码将一些已证明可用的结构串联起来，只要自行证明这些额外代码是正确的，就可以推导出整个程序的正确性。\nDijkstra在研究过程中发现了一个问题：goto语句的某些用法会导致某个模块无法被递归拆分成更小的、可证明的单元，这会导致无法采用分解法来将大型问题进一步拆分成更小的、可证明的部分。\n既然结构化编程范式可将模块递归降解拆分为可推导的单元，这就意味着模块也可以按功能进行降解拆分。这样一来，我们就可以将一个大型问题拆分为一系列高级函数的组合，而这些高级函数各自又可以继续被拆分为一系列低级函数，如此无限递归。更重要的是，每个被拆分出来的函数也都可以用结构化编程范式来书写\n这就是科学理论和科学定律的特点：它们可以被证伪，但是没有办法被证明。\nDijkstra曾经说过“测试只能展示Bug的存在，并不能证明不存在Bug”，换句话说，一段程序可以由一个测试来证明其错误性，但是却不能被证明是正确的。测试的作用是让我们得出某段程序已经足够实现当前目标这一结论。\n结构化编程范式中最有价值的地方就是，它赋予了我们创造可证伪程序单元的能力。\n◆ 第5章 面向对象编程\n我们很难说强封装是面向对象编程的必要条件\n归根结底，多态其实不过就是函数指针的一种应用。自从20世纪40年代末期冯·诺依曼架构诞生那天起，程序员们就一直在使用函数指针模拟多态了。也就是说，面向对象编程在多态方面没有提出任何新概念。\n因为自20世纪50年代末期以来，我们学到了一个重要经验：程序应该与设备无关。这个经验从何而来呢？因为一度所有程序都是设备相关的，但是后来我们发现自己其实真正需要的是在不同的设备上实现同样的功能。\n2023/10/17发表想法 依赖与控制流是同方向的\n我们可以想象一下在安全和便利的多态支持出现之前，软件是什么样子的。下面有一个典型的调用树的例子，main函数调用了一些高层函数，这些高层函数又调用了一些中层函数，这些中层函数又继续调用了一些底层函数。在这里，源代码层面的依赖不可避免地要跟随程序的控制流（详见图5.1）。[插图]图5.1：源代码依赖与控制流的区别\n系统行为决定了控制流，而控制流则决定了源代码依赖关系。\n请注意模块ML1和接口I在源代码上的依赖关系（或者叫继承关系），该关系的方向和控制流正好是相反的，我们称之为依赖反转。这种反转对软件架构设计的影响是非常大的。\n软件架构师可以完全控制采用了面向对象这种编程方式的系统中所有的源代码依赖关系，而不再受到系统控制流的限制。不管哪个模块调用或者被调用，软件架构师都可以随意更改源代码依赖关系。\n2023/10/17发表想法 用户界面和数据库以接口的形式，注入业务逻辑模块\n这种能力有什么用呢？在下面的例子中，我们可以用它来让数据库模块和用户界面模块都依赖于业务逻辑模块（见图5.3），而非相反。[插图]图5.3：数据库和用户界面都依赖于业务逻辑这意味着我们让用户界面和数据库都成为业务逻辑的插件。也就是说，业务逻辑模块的源代码不需要引入用户界面和数据库这两个模块。\n于是，业务逻辑组件就可以独立于用户界面和数据库来进行部署了，我们对用户界面或者数据库的修改将不会对业务逻辑产生任何影响，这些组件都可以被分别、独立地部署。\n对一个软件架构师来说，其含义应该是非常明确的：面向对象编程就是以多态为手段来对源代码中的依赖关系进行控制的能力，这种能力让软件架构师可以构建出某种插件式架构，让高层策略性组件与底层实现性组件相分离，底层组件可以被编译成插件，实现独立于高层组件的开发和部署。\n◆ 第6章 函数式编程\n为什么不可变性是软件架构设计需要考虑的重点呢？为什么软件架构师要操心变量的可变性呢？答案显而易见：所有的竞争问题、死锁问题、并发更新问题都是由可变变量导致的。如果变量永远不会被更改，那就不可能产生竞争或者并发更新问题。如果锁状态是不可变的，那就永远不会产生死锁问题。\n◆ 第3部分 设计原则\n：如果软件系统想要更容易被改变，那么其设计就必须允许新增代码来修改系统行为，而非只能靠修改原来的代码。\n◆ 第7章 SRP：单一职责原则\n2023/10/20发表想法 对不同行为者负责的逻辑代码应该分开，就算中间可能存在重复代码\n这个类的三个函数分别对应的是三类非常不同的行为者，违反了SRP设计原则。calculatePay()函数是由财务部门制定的，他们负责向CFO汇报。reportHours()函数是由人力资源部门制定并使用的，他们负责向COO汇报。save()函数是由DBA制定的，他们负责向CTO汇报。\n读者也许会反对上面这些解决方案，因为看上去这里的每个类中都只有一个函数。事实上并非如此，因为无论是计算工资、生成报表还是保存数据都是一个很复杂的过程，每个类都可能包含了许多私有函数。总而言之，上面的每一个类都分别容纳了一组作用于相同作用域的函数，而在该作用域之外，它们各自的私有函数是互相不可见的。\n◆ 第8章 OCP：开闭原则\n一个好的软件架构设计师会努力将旧代码的修改需求量降至最小，甚至为0。\n让我们再来复述一下这里的设计原则：如果A组件不想被B组件上发生的修改所影响，那么就应该让B组件依赖于A组件。\n2023/10/20发表想法 增加，不同的具体实现类，来达到开闭的效果。\n其中，Interactor组件是整个系统中最符合OCP的。发生在Database、Controller、Presenter甚至View上的修改都不会影响到Interactor。\n2023/10/20发表想法 同依赖倒置，非核心业务，依赖业务逻辑，业务不受其他模块影响\n为什么Interactor会被放在这么重要的位置上呢？因为它是该程序的业务逻辑所在之处，Interactor中包含了其最高层次的应用策略。其他组件都只是负责处理周边的辅助逻辑，只有Interactor才是核心组件\n◆ 第9章 LSP：里氏替换原则\n2023/10/20发表想法 不依赖于具体实现\n因为Billing应用程序的行为并不依赖于其使用的任何一个衍生类。也就是说，这两个衍生类的对象都是可以用来替换License类对象的。\n2023/10/20发表想法 正方形的特殊属性，倒置业务理解偏差\n而Square类的高和宽则必须一同修改。由于User类始终认为自己在操作Rectangle类，因此会带来一些混淆\n认为LSP只不过是指导如何使用继承关系的一种方法，然而随着时间的推移，LSP逐渐演变成了一种更广泛的、指导接口与其实现方式的设计原则。\n因为一旦违背了可替换性，该系统架构就不得不为此增添大量复杂的应对机制。\n◆ 第10章 ISP：接口隔离原则\n2023/10/21发表想法 通过接口隔离对其他方案的依赖\n任何层次的软件设计如果依赖了它并不需要的东西，就会带来意料之外的麻烦。\n2023/10/21发表想法 依赖对象某一个方法，该对象的其他方法就是多余的。\n任何层次的软件设计如果依赖了它并不需要的东西，就会带来意料之外的麻烦。\n任何层次的软件设计如果依赖了它并不需要的东西，就会带来意料之外的麻烦。\n◆ 第11章 DIP：依赖反转原则\n，在Java这类静态类型的编程语言中，在使用use、import、include这些语句时应该只引用那些包含接口、抽象类或者其他抽象类型声明的源文件，不应该引用任何具体实现。\n我们每次修改抽象接口的时候，一定也会去修改对应的具体实现。但反过来，当我们修改具体实现时，却很少需要去修改相应的抽象接口。所以我们可以认为接口比实现更稳定。的确，优秀的软件设计师和架构师会花费很大精力来设计接口，以减少未来对其进行改动。毕竟争取在不修改接口的情况下为软件增加新的功能是软件设计的基础常识。\n继承关系是所有一切源代码依赖关系中最强的、最难被修改的，所以我们对继承的使用应该格外小心\n源代码依赖方向永远是控制流方向的反转——这就是DIP被称为依赖反转原则的原因。\n绝大部分系统中都至少存在一个具体实现组件——我们一般称之为main组件，因为它们通常是main函数[插图]所在之处。在图11.1中，main函数应该负责创建ServiceFactoryImpl实例，并将其赋值给类型为ServiceFactory的全局变量，以便让Application类通过这个全局变量来进行相关调用。\n◆ 第13章 组件聚合\n从软件设计和架构设计的角度来看，REP原则就是指组件中的类与模块必须是彼此紧密相关的。也就是说，一个组件不能由一组毫无关联的类和模块组成，它们之间应该有一个共同的主题或者大方向\n2023/10/23发表想法 当重复代码，与单一原则冲突时，优先单一原则。 服用代码的目的也是提高可维护性\n可维护性的重要性要远远高于可复用性\n将由于相同原因而修改，并且需要同时修改的东西放在一起。将由于不同原因而修改，并且不同时修改的东西分开。\n2023/10/23发表想法 CRP 哪些类应分开， Go 模块的设计， 避免无需使用的依赖引起冲突。\n因此，当我们决定要依赖某个组件时，最好是实际需要依赖该组件中的每个类。换句话说，我们希望组件中的所有类是不能拆分的，即不应该出现别人只需要依赖它的某几个类而不需要其他类的情况\nCRP原则实际上是ISP原则的一个普适版。ISP原则是建议我们不要依赖带有不需要的函数的类，而CRP原则则是建议我们不要依赖带有不需要的类的组件。\n◆ 第14章 组件耦合\n影响组件结构的不仅有技术水平和公司内部政治斗争这两个因素\n我们一定都有过这样的经历：当你花了一整天的时间，好不容易搞定了一段代码，第二天上班时却发现这段代码莫名其妙地又不能工作了。这通常是因为有人在你走后修改了你所依赖的某个组件。我给这种情况起了个名字——“一觉醒来综合征”\n2023/10/23发表想法 golang 包的不能循环引用设计， 单向依赖结构\n更重要的是，不管我们从该图中的哪个节点开始，都不能沿着这些代表了依赖关系的边最终走回到起始点。也就是说，这种结构中不存在环，我们称这种结构为有向无环图（Directed Acyclic Graph，简写为DAG）。\n[插图]图14.1：典型的组件结构图\n当我们需要发布整个系统时，可以让整个过程从下至上来进行。具体来说就是，首先对Entities组件进行编译、测试、发布。随后是Database和Interactors这两个组件。再紧随其后的是Presenters、View、Controllers，以及Authorizer四个组件。最后是Main组件。这样一来，整个流程会非常清晰，也很容易。只要我们了解系统各部分之间的依赖关系，构建整套系统就会变得很容易。\n事实上，组件依赖结构图并不是用来描述应用程序功能的，它更像是应用程序在构建性与维护性方面的一张地图。\n2023/10/24发表想法 沉淀，拥抱变化\n通过遵守共同闭包原则(CCP)，我们可以创造出对某些变更敏感，对其他变更不敏感的组件。这其中的一些组件在设计上就已经是考虑了易变性，预期它们会经常发生变更的。任何一个我们预期会经常变更的组件都不应该被一个难于修改的组件所依赖，否则这个多变的组件也将会变得非常难以被修改。\n稳定指的是“很难移动”。所以稳定性应该与变更所需的工作量有关。例如，硬币是不稳定的，因为只需要很小的动作就可以推倒它，而桌子则是非常稳定的，因为将它掀翻需要很大的动作。\n2023/10/24发表想法 抽象组件，接口存在的意义就是为了隔离依赖，如果是一个非常不稳定的接口，那么就需要思考接口存在的意义了\n因为这些抽象组件通常会非常稳定，可以被那些相对不稳定的组件依赖。\n如果一个组件想要成为稳定组件，那么它就应该由接口和抽象类组成，以便将来做扩展。如此，这些既稳定又便于扩展的组件可以被组合成既灵活又不会受到过度限制的架构。\nNc：组件中类的数量。Na：组件中抽象类和接口的数量。A：抽象程度，A=Na÷Nc。A指标的取值范围是从0到1，值为0代表组件中没有任何抽象类，值为1就意味着组件中只有抽象类。\n因为这些组件通常是无限抽象的，但是没有被其他组件依赖，这样的组件往往无法使用\n坐落于主序列线上的组件不会为了追求稳定性而被设计得“太过抽象”，也不会为了避免抽象化而被设计得“太过不稳定”。这样的组件既不会特别难以被修改，又可以实现足够的功能\n大型系统中的组件不可能做到完全抽象，也不可能做到完全稳定。所以我们只要追求让这些组件位于主序列线上，或者贴近这条线即可。\nD指标[插图]：距离D=|A+I-1|，该指标的取值范围是[0,1]。值为0意味着组件是直接位于主序列线上的，值为1则意味着组件在距离主序列最远的位置。\n但是有些组件处于平均值的标准差(Z=1)以外。这些组件值得被重点分析，它们要么过于抽象但依赖不足，要么过于具体而被依赖得太多。\n◆ 第5部分 软件架构\n首先，软件架构师自身需要是程序员，并且必须一直坚持做一线程序员，绝对不要听从那些说应该让软件架构师从代码中解放出来以专心解决高阶问题的伪建议\n2023/10/25发表想法 再重复修改以前代码的时候，才能感受到设计的缺陷\n也许软件架构师生产的代码量不是最多的，但是他们必须不停地承接编程任务。如果不亲身承受因系统设计而带来的麻烦，就体会不到设计不佳所带来的痛苦，接着就会逐渐迷失正确的设计方向\n软件架构设计最高优先级的目标就是保持系统正常工作。\n如果研发团队只受开发进度来驱动的话，他们的架构设计最终一定会倾向于这个方向。\n一个系统的部署成本越高，可用性就越低。因此，实现一键式的轻松部署应该是我们设计软件架构的一个目标。\n开发人员可能会决定采用某种“微服务架构”。这种架构的组件边界清晰，接口稳定，非常利于开发。但当我们实际部署这种系统时，就会发现其微服务的数量已经大到令人望而生畏，而配置这些微服务之间的连接以及启动时间都会成为系统出错的主要来源。如果软件架构师早先就考虑到这些部署问题，可能就会有意地减少微服务的数量，采用进程内部组件与外部服务混合的架构，以及更加集成式的连接管理方式。\n那就是设计良好的系统架构应该可以使开发人员对系统的运行过程一目了然。架构应该起到揭示系统运行过程的作用\n软件有行为价值与架构价值两种价值。这其中的第二种价值又比第一种更重要，因为它正是软件之所以“软”的原因\n我想读者应该明白我的意思了。如果在开发高层策略时有意地让自己摆脱具体细节的纠缠，我们就可以将与具体实现相关的细节决策推迟或延后，因为越到项目的后期，我们就拥有越多的信息来做出合理的决策\n而系统运行人员可以将操作系统的抽象设备与具体的读卡器、磁带读取器以及其他类似的设备进行对接。\n◆ 第16章 独立性\n如果该系统的架构能够在其组件之间做一些适当的隔离，同时不强制规定组件之间的交互方式，该系统就可以随时根据不断变化的运行需求来转换成各种运行时的线程、进程或服务模型。\n2023/10/25发表想法 系统的交互方式，同时反应了团队的沟通方式，代码结构设计，也映射的团队成员的工作沟通方式\n任何一个组织在设计系统时，往往都会复制出一个与该组织内沟通结构相同的系统。一个由多个不同目标的团队协作开发的系统必须具有相应的软件架构。这样，这些团队才可以各自独立地完成工作，不会彼此干扰\n任何一个组织在设计系统时，往往都会复制出一个与该组织内沟通结构相同的系统。一个由多个不同目标的团队协作开发的系统必须具有相应的软件架构。这样，这些团队才可以各自独立地完成工作，不会彼此干扰\n2023/10/25发表想法 例如， API 接口也是理所当然的切割\n添加新订单的用例与删除订单的用例在发生变更的原因上几乎肯定是不同的，而且发生变更的速率也不同。因此，我们按照用例来切分系统是非常自然的选择。\n添加新订单的用例与删除订单的用例在发生变更的原因上几乎肯定是不同的，而且发生变更的速率也不同。因此，我们按照用例来切分系统是非常自然的选择。\n如果不同面向之间的用例得到了良好的隔离，那么需要高吞吐量的用例就和需要低吞吐量的用例互相自然分开了\n们的解耦动作还应该注意选择恰当的模式。譬如，为了在不同的服务器上运行，被隔离的组件不能依赖于某个处理器上的同一个地址空间，它们必须是独立的服务，然后通过某种网络来进行通信。许多架构师将上面这种组件称为“服务”或“微服务”，至于是前者还是后者，往往取决于某些非常模糊的代码行数阈值。对于这种基于服务来构建的架构，架构师们通常称之为面向服务的架构(service-oriented architecture)。\n我只是认为有时候我们必须把组件切割到服务这个应用层次。\n2023/10/25发表想法 区分是否重复，还是应该从代码的责任逻辑上看，对什么负责，什么会引起其变化。不一样的责任应该进行隔离，允许重复\n其中有些是真正的重复，在这种情况下，每个实例上发生的每项变更都必须同时应用到其所有的副本上。重复的情况中也有一些是假的，或者说这种重复只是表面性的。如果有两段看起来重复的代码，它们走的是不同的演进路径，也就是说它们有着不同的变更速率和变更缘由，那么这两段代码就不是真正的重复。等我们几年后再回过头来看，可能就会发现这两段代码是非常不一样的了。\n2023/10/25发表想法 没有隔离，数据库字段透传到前端，前端跟据当前程序业务逻辑，只选取其中部分字段。导致后端数据字段会直接透传影响到前端，查看接口返回时，前端使用的字段和逻辑也没有那么明确，需要前端人员介入确认，高度耦合有可能引发 bug。\n我们可能也会为了避免再创建一个看起来相同的视图模型并在两者之间复制元素，而选择直接将数据库记录传递给UI层。我们也一定要小心，这里几乎肯定只是一种表面性的重复。而且，另外创建一个视图模型并不会花费太多力气，这可以帮助我们保持系统水平分层之间的隔离。\n我们可能也会为了避免再创建一个看起来相同的视图模型并在两者之间复制元素，而选择直接将数据库记录传递给UI层。我们也一定要小心，这里几乎肯定只是一种表面性的重复。而且，另外创建一个视图模型并不会花费太多力气，这可以帮助我们保持系统水平分层之间的隔离。\n服务层次解耦的另一个问题是不仅系统资源成本高昂，而且研发成本更高。处理服务边界不仅非常耗费内存、处理器资源，而且更耗费人力。虽然内存和处理器越来越便宜，但是人力成本可一直都很高\n我会倾向于将系统的解耦推行到某种一旦有需要就可以随时转变为服务的程度即可，让整个程序尽量长时间地保持单体结构，以便给未来留下可选项。\n2023/10/25发表想法 良好代码架构，能够应该快速地支出不同的部署架构切换（从单体到微服务，再从微服务到单体）。说明代码层级的隔离需要做得足够好。\n一个设计良好的架构应该能允许一个系统从单体结构开始，以单一文件的形式部署，然后逐渐成长为一组相互独立的可部署单元，甚至是独立的服务或者微服务。最后还能随着情况的变化，允许系统逐渐回退到单体结构。\n这里的主要观点认为，一个系统所适用的解耦模式可能会随着时间而变化，优秀的架构师应该能预见这一点，并且做出相应的对策。\n◆ 第17章 划分边界\n架构师们所追求的目标是最大限度地降低构建和维护一个系统所需的人力资源。那么我们就需要了解一个系统最消耗人力资源的是什么？答案是系统中存在的耦合——尤其是那些过早做出的、不成熟的决策所导致的耦合\n◆ 第19章 策略与层次\n软件架构设计的工作重点之一就是，将这些策略彼此分离，然后将它们按照变更的方式进行重新分组。其中变更原因、时间和层次相同的策略应该被分到同一个组件中。反之，变更原因、时间和层次不同的策略则应该分属于不同的组件\n架构设计的工作常常需要将组件重排组合成为一个有向无环图。图中的每一个节点代表的是一个拥有相同层次策略的组件，每一条单向链接都代表了一种组件之间的依赖关系，它们将不同级别的组件链接起来\n我们对“层次”是严格按照“输入与输出之间的距离”来定义的。也就是说，一条策略距离系统的输入/输出越远，它所属的层次就越高。而直接管理输入/输出的策略在系统中的层次是最低的。\n2023/11/02发表想法 参考 golang io.ReadWriter 接口设计。 通过 接口隔离依赖。 依赖关系与数据流向脱钩， 考虑更高层次的变更\n我们希望源码中的依赖关系与其数据流向脱钩，而与组件所在的层次挂钩。但我们很容易将这个加密程序写成下面这样，这就构成了一个不正确的架构：function encrypt(){while(true)writeChar（translate（readChar()））；}上面这个程序架构设计的错误在于，它让高层组件中的函数encrypt()依赖于低层组件中的函数readChar()与writeChar()。\n◆ 第20章 业务逻辑\n业务逻辑就是程序中那些真正用于赚钱或省钱的业务逻辑与过程。更严格地讲，无论这些业务逻辑是在计算机上实现的，还是人工执行的，它们在省钱/赚钱上的作用都是一样的。\n关键业务逻辑和关键业务数据是紧密相关的，所以它们很适合被放在同一个对象中处理。我们将这种对象称为“业务实体(Entity)\n当我们创建这样一个类时，其实就是在将软件中具体实现了该关键业务的部分聚合在一起，将其与自动化系统中我们所构建的其他部分隔离区分。这个类独自代表了整个业务逻辑，它与数据库、用户界面、第三方框架等内容无关。该类可以在任何一个系统中提供与其业务逻辑相关的服务，它不会去管这个系统是如何呈现给用户的，数据是如何存储的，或者是以何种方式运行的。总而言之，业务实体这个概念中应该只有业务逻辑，没有别的\n有些读者可能会担心我在这里把业务实体解释成一个类。不是这样的，业务实体不一定非要用面向对象编程语言的类来实现。业务实体这个概念只要求我们将关键业务数据和关键业务逻辑绑定在一个独立的软件模块内。\n用例并不描述系统与用户之间的接口，它只描述该应用在某些特定情景下的业务逻辑，这些业务逻辑所规范的是用户与业务实体之间的交互方式，它与数据流入/流出系统的方式无关\n2023/11/02发表想法 含泪点头\n可能有些读者会选择直接在数据结构中使用对业务实体对象的引用。毕竟，业务实体与请求/响应模型之间有很多相同的数据。但请一定不要这样做！这两个对象存在的意义是非常、非常不一样的。随着时间的推移，这两个对象会以不同的原因、不同的速率发生变更。所以将它们以任何方式整合在一起都是对共同闭包原则(CCP)和单一职责原则(SRP)的违反。这样做的后果，往往会导致代码中出现很多分支判断语句和中间数据。\n◆ 第21章 尖叫的软件架构\n一个良好的架构设计应该围绕着用例来展开，这样的架构设计可以在脱离框架、工具以及使用环境的情况下完整地描述用例。这就好像一个住宅建筑设计的首要目标应该是满足住宅的使用需求，而不是确保一定要用砖来构建这个房子。架构师应该花费很多精力来确保该架构的设计在满足用例需要的情况下，尽可能地允许用户能自由地选择建筑材料（砖头、石料或者木材）。\n我们一定要带着怀疑的态度审视每一个框架。是的，采用框架可能会很有帮助，但采用它们的成本呢？我们一定要懂得权衡如何使用一个框架，如何保护自己\n◆ 第22章 整洁架构\n按照不同关注点对软件进行切割\n源码中的依赖关系必须只指向同心圆的内层，即由低层机制指向高层策略\n外层圆中使用的数据格式也不应该被内层圆中的代码所使用，尤其是当数据格式是由外层圆的框架所生成时。总之，我们不应该让外层圆中发生的任何变更影响到内层圆的代码\n只要它能被系统中的其他不同应用复用就可以\n2023/11/02发表想法 定义如何丰富/获取数据的数据接口， 再由外层对应实现，完成数据的流入\n软件的用例层中通常包含的是特定应用场景下的业务逻辑，这里面封装并实现了整个系统的所有用例。这些用例引导了数据在业务实体之间的流入/流出，并指挥着业务实体利用其中的关键业务逻辑来实现用例的设计目标。\n2023/11/02发表想法 控制填补 usecase 请求参数， 再将返回数据转化为响应\n而模型部分则应该由控制器传递给用例，再由用例传回展示器和视图。\n假设某些用例代码需要调用展示器，这里一定不能直接调用，因为这样做会违反依赖关系原则：内层圆中的代码不能引用其外层的声明。我们需要让业务逻辑代码调用一个内层接口（图22.1中的“用例输出端”），并让展示器来负责实现这个接口\n这里最重要的是这个跨边界传输的对象应该有一个独立、简单的数据结构。总之，不要投机取巧地直接传递业务实体或数据库记录对象。同时，这些传递的数据结构中也不应该存在违反依赖规则的依赖关系。\n很多数据库框架会返回一个便于查询的结果对象，我们称之为“行结构体”。这个结构体不应该跨边界向架构的内层传递。因为这等于让内层的代码引用外层代码，违反依赖规则\n◆ 第23章 展示器和谦卑对象\n视图部分属于难以测试的谦卑对象。这种对象的代码通常应该越简单越好，它只应负责将数据填充到GUI上，而不应该对数据进行任何处理。\n展示器则是可测试的对象。展示器的工作是负责从应用程序中接收数据，然后按视图的需要将这些数据格式化，以便视图将其呈现在屏幕上。例如，如果应用程序需要在屏幕上展示一个日期，那么它传递给展示器的应该是一个Date对象。然后展示器会将该对象格式化成所需的字符串形式，并将其填充到视图模型中\n不过，交互器尽管不属于谦卑对象，却是可测试的，因为数据库网关通常可以被替换成对应的测试桩和测试替身类\n所以通过在系统的边界处运用谦卑对象模式，我们可以大幅地提高整个系统的可测试性\n◆ 第24章 不完全边界\n但这种预防性设计在敏捷社区里是饱受诟病的，因为它显然违背了YAGNI原则（“You Aren\u0026rsquo;t Going to Need It”，意即“不要预测未来的需要”）\n◆ 第26章 Main组件\n2023/11/10发表想法 Main 负责初始化 系统\nMain组件的任务是创建所有的工厂类、策略类以及其他的全局设施，并最终将系统的控制权转交给最高抽象层的代码来处理。Main组件中的依赖关系通常应该由依赖注入框架来注入。在该框架将依赖关系注入到Main组件之后\nMain组件的任务是创建所有的工厂类、策略类以及其他的全局设施，并最终将系统的控制权转交给最高抽象层的代码来处理。Main组件中的依赖关系通常应该由依赖注入框架来注入。在该框架将依赖关系注入到Main组件之后\n当我们将Main组件视为一种插件时，用架构边界将它与系统其他部分隔离开这件事，在系统的配置上是不是就变得更容易了呢？\n◆ 第27章 服务：宏观与微观\n2023/11/10发表想法 高层策略和底层细节之间的架构边界\n，架构设计的任务就是找到高层策略与低层细节之间的架构边界，同时保证这些边界遵守依赖关系规则。所谓的服务本身只是一种比函数调用方式成本稍高的，分割应用程序行为的一种形式，与系统架构无关。\n，架构设计的任务就是找到高层策略与低层细节之间的架构边界，同时保证这些边界遵守依赖关系规则。所谓的服务本身只是一种比函数调用方式成本稍高的，分割应用程序行为的一种形式，与系统架构无关。\n系统架构都是由那些跨越架构边界的关键函数调用来定义的，并且整个架构必须遵守依赖关系规则\n任何形式的共享数据行为都会导致强耦合。\n例如，如果给服务之间传递的数据记录中增加了一个新字段，那么每个需要操作这个字段的服务都必须要做出相应的变更，服务之间必须对这条数据的解读达成一致。因此其实这些服务全部是强耦合于这条数据结构的，因此它们是间接彼此耦合的。\n这就是所谓的横跨型变更(cross-cutting concern)问题，它是所有的软件系统都要面对的问题，无论服务化还是非服务化的\n而言之，服务边界并不能代表系统的架构边界，服务内部的组件边界才是。\n2023/11/10发表想法 正如采用了微服务的框架，不一定是微服务\n虽然服务化可能有助于提升系统的可扩展性和可研发性，但服务本身却并不能代表整个系统的架构设计。系统的架构是由系统内部的架构边界，以及边界之间的依赖关系所定义的，与系统中各组件之间的调用和通信方式无关。\n◆ 第28章 测试边界\n因为其中总是充满了各种细节信息，非常具体，所以它始终都是向内依赖于被测试部分的代码的。事实上，我们可以将测试组件视为系统架构中最外圈的程序。它们始终是向内依赖的，而且系统中没有其他组件依赖于它们。\n◆ 第6部分 实现细节\n从系统架构的角度来看，工具通常是无关紧要的——因为这只是一个底层的实现细节，一种达成目标的手段。一个优秀的架构师是不会让实现细节污染整个系统架构的。\n需要了解数据表结构的代码应该被局限在系统架构的最外圈、最低层的工具函数中。\n◆ 第32章 应用程序框架是实现细节\n请仔细想想这一关系，当我们决定采用一个框架时，就需要完整地阅读框架作者提供的文档。在这个文档中，框架作者和框架其他用户对我们提出进行应用整合的一些建议。一般来说，这些建议就是在要求我们围绕着该框架来设计自己的系统架构。譬如，框架作者会建议我们基于框架中的基类来创建一些派生类，并在业务对象中引入一些框架的工具。框架作者还会不停地催促我们将应用与框架结合得越紧密越好。对框架作者来说，应用程序与自己的框架耦合是没有风险的。毕竟作为作者，他们对框架有绝对的控制权，强耦合是应该的。\n框架可能会要求我们将代码引入到业务对象中——甚至是业务实体中。框架可能会想要我们将框架耦合在最内圈代码中。而我们一旦引入，就再也不会离开该框架了，这就像戴上结婚戒指一样，从此一生不离不弃了\n2023/11/14发表想法 保持警醒\n我们可以使用框架——但要时刻警惕，别被它拖住。我们应该将框架作为架构最外圈的一个实现细节来使用，不要让它们进入内圈。\n我们可以使用框架——但要时刻警惕，别被它拖住。我们应该将框架作为架构最外圈的一个实现细节来使用，不要让它们进入内圈。\n◆ 第34章 拾遗\n2023/11/14发表想法 无法展现具体的业务领域， DDD\n这里还存在另外一个问题是，分层架构无法展现具体的业务领域信息。把两个不同业务领域的、但是都采用了分层架构的代码进行对比，你会发现它们的相似程度极高：都有Web层、服务层和数据仓库层。这是分层架构的另外一个问题，后文会具体讲述。\n2023/11/14发表想法 真实事件，现在的 MVC 架构经常有这种代码\n假设新员工加入了团队，你给新人安排了一个订单相关的业务用例的实现任务。由于这个人刚刚入职，他想好好表现，尽快完成这项功能。粗略看过代码之后，新人发现了OrdersController这个类，于是他将新的订单相关的Web代码都塞了进去。但是这段代码需要从数据库查找一些订单数据。这时候这个新人灵机一动：“代码已经有了一个OrdersRepository接口，只需要将它用依赖注入框架引入控制器就行，我真机智！”几分钟之后，功能已经正常了，但是UML结构图变成了图34.5这样。\n虽然新的业务用例可以正常工作，但是它可能不是按照合理方式实现的\n我遇见的很多团队仅仅通过采用“自律”或者“代码评审”方式来执行，“我相信我的程序员”。有这种自信当然很好，但是我们都知道当预算缩减、工期临近的时候会发生什么事情\n总的来说，这种方式将“业务逻辑”与“持久化代码”合并在一起，称为“组件”\n这一章的中心思想就是，如果不考虑具体实现细节，再好的设计也无法长久。必须要将设计映射到对应的代码结构上，考虑如何组织代码树，以及在编译期和运行期采用哪种解耦合的模式\n","permalink":"https://ynikl.github.io/books/clean-architeature/","summary":"架构设计的核心\n分离控制，和业务逻辑, 分离依赖 学习到的经验\n代码实现设计使用开闭, 单一职责. 业务逻辑不应该依赖, 外部具体细节，需要控制反转. 梳理 UML 图, 合理的描述整个项目代码结构. 如果当前项目重新开始?\n禁止数据结构体的透传(从持久层透传到呈现层) 采用依赖注入，利用编译器，比例go的internal 文件夹，控制不合理的依赖 业务逻辑引用 usecase，采用业务场景分层，放弃 MVC 平铺式写法 禁用通过 SQL 完成业务逻辑, 数据层与业务逻辑解耦，禁止直接复用对象 梳理好项目架构设计图文档，避免新人打乱代码层级（或通过服务设计强制分割依赖 文摘 然而，其中一些程序员发现，只让代码跑起来是不够的，因为这个世界是不断变化的，他们发现自己需要花更多的时间来维护代码：增加新的需求，扩展原有的流程，修改已有的功能，优化性能……一个人完全维护不过来，还需要更多的人，于是代码还需要在不同人之间轮转；他们发现代码除了需要跑起来，还需要易读、易扩展、易维护，甚至可以直接重用。于是，这些人使用各种各样的手段和技术不断提高代码的易读性、可扩展性、可维护性和重用性。我们把这些有“洁癖”、有工匠精精、有修养的程序员叫作工程师，工程师不仅仅是在编写代码，他们会用工程的方法来编写代码，以便让编程开发更为高效和快速。他们把编程当成一种设计，一种工业设计，把代码模块化，让这些模块可以更容易地交互拼装和组织，让代码排列整齐——阅读和维护这些代码就像看阅兵式一样舒心畅快。\n但是有一些资深的工程师开始站出来挑战这些问题，有的基于业务分析给出平衡的方案，有的开始尝试设计更高级的技术，有的开始设计更灵活的系统，有的则开始简化和轻量化整个系统……这些高智商、经验足、不怕难的工程师们引领着整个行业前行。他们就是架构师！\n2023/09/27发表想法 分离控制，和逻辑\n论是三种编程范式还是微服务架构，它们都在解决一个问题——分离控制和逻辑。所谓控制就是对程序流转的与业务逻辑无关的代码或系统的控制（如多线程、异步、服务发现、部署、弹性伸缩等），所谓逻辑则是实实在在的业务逻辑，是解决用户问题的逻辑。控制和逻辑构成了整体的软件复杂度，有效地分离控制和逻辑会让你的系统得到最大的简化。\n◆ 推荐序二 久远的教诲，古老的智慧\n我提了一个很“笨”的办法：把所有“共享变量”都抽到Redis中进行读写，消灭本地副本，然后把稳定版本程序多部署几份，这样就可以多启动几个实例，将这些实例标记为AB两组。同时，在前面搭建代理服务，用于分流请求——核心功能请求分配到A组（程序基本不更新），外围功能请求分配到B组（程序按业务需求更新）。这样做看起来有点多此一举——AB两组都只有部分代码提供服务，而且要通过Redis共享状态，但是却实现了无论B组的程序如何更新，都不会影响A组所承载的核心服务的目的。\n，我看到接口的设计非常随意，接口不是基于行为而是基于特定场景的实现，没有做适当的抽象，也没有为未来预留空间，直接导致契约僵硬死板。每新增一种终端呈现形式，整个内容生产流程就要大动干戈，这样的例子并不罕\n◆ 第1章 设计与架构究竟是什么\n总的来说，架构图里实际上包含了所有的底层设计细节，这些细节信息共同支撑了顶层的架构设计，底层设计信息和顶层架构设计共同组成了整个房屋的架构文档。软件设计也是如此。底层设计细节和高层架构信息是不可分割的。它们组合在一起，共同定义了整个软件系统，缺一不可。所谓的底层和高层本身就是一系列决策组成的连续体，并没有清晰的分界线。\n2023/10/09发表想法 降低发布变更成本\n一个软件架构的优劣，可以用它满足用户需求所需要的成本来衡量。如果该成本很低，并且在系统的整个生命周期内一直都能维持这样的低成本，那么这个系统的设计就是优良的。如果该系统的每次发布都会提升下一次变更的成本，那么这个设计就是不好的。就这么简单。\n一个软件架构的优劣，可以用它满足用户需求所需要的成本来衡量。如果该成本很低，并且在系统的整个生命周期内一直都能维持这样的低成本，那么这个系统的设计就是优良的。如果该系统的每次发布都会提升下一次变更的成本，那么这个设计就是不好的。就这么简单。\n要想跑得快，先要跑得稳。\n◆ 第2章 两个价值维度\n业务部门与研发人员经常犯的共同错误就是将第三优先级的事情提到第一优先级去做。换句话说，他们没有把真正紧急并且重要的功能和紧急但是不重要的功能分开。这个错误导致了重要的事被忽略了，重要的系统架构问题让位给了不重要的系统行为功能。\n◆ 第3章 编程范式总览\n结构化编程对程序控制权的直接转移进行了限制和规范。\n这两个程序员注意到在ALGOL语言中，函数调用堆栈(call stack frame)可以被挪到堆内存区域里，这样函数定义的本地变量就可以在函数返回之后继续存在。这个函数就成为了一个类(class)的构造函数，而它所定义的本地变量就是类的成员变量，构造函数定义的嵌套函数就成为了成员方法(method)。这样一来，我们就可以利用多态(polymorphism)来限制用户对函数指针的使用。\n面向对象编程对程序控制权的间接转移进行了限制和规范。\n函数式编程对程序中的赋值进行了限制和规范。\n◆ 第4章 结构化编程\nDijkstra提出的解决方案是采用数学推导方法。他的想法是借鉴数学中的公理(Postulate)、定理(Theorem)、推论(Corollary)和引理(Lemma)，形成一种欧几里得结构。Dijkstra认为程序员可以像数学家一样对自己的程序进行推理证明。换句话说，程序员可以用代码将一些已证明可用的结构串联起来，只要自行证明这些额外代码是正确的，就可以推导出整个程序的正确性。\nDijkstra在研究过程中发现了一个问题：goto语句的某些用法会导致某个模块无法被递归拆分成更小的、可证明的单元，这会导致无法采用分解法来将大型问题进一步拆分成更小的、可证明的部分。\n既然结构化编程范式可将模块递归降解拆分为可推导的单元，这就意味着模块也可以按功能进行降解拆分。这样一来，我们就可以将一个大型问题拆分为一系列高级函数的组合，而这些高级函数各自又可以继续被拆分为一系列低级函数，如此无限递归。更重要的是，每个被拆分出来的函数也都可以用结构化编程范式来书写\n这就是科学理论和科学定律的特点：它们可以被证伪，但是没有办法被证明。\nDijkstra曾经说过“测试只能展示Bug的存在，并不能证明不存在Bug”，换句话说，一段程序可以由一个测试来证明其错误性，但是却不能被证明是正确的。测试的作用是让我们得出某段程序已经足够实现当前目标这一结论。\n结构化编程范式中最有价值的地方就是，它赋予了我们创造可证伪程序单元的能力。\n◆ 第5章 面向对象编程","title":"架构整洁之道"},{"content":"《知行合一王阳明》 度阴山 26个笔记\n◆ 点评 2023/10/25 认为一般 当成简单的传记看看了，后半篇的思想深度不是很够\n◆ 第1章 序章 心学诞生的前夜\n1513年，日本人了庵桂梧把心学带回日本，300多年后，日本人在王阳明心学影响下发动了举世皆惊的“明治维新”，摇身一变而成为世界强国。\n：“圣人的心是面明镜，物来则照，物不来也不去强求。尧舜没有制作礼乐，只是因为他们那个时代还不需要，没有这件事来找他们。周公制作礼乐，只是因为礼乐这件事刻不容缓，来找周公了。”用今天的话来说，就是时势造英雄\n◆ 心学诞生的前夜\n。而“天理”的敌人则是“人欲”（不合理、不正当的行为和欲望）\n无论是程朱理学还是陆九渊心学，目的都是为了存天理去人欲。为什么要存天理去人欲呢？另一位理学大师张载给出了答案：为天地立心（为社会重建精神价值），为生民立命（为民众确立生命意义），为往圣继绝学（为前圣继承已绝之学统），为万世开太平（为万世开拓太平之基业）\n◆ 两件荒唐事：新郎失踪和格竹子\n养生之诀，无过一静。老子清静，庄子逍遥\n◆ 彷徨和痛苦是天才的共性\n虔诚的坚持唯一志向，是读书之本；循序渐进，是读书的方法（‘居敬持志，为读书之本；循序致精，为读书之法’）。”\n2023/10/19发表想法 m\n居敬持志，为读书之本；循序致精，为读书之法\n◆ 有一种无趣叫仕途\n1500年之前，王阳明成长在阳光下。1500年那个夏天，当他进入刑部大牢时，他才知道什么是真正的黑暗。与此相比，他精神上追逐未果的痛苦实在不值一提。当他被眼前的刑部大牢所震骇，无法移动脚步时，他的属下告诉他：“这根本不算什么，您还没有去过锦衣卫大牢，与锦衣卫大牢相比，这里简直就是安乐窝。”王阳明如同被一种看不见的恐惧所捕获，他知道自己无法改变这些人的命运，正如他在多年的圣学探索中找不到出路一样。他唯一能做的事就是按自己良心，能做一件是一件。\n◆ 未经审视的人生不值得过\n因为“不可则止”听上去很潇洒，对于有着强烈责任感的人而言，却是痛苦的。\n◆ 做自己的主人\n其实人人所谓的怕死，怕的并不是死，而是对生有所眷恋而已\n后来，他通过长时间的默想，突然发现，圣人是没有办法改变外部环境的，他们只是适应环境。正如他自己，刚来时面对这样恶劣的环境，想死的心都有。可现在，他不还是好好地活着？那么，让他活下来的精神支柱是什么呢？无非就是努力适应了外部环境。\n◆ 新朋友和新敌人\n而是质疑另一个问题：“您也提倡静坐，和陆九渊的静坐有什么区别吗？”王阳明说：“陆九渊静坐是希望从心中得到真理。而我提倡静坐，是因为现在的人心浮气躁，静坐能让他们把心沉静下来，我并没有让人一味静坐去获取真理，那不是正路。”席书问：“那您从哪里获得真理？”王阳明回答：“真理就在我心中，但必须去事上练，只有去实践了，你才能更深刻地体会这一真理。而且，这两者是不可分的，正如知行合一一样\n◆ 朱陆异同\n你们是在分胜败，并非是在明理。你二人各执一端，无论是对朱熹还是对陆九渊都没有全面领会，所以就是争论出个胜败来，也毫无意义\n王阳明极力指责佛教：“佛教徒担心父子连累他，就离开父子；担心君臣连累他，就离开君臣；担心夫妻连累他，就离开夫妻。佛教徒总说自己不执着于‘相’，其实这些都是执着于君臣、父子、夫妻的‘相’\n◆ 横扫詹师富\n庸人一挫就馁，才胜便骄\n◆ 金龙霸王池仲容\n他们当然怕，但他们好像摸透了中国老百姓的性格。中国老百姓不被逼上绝路是不会去反抗的，把他们逼到“革命”的大路上，需要很长很长的时间。\n◆ 费心为哪般\n这是王阳明心学的一个独到之处：说服对方的成功率，在于见什么人说什么话的能力\n◆ 只俯首于自己的心\n波士顿犹太人屠杀纪念碑上有这一段话，一针见血地说明了不能致良知的恶果：“他们来抓犹太人，我没有说话，因为我不是犹太人；他们接着来抓工会会员，我没有说话，因为我不是工会会员；他们再来抓天主教徒，我没有说话，因为我是新教教徒；他们最后来抓我，这时已经没有人替我说话了。\n◆ 去心中贼之私情\n但《孝经》上说：‘不能过分悲伤而失去本性’，‘本性’就是天理。”\n王阳明接着说，其实在伤痛的情绪上掌握好一个度，无非是要你在这上面不要太认真，用书面语来讲就是“不执”。\n有一种论调说，愤怒，就是拿别人的错误来惩罚自己\n◆ 去心中贼之私欲\n人可以没有名利之心，但不可能没有生存的欲望，蝼蚁尚且惜命。所以谁能真的看淡生死，谁就真的成为圣人\n◆ 如何对付恶\n在王阳明看来，和恶人打交道只要记得一条：试图改变他的恶性，往往会适得其反。所以，尽量不要揭发他的恶性\n◆ 获得幸福的方法：不要和外物对立\n而我们心学说‘无善无恶’，是不要刻意为善，更不可刻意为恶。”\n◆ 第7章 知行合一的修炼法门\n2023/10/25发表想法 重点\n如果把一只烤鸭端到朱熹和王阳明面前，二人的反应会截然不同。 朱熹会认真地盯着烤鸭看一会儿，当他看了许久后也搞不懂鸭子是如何成为烤鸭后，他会叫来烤鸭师向他请教。他请教的问题很多，比如几岁的鸭子最适合烤、烤鸭子之前有什么仪式、都放哪些调料、烤多久，等等。不过如你所知，饮食业特色菜的秘方是不外传的，所以朱熹从烤鸭师那里得不到什么有价值的信息。于是，他连香喷喷的鸭子也不吃了，转身去了书店，买了几十本关于烤鸭的书籍，回家日夜苦读。最终，他可能学会了烤鸭，也可能没有学会。 如果他学会了制作烤鸭，就会把烤鸭的制作流程当成知识传授给后人。当然，最重要的是，他会从鸭子成为烤鸭中得出一个天理来。这个天理可能是：活生生的鸭子一点都不好吃，但经过专业的烘烤后，就成了美味。所以，人生在世都应该记住这样一个天理：不经历风雨，怎能见彩虹。 我们上面论述的整个过程就是朱熹的“格物致知”。“格”是探究的意思，“物”是万事万物，包括意识的和物质的，在烤鸭的例子中，则是烤鸭。 “致”是求得、获得的意思，“知”是知识，用烤鸭这个例子来解释朱熹的“格物致知”就是，朱熹用两种探究方法（一是实践，问烤鸭师；二是书本，买《烤鸭大全集》）来探究烤鸭，最后获得了烤鸭的知识。注意，这还不算完，这个“知识”不仅是常识，它还必须上升到天理层次。正如我们刚刚说的，朱熹通过探究烤鸭的知识，从而得出一个人生哲理。 当王阳明面对那盘烤鸭时，他可能会有两个反应。第一，他抄起筷子就吃；第二，他会在朱熹走后，看着鸭子说，请你不要见怪，如果你是活的，我是绝对不会吃的。但你现在是死的，而且你的命运就是被人扔到烤炉里烤，最后端到饭桌上被人吃掉的。所以，我吃你是心安理得的。至于你是怎么被烤出来的，我不想知道，我又不是烤鸭师，干吗要知道这些，我只需要知道吃你没有错就是了。这段话就是王阳明的“格物致知”。“格”是正的意思，物就是事，是意之所在。换个通俗的说法就是，我们意识到一件事时，就要存一种好的想法，用当时的理学大师湛若水的说法就是：格物就是正念头。如果念头不好，马上改掉，念头好，就要维持。 王阳明意识到吃鸭子这件事时，只是说鸭子被我吃，是天经地义，是天理。所以他继续保持这种意识，进而“致知”。“致”是停止、实现的意思，“知”则是良知。\n","permalink":"https://ynikl.github.io/books/knowledge-with-action-wangyangming/","summary":"《知行合一王阳明》 度阴山 26个笔记\n◆ 点评 2023/10/25 认为一般 当成简单的传记看看了，后半篇的思想深度不是很够\n◆ 第1章 序章 心学诞生的前夜\n1513年，日本人了庵桂梧把心学带回日本，300多年后，日本人在王阳明心学影响下发动了举世皆惊的“明治维新”，摇身一变而成为世界强国。\n：“圣人的心是面明镜，物来则照，物不来也不去强求。尧舜没有制作礼乐，只是因为他们那个时代还不需要，没有这件事来找他们。周公制作礼乐，只是因为礼乐这件事刻不容缓，来找周公了。”用今天的话来说，就是时势造英雄\n◆ 心学诞生的前夜\n。而“天理”的敌人则是“人欲”（不合理、不正当的行为和欲望）\n无论是程朱理学还是陆九渊心学，目的都是为了存天理去人欲。为什么要存天理去人欲呢？另一位理学大师张载给出了答案：为天地立心（为社会重建精神价值），为生民立命（为民众确立生命意义），为往圣继绝学（为前圣继承已绝之学统），为万世开太平（为万世开拓太平之基业）\n◆ 两件荒唐事：新郎失踪和格竹子\n养生之诀，无过一静。老子清静，庄子逍遥\n◆ 彷徨和痛苦是天才的共性\n虔诚的坚持唯一志向，是读书之本；循序渐进，是读书的方法（‘居敬持志，为读书之本；循序致精，为读书之法’）。”\n2023/10/19发表想法 m\n居敬持志，为读书之本；循序致精，为读书之法\n◆ 有一种无趣叫仕途\n1500年之前，王阳明成长在阳光下。1500年那个夏天，当他进入刑部大牢时，他才知道什么是真正的黑暗。与此相比，他精神上追逐未果的痛苦实在不值一提。当他被眼前的刑部大牢所震骇，无法移动脚步时，他的属下告诉他：“这根本不算什么，您还没有去过锦衣卫大牢，与锦衣卫大牢相比，这里简直就是安乐窝。”王阳明如同被一种看不见的恐惧所捕获，他知道自己无法改变这些人的命运，正如他在多年的圣学探索中找不到出路一样。他唯一能做的事就是按自己良心，能做一件是一件。\n◆ 未经审视的人生不值得过\n因为“不可则止”听上去很潇洒，对于有着强烈责任感的人而言，却是痛苦的。\n◆ 做自己的主人\n其实人人所谓的怕死，怕的并不是死，而是对生有所眷恋而已\n后来，他通过长时间的默想，突然发现，圣人是没有办法改变外部环境的，他们只是适应环境。正如他自己，刚来时面对这样恶劣的环境，想死的心都有。可现在，他不还是好好地活着？那么，让他活下来的精神支柱是什么呢？无非就是努力适应了外部环境。\n◆ 新朋友和新敌人\n而是质疑另一个问题：“您也提倡静坐，和陆九渊的静坐有什么区别吗？”王阳明说：“陆九渊静坐是希望从心中得到真理。而我提倡静坐，是因为现在的人心浮气躁，静坐能让他们把心沉静下来，我并没有让人一味静坐去获取真理，那不是正路。”席书问：“那您从哪里获得真理？”王阳明回答：“真理就在我心中，但必须去事上练，只有去实践了，你才能更深刻地体会这一真理。而且，这两者是不可分的，正如知行合一一样\n◆ 朱陆异同\n你们是在分胜败，并非是在明理。你二人各执一端，无论是对朱熹还是对陆九渊都没有全面领会，所以就是争论出个胜败来，也毫无意义\n王阳明极力指责佛教：“佛教徒担心父子连累他，就离开父子；担心君臣连累他，就离开君臣；担心夫妻连累他，就离开夫妻。佛教徒总说自己不执着于‘相’，其实这些都是执着于君臣、父子、夫妻的‘相’\n◆ 横扫詹师富\n庸人一挫就馁，才胜便骄\n◆ 金龙霸王池仲容\n他们当然怕，但他们好像摸透了中国老百姓的性格。中国老百姓不被逼上绝路是不会去反抗的，把他们逼到“革命”的大路上，需要很长很长的时间。\n◆ 费心为哪般\n这是王阳明心学的一个独到之处：说服对方的成功率，在于见什么人说什么话的能力\n◆ 只俯首于自己的心\n波士顿犹太人屠杀纪念碑上有这一段话，一针见血地说明了不能致良知的恶果：“他们来抓犹太人，我没有说话，因为我不是犹太人；他们接着来抓工会会员，我没有说话，因为我不是工会会员；他们再来抓天主教徒，我没有说话，因为我是新教教徒；他们最后来抓我，这时已经没有人替我说话了。\n◆ 去心中贼之私情\n但《孝经》上说：‘不能过分悲伤而失去本性’，‘本性’就是天理。”\n王阳明接着说，其实在伤痛的情绪上掌握好一个度，无非是要你在这上面不要太认真，用书面语来讲就是“不执”。\n有一种论调说，愤怒，就是拿别人的错误来惩罚自己\n◆ 去心中贼之私欲\n人可以没有名利之心，但不可能没有生存的欲望，蝼蚁尚且惜命。所以谁能真的看淡生死，谁就真的成为圣人\n◆ 如何对付恶\n在王阳明看来，和恶人打交道只要记得一条：试图改变他的恶性，往往会适得其反。所以，尽量不要揭发他的恶性\n◆ 获得幸福的方法：不要和外物对立\n而我们心学说‘无善无恶’，是不要刻意为善，更不可刻意为恶。”","title":"知行合一王阳明"},{"content":"个人总结 点评 2023/10/29 认为好看 对于完全没有想过基础知识的小白非常友好，知行合一，还有很多有用的想过知识点\n书摘 ◆ 第一章 从零开始财务自由\n我个人比较喜欢康德（Immanuel Kant）对于自由的解读：自由不是你想干什么就干什么，而是你不想干什么就不干什么。\n对于大部分工薪族而言，财务自由的定义很简单，就是能够安心辞去当前的工作而不用担心生计，被动收入能够维持当前的生活水平，这就是自由，对不喜欢的工作和生活有说不的自由。\n◆ 用工资理财实现财务自由可行吗\n影响财务自由的因素其实就三个：本金、收益率、开支\n◆ 40岁以前退休\n整个财务自由计划可以概括为：开源、节流、加固，分别对应着积累本金、投资和保险。\n2023/10/26发表想法 保险，小概率守住资产累积\n有资产还要守得住，要能抵御天灾人祸，小概率事件虽然极少发生，但是一旦发生往往后果比较严重。明明已经实现财务自由，却由于一些意外“一夜回到解放前”，这样的情况没有人愿意看到，所以保险是理财中不可或缺的一环。\n工作是我们生活的一部分，财务自由并不是让我们从此脱离社会不再工作，而是给我们一个重新思考的机会，让我们有底气追求自己想要的生活。\n阿德勒心理学有一个相关解释，获得贡献感是幸福的核心之一\n◆ 制订一份属于自己的财务自由计划\n实现财务自由靠的是本金和收益率，因为被动收入=本金×收益率。\n在我看来计划最大的价值并不仅仅是执行，而在于帮你准确地梳理目标和行动的关系，帮你检查自己当前的行动是否匹配或者偏离了既定目标，以及量化自己和目标之间的距离。\n——实现F.I.R.E后我想过上什么样的生活？进而回答下面几个问题：•这样的生活需要多少被动收入？•需要积累多少本金？•计划用多长的时间来实现？\n当前的工作收入在相当程度上决定了财务自由以后的收入水平，投资理财本质上就是一个将职业价值和人力价值持续变现的过程。\n不同买家的报价差别会非常大。多尝试可以尽可能保证自己得到一个公允的定价。\n，但是一个可以肯定的事实是，形成投资意识可以帮助强化储蓄习惯。\n曾经有人问过查理·芒格（Charlie Thomas Munger）:“你觉得一个成功投资者的必备条件是什么？”芒格答：“理性。”就这两个字\n◆ 没钱是开始理财的最佳时机\n储蓄算得上普通人积累财富最有效的方式。不可能每个人都去创业增收，也不可能每个人都被老板重用提拔，但是储蓄是人人都能做到的\n花一半，存一半克制消费、增加储蓄并不总是等同于降低生活质量。《小狗钱钱》[插图]一书中给过一条很好的建议：每当面对收入增长时，总是用一半来消费、改善生活，另一半则用来增加储蓄。\n当面对各种现实问题时，我们总是倾向于把自己的主观问题变成客观条件的限制\n。年轻人交的养老保险，付给现在的老年人；等现在的年轻人老了，再由新的年轻人来供给养老金。但是问题来了，年轻人越来越少，而且这个过程目前来看基本不可逆。年轻人不够了，养老金自然也就不够了。\n◆ 如何让家人接受记账理财\n不管做什么事情，我们总会遵循“劳动换取回报”的逻辑。如果双方都没有做过，就意味着实际回报并不明确，因此我们对付出劳动就会非常排斥，因为获得的回报不清楚，需要付出的劳动却是实打实的。\n◆ 投资“武器库”\n投资产品大体可以分为四大类：•债券。•股票。•抗通货膨胀资产。•现金。\n债券，最大的特点就是约定利息、约定期限，到期还本付息\n抗通货膨胀资产包括房地产、抗通货膨胀债券和各种大宗商品，比如原油等工业原料。避险资产——黄金也可以被划分到这个范畴中。现金，从投资角度理解的现金包括货币市场基金和超短债等流动性很强的资产，最大特点是虽然回报率低，但是极稳健，随用随取。\n•货币基金，全称货币市场基金，投资现金，比如余额宝这类“宝宝类”产品。收益率最低，一般在2%~3%，但是波动也最低，基本不存在亏钱的可能性。•债券基金，投资债券。收益略高于货币基金，预期年化收益率为6%左右，短时间内存在亏损的可能性，但是持有半年以上基本不会亏钱。•股票基金，投资股票，预期收益最高，预期年化收益率可以达到10%，但是波动风险也很大，需要投资者对市场有一定的了解和把握。有亏损的风险，但是可以用一定的策略规避。•其他基金，比如投资原油、黄金，也有投资房产的房地产信托基金（REITs）。\n◆ 规划投资资金的四个步骤\n这几笔钱，紧急备用金、稳健投资和长期投资的资金建议分别安排到不同的账户，进行物理隔离，以做到相互独立，这对于后期的维护和回顾很有帮助\n•紧急备用金→活期储蓄、货币基金（现金）。•稳健投资→理财产品、债券基金（债券）。•长期投资→各类基金，涵盖债券、股票、抗通货膨胀资产、现金\n◆ 10%的投资收益率很难实现吗\n投资的一个基本逻辑——保本保收益和高收益很难两全，\n我们要学会放权，让专业的人做专业的事。作为工薪族，我们最擅长的其实是我们的本职工作，完全不需要舍本逐末。\n◆ 定投：投资、储蓄一步搞定\n。虽然牛市开始定投，不存在浮亏，账面上是一直盈利的，但是缺点在于，时间不够长，积累仓位不够，虽然收益率不错，但是实际收益金额并不高\n，先把最终结论给大家：每月定投和每周定投最终收益的差别是微乎其微的，基本可以忽略。定投是一个长期活动，一般会持续几年，因此不管是从逻辑还是最终统计数据的角度，每周定投还是每月定投都构不成收益的差别。\n•均线回归策略：对比当前价格与过去一段时间的平均价格来确定定投金额。•价值平均策略：根据过去的本金损益和涨跌来确定定投金额。•指数估值策略：根据当前市场的估值水平来确定定投金额。\n当前价格总是围绕着过去N天的平均价格波动，当价格低于均线的时候多买一点儿，当价格高于均线的时候少买一点儿，实现“低买高卖\n指数估值策略的操作逻辑如下：•低位定投：寻找那些低估的指数基金定投，越低估投入越多。•正常持有：当指数恢复正常估值后，停止投入，继续持有当前份额。•高位止盈：等到牛市到来、指数高估时，再分批卖出止盈。\n关于定投，我常常会收到类似这样的提问，“如果执行定投的时候，遇到了大涨大跌，要不要干预？”这里统一回答，“该干吗就干吗。”当初的计划是什么样呢？该定额就定额，该加仓就加仓，该止盈就止盈，不要主观判断，但凡主观判断难逃“十赌九输”的结局。\n但是如果我们看另一面，虽然晚开始定投，实现了盈利，但是因为时间短、账户积累少，绝对收益其实并不高。而比较早定投的朋友，如果只看最近几个月的表现，账户的绝对收益实际是更高的。如果市场开始进入牛市一飞冲天，必然是越早定投最终获利越多。盈亏总是同源的。你现在吃的亏，都是给未来攒下的家底。\n我们有必要在牛市末期及时止盈保住利润，等到熊市到来再重新投入资金。\n当初考驾照的时候，教练常说一句话，“方向盘要快打快回，慢打慢回”。\n我建议遵循“不满仓、不空仓”的原则，不管市场行情多好也不要All-In（全部投入），不管行情多差也不要完全离场。\n最糟糕也是最危险的时候是，原来不赞同你投资的朋友开始给你推荐股票和基金了，别想了，准备退出吧。\n◆ 走向资产配置\n假如我每月定投1 000元，开始定投的第一个月下跌10%，但是等到第二个月定投再投入1 000元，浮亏就从10%被摊薄到5%。基于这种时间上的分散，本金比较少时，定投的现金流可以降低账户的波动。但是假如已经定投10个月，账户里面已经积累了10 000元，这时账户下跌10%。即使新的一个月再定投1 000元，浮亏也只能从10%被摊薄到9%，分散效果大大减弱。定投的目标是在本金较少的情况下，同时实现本金积累和本金增值。资产配置则是在已有初始本金的前提下，追求本金的增值。随着人生发展和本金积累，从定投逐渐转向资产配置几乎是必然的\n所谓资产配置，其实就是把本金按照一定比例投资于各种大类资产并保持再平衡的过程。\n资产配置的核心是什么？资产配置包含各种大类资产的百分比和再平衡两个要素。提到资产配置，大家第一个想到的可能是不同资产的百分比，自己应该每样投资多少。但是资产配置的真正核心其实是再平衡，而不是百分比。正是因为再平衡的存在，才使降低风险的同时提高收益成为可能。\n泡沫总要破灭，估值洼地总要被填平。\n而且50-50策略与紧急备用金搭配可以大幅提高资金利用率，从而改善整体收益。\n永久组合同样是每年再平衡一次，不过引入了一条新规则，只有当一类资产的占比从25%向上或者向下偏离10个百分点，即高于35%或者低于15%的时候才进行再平衡\n1~2年的投资，应以债券和货币基金为主，不建议考虑股票资产\n而如果像定投一样分几个月逐步买入资产，就可以把这种不确定的波动风险分散化。\n◆ 作为工薪族要学会躺着赚钱\n重点其实是选人\n如果没有管理人的存在，那么主动基金和跟投与指数基金也就没有区别了，不如选择费用更加低廉的指数基金。\n建议考察基金成立至今完整的净值走势（5年以上，不建议选择不足5年的），并重点检查：•在穿越牛熊市的过程中，跑赢大盘，实现正收益。•在下跌行情中表现稳健，下跌幅度远小于大盘。\n基金行业有一个常见规律——难有常胜将军，也被称为“冠军魔咒”\n如果“无脑”选择前5年排名前十的基金长期持有，收益反而会大幅度跑输大盘。很多时候过往几年排名靠前的基金都有诸多运气因素，而这些因素是难以持续的。\n正确理解管理人所执行策略的逻辑\n很多时候投资者本身的影响甚至更大，如果投资者选择管理人时没有先深入思考自己的需求，再根据自己的需求选择适合跟投的人，就容易产生跟投策略和自己的需求（风险偏好）不符合的情况。如果我们没有深入思考跟投策略的风格，也很容易出现最终没能坚持跟投的情况。\n但是根本上来讲，投资亏损无外乎三个因素：•管理人能力不足。•市场整体行情不好。•投资策略与市场风格不符。\n◆ 用投资创造“睡后收入”\n前文我们介绍了投资的四个步骤，按照配置顺序依次是：•规划紧急备用金。•规划必要的保险。•安置3~5年要用的钱（稳健投资）。•建立长期投资组合\n你应该已经找到了上面这个思维游戏的重点——投资增值以外，我们还需要创造稳定的现金流，而对长期投资而言，实现稳定现金流的最佳途径就是基于股息的现金分红。\n财务自由以后，我们的主要投资目的就变成了获得收入而不是增值\n◆ 概率思维对投资的帮助\n成功率≈单次成功率×尝试次数\n而概率思维的核心则在于，我们努力的方向不仅仅在于提升单次成功率，更在于增加尝试次数，进而增加成功的可能性。\n把这个思路用到投资理财上，就是多学习投资相关知识（提高单次成功率）和坚持长期投资（增加尝试次数）\n每到市场行情低迷的时候，总有人留言说：“既然现在行情不好，能不能先不投资，等行情好了再投资？”我的答案是“不行”。等所谓行情好了的时候，“闪电”早已过去，而你就只能错过，追高也不是，等回调又怕踏空。\n理性决策、理性判断，本质上就是认可决策质量重于结果质量，注重决策本身，而不是某一次的结果。\n大多数时候我们纠结的不应该是买不买、卖不卖，而应该是仓位的多少，即买多少、卖多少。\n决策是基于结果质量还是决策质量？根据历史收益选基金、买彩票就是典型的看重结果质量。而决策质量则是注重提升每个决策本身的成功率，而不是根据已经确定的结果来评价决策的好坏。\n◆ 几款常用的基金App推荐\n只保留了四款常用的基金App——蚂蚁财富、且慢、天天基金和蛋卷基金\n◆ 普通投资者到底适不适合炒股\n从理性投资的角度来说，工薪族是不适合自己炒股的，不管是从能力、精力还是时间方面。股市“七亏二平一赚”的经验公式就是从散户中来的，最终能从炒股中赚到钱的投资者连10%都不到。\n对于这类卫星账户，我有两个建议：•严格限制仓位，“卫星账户”资产占总资产的比重控制在10%以内。•账户隔离，开一个账户专门炒股，一是为安全，二是方便分析，来看自己的主动操作到底有没有跑赢基金定投。\n◆ 小结\n本金越多投资回报就越多，尝到了投资的甜头，你有没有觉得对储蓄没有以前那么排斥了？对于懂投资的人来说，省钱其实就是赚钱，储蓄越多本金越多，本金越多收益越多，这个循环会推动我们不断向前。\n◆ 第三章 如何实现理性消费、高效储蓄\n理性的财务自由目标应该是希望用财富解决自己的某些现实问题，比如为赚钱而陪家人的时间太少，为赚取基本生活费用没有时间精力做自己热爱但不一定能赚钱的事业。追求财务自由不应该仅仅为了满足自己的物欲，而且如果以满足物欲建立的目标往往是不可能完美达成的，因为现实问题可以被解决，但是欲望是无止境的。\n而且如果没有经过一个财富的积累过程，能够守住这样突如其来财富的人更是极少数的。\n◆ 享受生活、高效储蓄两不误\n我们常常先入为主地认为，储蓄=少花钱=省吃俭用=降低生活质量\n如同工作上有效率的差别，消费也同样存在效率的差别。花1 000元买许多卫生纸备用还是买一个期待已久的商品，在消费体验上有巨大的区别，虽然我们消费的金额是一样的。\n实际上每一笔消费，就是一个待办事项，我们追求的都是把有限资源的效益最大化\n2023/10/28发表想法 醍醐灌顶\n在提升消费效率之前，我们需要想清楚一个问题：我们到底在提升什么效率？表面上看，我们追求的是消费，但是本质上，我们追求的是消费带来的幸福感和满足感\n因此，我们要提升的重点就是“消费→幸福感\n将收纳整理作为储蓄的开端收纳整理之所以有意义是因为我们家里大概率都堆着很多并不再需要的东西，而收纳整理释放出了这些空间\n列一张无效消费清单可以考虑列一张无效消费清单，写上买了什么、花了多少钱、用了几次，然后把这张清单贴在墙上。我自己回头想想，最近的一次无效消费是几年前花了2 300元买了一个几乎没用过的眼镜框。这个眼镜框我一直留在抽屉里，以示警醒。\n◆ 规划预算，从月光族到储蓄率超过60%\n•全覆盖。我们的每一笔开销都应该被放到预算中，如果有预算监控不到的位置，基本等于没有预算。\n•无重叠。出于不同的目的，我们可能会设置不同的预算分类，比如餐饮预算、消费预算，不同分类之间尽量没有重叠部分，以便提高统计效率和确保参考价值\n•考虑意外。预算超支和出现意外大笔开支都是正常现象\n•长线思维。每月预算的本质是年度开支/12，甚至是5年开支/60，而不是简单的每月开支。因为很多开支是按年重复的，比如保险费、学费、旅行费，若只看每月开支，我们很容易受到局限。\n2023/10/28发表想法 需要考虑每月非重复花销\n如果我们只说“预算”两个字，很多人想到的是每个月的日常开支，如这个月吃饭花了多少钱、坐车花了多少钱等。而当我们把过多的注意力集中在日常开支时，就非常容易忽视那些没有每月重复的开支，比如旅行费用、保险费用、培训费用、送礼费用等，而这些开支往往要在我们每年总开支中占一半的比例。根据我的不完全观察，规划预算时没有考虑这些大笔非规律开支，是最后预算失败的最大原因\n以年度规划预算，把每一笔开支都规划到年度预算中，是会预算与不会预算的分水岭。\n如果是个人记账，分三类基本足够——餐饮日常、居家日常和购物消费。同时要注意之前的两个原则——全覆盖、无重叠。•餐饮日常，对应食品、日常用品等开支，我把能在超市里直接买到的东西归到这一类。•居家日常，对应房租、水电费和其他生活必需开支，也包括保险、办事费用等。•购物消费，对应购物开支，如果你不知道一笔开支应该记在哪里，也可以放在购物消费中。\n家庭预算与个人预算稍有区别，我建议可以这样划分：•共同餐饮日常。•共同居家日常。•男方开支（购物消费）。•女方开支（购物消费）。\n◆ 愿望清单：一个帮我们实现理性消费、提高幸福感的利器\n那么愿望清单就是从根本上促进我们对消费的理解、提升消费质量，让我们自愿放弃很多无效消费\n而愿望正相反，越是发自内心的愿望，我们越愿意为此放弃那些无足轻重的小愿望，这是愿望清单的“基因”优势。而正是这个区别，使愿望清单提升消费质量成为可能。\n使用愿望清单的方法可以用一句话概括：在想到一个消费需求后，别急着下单，先把这个消费需求放到愿望清单中，同时回顾一下清单中的其他内容，再做下一步的消费打算\n首先，我们要把所有的消费需求都收集到愿望清单之中。当我们想要某件东西的时候，不要急着下单，先放入愿望清单中，然后进行整理，排列优先级，也相当于对愿望清单的一次维护。\n果发现新放入的消费需求被自己放在了较低的优先级，就有必要重新审视这笔消费的意义，它很可能是一个伪需求。根据我自己的经验，放进愿望清单里的项目，一半以上都会被放弃。另外，决定放弃的消费也不要从清单中删除，而是做个标记，放在后面整理起来，久而久之就会形成一个很好的统计，帮助了解自己的真实需求是什么。\n总体来说，愿望清单有两个核心原则：•想要消费，先放入愿望清单。•优先实现最高优先级的愿望。\n这里借用一个近藤麻理惠的收纳整理原则——怦然心动。很多时候，根本不需要我们列数字、全面对比，只要把两个东西的名字放在一起，你就知道自己更想要哪个。如果一个东西加入清单之后三天、一周、一个月，你都觉得怦然心动，那就别想别的了，肯定是最高优先级的。\n•经典款、大众款优先，不当小白鼠\n假如你纠结是否买一个东西只是因为它“贵”，那就把它放在高优先级；如果你想买一个东西只是因为它“便宜”，那就把它从清单中剔除。\n我认为愿望清单最大的意义是把愿望统一呈现在我们面前，并以此避免其他无效消费对重要愿望的资源挤占。清单内容的提醒，实际上是强化了我们对于自己愿望的理解\n2023/10/28发表想法 购物清单，与待办事项异曲同工，忌讳想到就立马\n想要什么立刻就做，是低效人士的特征之一。这个效率思维对于提高消费效率同样非常重要。 想到什么立刻就买，是消费低效的原因。如果消费没有策略，想要什么东西立刻下单，就会常常遇到想买真正需要的东西时却没有钱的情况。\n想要什么立刻就做，是低效人士的特征之一。这个效率思维对于提高消费效率同样非常重要。\n我认为愿望清单主要有三个好处：信息收集；信息沉淀；项目择优。\n关于消费有一句很经典的话，“假如3天后你还是想要，那再考虑买”，这就是信息沉淀的意义。\n除了给自己的愿望清单，还有两张愿望清单值得考虑：•全家的愿望清单，通过共同预算来实现，大家一起努力。•礼物清单，平时多留意、多收集，用到的时候心不慌。\n◆ 生活中的幸福感到底来自哪类消费\n80%的幸福感其实来自20%的消费。\n其实我们每个人都有能力找到20%的核心消费，如果把所有的消费需求放在一张愿望清单之内，每个人都可以很快选出对自己而言最重要的东西。但是当这些消费需求分别在不同时间出现时，我们容易失去判断能力。月初发工资的瞬间，许多人会忘记几个月前自己荷包空空时的愿望。\n关于预算我们先要明确一点，预算的首要目的并不在于限制自己，而在于明确计量我们的剩余资源和已消耗资源，就像时钟一样。限制我们的永远是生活本身，是目标与理想之间的差别，是为了实现目标所需要的付出\n2023/10/28发表想法 通过管理项目个人时间的方法来管理个人购物需求\n[插图] 图3.14 利用四象限法解构消费 基于消费的基本心理——促进多巴胺分泌，我坚信必要开支够用就好，“必要消费”的边际成本其实是不断增加的，占比达到一定程度以后对于生活的改善就很有限了，过高反而会引发我们的焦\n◆ 过度压抑消费容易导致反弹\n我们财务自由的初衷是，不再为收入和生计而忍受不喜欢的生活，拿回生活的选择权，有底气对不喜欢的事情说不\n一个可持续的储蓄计划，重点是不断削减无效消费，杜绝浪费，而不是压抑必需的生活诉求。\n◆ 第四章 如何买保险\n保险作为家庭理财不可或缺的一步，为我们的投资和生活保驾护航。相信大家都不愿意看到，因为一些意外开支导致本金大幅度缩水。好在现在大家对保险的认可度已经越来越高，也逐渐意识到保险的重要性。\n[插图]图4.1 保险与投资的价值随时间的变化\n•保险关注中短期，保障期限在30年左右性价比最高，长期保障靠投资\n◆ 四大类刚需保险的作用详解\n对于大部分工薪族而言，除了五险一金的社保以外，我们一般还需要四大类刚需保险，分别是医疗险、重疾险、意外险和寿险。\n◆ 保险的保障期限买多久最划算\n那么问题来了，过去40年是这样，那么假如我们现在购买了终身重疾险保额50万元，那么再过40年以后这份保险的保额价值还剩多少？折算一下也就相当于现在的7.7万元了，保障能力的下降还是挺明显的。\n◆ 容易被忽视的寿险\n，保险的身故理赔数据中，疾病所致占比80%，意外所致占比20%，这个比例刚好符合意外险和寿险的差价。所以真的看重保障，我反倒是建议先配置寿险，有需要再配置意外险作为补充\n我国对于财产这类问题还比较敏感，比较典型的就是父母和孩子之间避而不谈，还有的家庭是一方管账，另一方只知道大概情况，这样都不太好。\n◆ 关于保险的几个实用原则\n尽可能拉长缴费年限。这样来自现金流的压力会小很多，也可以早期快快开始积累自己的投资本金\n◆ 附录\n我认为，中产与富人的主要区别不是体现在表面的消费水平和日常的生活质量上，而是体现在当前财务状况的抗打击能力和自由度上。先看个人的生活质量，从无产到中产的过程中，生活质量可以说得到飞跃性的提升。当我们有自己的第一套房子、第一辆车的时候，生活质量明显会上一个台阶。相比之下，从中产到富人的过程，生活质量当然也会上升，但不及从无产到中产那般明显。\n必需开支在总开支中的占比越高，财务状况的弹性就越小，财务越脆弱\n◆ 回测假设及基金策略选择\n对于定额定投策略来说，由于基金本身的长期年化收益率远高于货币基金，在定投频率这个问题上，资金利用率就成了最大影响因素。如果定投频率和工资频率保持一致，就可以资金到账立即投资，实现充分投资\n","permalink":"https://ynikl.github.io/books/worker-fire/","summary":"个人总结 点评 2023/10/29 认为好看 对于完全没有想过基础知识的小白非常友好，知行合一，还有很多有用的想过知识点\n书摘 ◆ 第一章 从零开始财务自由\n我个人比较喜欢康德（Immanuel Kant）对于自由的解读：自由不是你想干什么就干什么，而是你不想干什么就不干什么。\n对于大部分工薪族而言，财务自由的定义很简单，就是能够安心辞去当前的工作而不用担心生计，被动收入能够维持当前的生活水平，这就是自由，对不喜欢的工作和生活有说不的自由。\n◆ 用工资理财实现财务自由可行吗\n影响财务自由的因素其实就三个：本金、收益率、开支\n◆ 40岁以前退休\n整个财务自由计划可以概括为：开源、节流、加固，分别对应着积累本金、投资和保险。\n2023/10/26发表想法 保险，小概率守住资产累积\n有资产还要守得住，要能抵御天灾人祸，小概率事件虽然极少发生，但是一旦发生往往后果比较严重。明明已经实现财务自由，却由于一些意外“一夜回到解放前”，这样的情况没有人愿意看到，所以保险是理财中不可或缺的一环。\n工作是我们生活的一部分，财务自由并不是让我们从此脱离社会不再工作，而是给我们一个重新思考的机会，让我们有底气追求自己想要的生活。\n阿德勒心理学有一个相关解释，获得贡献感是幸福的核心之一\n◆ 制订一份属于自己的财务自由计划\n实现财务自由靠的是本金和收益率，因为被动收入=本金×收益率。\n在我看来计划最大的价值并不仅仅是执行，而在于帮你准确地梳理目标和行动的关系，帮你检查自己当前的行动是否匹配或者偏离了既定目标，以及量化自己和目标之间的距离。\n——实现F.I.R.E后我想过上什么样的生活？进而回答下面几个问题：•这样的生活需要多少被动收入？•需要积累多少本金？•计划用多长的时间来实现？\n当前的工作收入在相当程度上决定了财务自由以后的收入水平，投资理财本质上就是一个将职业价值和人力价值持续变现的过程。\n不同买家的报价差别会非常大。多尝试可以尽可能保证自己得到一个公允的定价。\n，但是一个可以肯定的事实是，形成投资意识可以帮助强化储蓄习惯。\n曾经有人问过查理·芒格（Charlie Thomas Munger）:“你觉得一个成功投资者的必备条件是什么？”芒格答：“理性。”就这两个字\n◆ 没钱是开始理财的最佳时机\n储蓄算得上普通人积累财富最有效的方式。不可能每个人都去创业增收，也不可能每个人都被老板重用提拔，但是储蓄是人人都能做到的\n花一半，存一半克制消费、增加储蓄并不总是等同于降低生活质量。《小狗钱钱》[插图]一书中给过一条很好的建议：每当面对收入增长时，总是用一半来消费、改善生活，另一半则用来增加储蓄。\n当面对各种现实问题时，我们总是倾向于把自己的主观问题变成客观条件的限制\n。年轻人交的养老保险，付给现在的老年人；等现在的年轻人老了，再由新的年轻人来供给养老金。但是问题来了，年轻人越来越少，而且这个过程目前来看基本不可逆。年轻人不够了，养老金自然也就不够了。\n◆ 如何让家人接受记账理财\n不管做什么事情，我们总会遵循“劳动换取回报”的逻辑。如果双方都没有做过，就意味着实际回报并不明确，因此我们对付出劳动就会非常排斥，因为获得的回报不清楚，需要付出的劳动却是实打实的。\n◆ 投资“武器库”\n投资产品大体可以分为四大类：•债券。•股票。•抗通货膨胀资产。•现金。\n债券，最大的特点就是约定利息、约定期限，到期还本付息\n抗通货膨胀资产包括房地产、抗通货膨胀债券和各种大宗商品，比如原油等工业原料。避险资产——黄金也可以被划分到这个范畴中。现金，从投资角度理解的现金包括货币市场基金和超短债等流动性很强的资产，最大特点是虽然回报率低，但是极稳健，随用随取。\n•货币基金，全称货币市场基金，投资现金，比如余额宝这类“宝宝类”产品。收益率最低，一般在2%~3%，但是波动也最低，基本不存在亏钱的可能性。•债券基金，投资债券。收益略高于货币基金，预期年化收益率为6%左右，短时间内存在亏损的可能性，但是持有半年以上基本不会亏钱。•股票基金，投资股票，预期收益最高，预期年化收益率可以达到10%，但是波动风险也很大，需要投资者对市场有一定的了解和把握。有亏损的风险，但是可以用一定的策略规避。•其他基金，比如投资原油、黄金，也有投资房产的房地产信托基金（REITs）。\n◆ 规划投资资金的四个步骤\n这几笔钱，紧急备用金、稳健投资和长期投资的资金建议分别安排到不同的账户，进行物理隔离，以做到相互独立，这对于后期的维护和回顾很有帮助\n•紧急备用金→活期储蓄、货币基金（现金）。•稳健投资→理财产品、债券基金（债券）。•长期投资→各类基金，涵盖债券、股票、抗通货膨胀资产、现金\n◆ 10%的投资收益率很难实现吗\n投资的一个基本逻辑——保本保收益和高收益很难两全，\n我们要学会放权，让专业的人做专业的事。作为工薪族，我们最擅长的其实是我们的本职工作，完全不需要舍本逐末。\n◆ 定投：投资、储蓄一步搞定\n。虽然牛市开始定投，不存在浮亏，账面上是一直盈利的，但是缺点在于，时间不够长，积累仓位不够，虽然收益率不错，但是实际收益金额并不高\n，先把最终结论给大家：每月定投和每周定投最终收益的差别是微乎其微的，基本可以忽略。定投是一个长期活动，一般会持续几年，因此不管是从逻辑还是最终统计数据的角度，每周定投还是每月定投都构不成收益的差别。\n•均线回归策略：对比当前价格与过去一段时间的平均价格来确定定投金额。•价值平均策略：根据过去的本金损益和涨跌来确定定投金额。•指数估值策略：根据当前市场的估值水平来确定定投金额。\n当前价格总是围绕着过去N天的平均价格波动，当价格低于均线的时候多买一点儿，当价格高于均线的时候少买一点儿，实现“低买高卖\n指数估值策略的操作逻辑如下：•低位定投：寻找那些低估的指数基金定投，越低估投入越多。•正常持有：当指数恢复正常估值后，停止投入，继续持有当前份额。•高位止盈：等到牛市到来、指数高估时，再分批卖出止盈。\n关于定投，我常常会收到类似这样的提问，“如果执行定投的时候，遇到了大涨大跌，要不要干预？”这里统一回答，“该干吗就干吗。”当初的计划是什么样呢？该定额就定额，该加仓就加仓，该止盈就止盈，不要主观判断，但凡主观判断难逃“十赌九输”的结局。\n但是如果我们看另一面，虽然晚开始定投，实现了盈利，但是因为时间短、账户积累少，绝对收益其实并不高。而比较早定投的朋友，如果只看最近几个月的表现，账户的绝对收益实际是更高的。如果市场开始进入牛市一飞冲天，必然是越早定投最终获利越多。盈亏总是同源的。你现在吃的亏，都是给未来攒下的家底。\n我们有必要在牛市末期及时止盈保住利润，等到熊市到来再重新投入资金。\n当初考驾照的时候，教练常说一句话，“方向盘要快打快回，慢打慢回”。\n我建议遵循“不满仓、不空仓”的原则，不管市场行情多好也不要All-In（全部投入），不管行情多差也不要完全离场。\n最糟糕也是最危险的时候是，原来不赞同你投资的朋友开始给你推荐股票和基金了，别想了，准备退出吧。","title":"工薪族财务自由说明书"},{"content":"思考什么 知止而后有定，定而后能静，静而后能安，安而后能虑，虑而后能得\n思考自己的人生的究极目标是什么:\n取舍 假设，如果赚大钱不是我的人生目标，我现在为了工资，而牺牲掉，提前 20 年度过我想要的人生的机会，那就舍近求远了。\n决定 知道自己应该要做什么，走什么路线可以帮助自己达到自己的“止” \u0026ndash; 人生理想\n幻想 超级幻想 我梦想中的生活并不会幻想着天天开着跑车，出入高贵的奢华场所。大富大贵非吾生所愿。 我想要的是更多的选择，可以走出办公室，房车旅行，随时随地可以办公，驱车到一个风景好的地方，冲上一杯咖啡，写上一两个小时代码，可以游走于山川大河 \u0026mdash;- 一直在路上的车，载着生活和梦想\n所以， 我的梦想就是： 不想被困在办公室\n小幻想 如果不能房车旅行世界， 退而求其次，\n我想要的是一种 cozy 的生活， 舒缓。 按点上下班，工作生活平衡，下班之后没有电话骚扰。 上班路上可以不堵车，居住环境要有家的感觉。\n早上 6 点起床，面朝大海，做一顿早餐， 7 点到达健身房，驱车 15 分钟上班。可以沉浸在自己代码世界中，下午 5 点可以伴着夕阳，回到家中，与家人一起做一顿晚餐，休闲时光，入睡。\n太有规律的生活，好像都很难有漂亮的故事展开。没有矛盾，没有剧情\n现实 略\n每个人都有自己生活, 自己烦恼, 自己的路线\n","permalink":"https://ynikl.github.io/posts/what-i-want/","summary":"思考什么 知止而后有定，定而后能静，静而后能安，安而后能虑，虑而后能得\n思考自己的人生的究极目标是什么:\n取舍 假设，如果赚大钱不是我的人生目标，我现在为了工资，而牺牲掉，提前 20 年度过我想要的人生的机会，那就舍近求远了。\n决定 知道自己应该要做什么，走什么路线可以帮助自己达到自己的“止” \u0026ndash; 人生理想\n幻想 超级幻想 我梦想中的生活并不会幻想着天天开着跑车，出入高贵的奢华场所。大富大贵非吾生所愿。 我想要的是更多的选择，可以走出办公室，房车旅行，随时随地可以办公，驱车到一个风景好的地方，冲上一杯咖啡，写上一两个小时代码，可以游走于山川大河 \u0026mdash;- 一直在路上的车，载着生活和梦想\n所以， 我的梦想就是： 不想被困在办公室\n小幻想 如果不能房车旅行世界， 退而求其次，\n我想要的是一种 cozy 的生活， 舒缓。 按点上下班，工作生活平衡，下班之后没有电话骚扰。 上班路上可以不堵车，居住环境要有家的感觉。\n早上 6 点起床，面朝大海，做一顿早餐， 7 点到达健身房，驱车 15 分钟上班。可以沉浸在自己代码世界中，下午 5 点可以伴着夕阳，回到家中，与家人一起做一顿晚餐，休闲时光，入睡。\n太有规律的生活，好像都很难有漂亮的故事展开。没有矛盾，没有剧情\n现实 略\n每个人都有自己生活, 自己烦恼, 自己的路线","title":"知止"},{"content":"总结 第一章给了我一个长途自驾深入无人地区的梦想\n第二章介绍了有能力的农村人在经济快速发展过程中的转变, 我总结了一下魏子淇的特定\n有梦想, 一直有独立的想法 行动力, 机遇来临后放手干 有格局, 第三章, 温州工厂的发展故事, 整体呈现故事偏阳光. 罗师傅经过努力奋斗之后, 也成了老板.\n保持梦想, 知行合一\n书摘 《寻路中国：从乡村到工厂的自驾之旅》 彼得·海斯勒 15个笔记\n◆ 第二章\n他们做出的地图描述性大大超过分析性。他们的地图，主要依靠语言文字，不太看重各种符号的使用。\n中国古代的皇帝们很少鼓励远征考察行为，官吏们更是有蔑视商人阶层的古老传统。\n◆ 第二章\n。村里人有个习惯，邻里生病，大家会互相帮助。如果某位三岔人生病入院了，其他村民会来到这家人的家里，送上现金——在一个没有农村医疗保险的国度里，村民们以这种方式应对医疗费用\n这正是怀柔的诀窍：这是一座正在转型的城市，人们转变的速度，跟农民们换上“意大利”皮鞋的速度一样快。\n作为小孩子，一无所有也是他的优势，因为那样他就不会丢失什么东西\n不”这个字一共被使用了二十八次\n魏嘉学到的技能不一定为我所看重，但是毫无疑问，他是在为进入中国社会做着准备。\n◆ 第三章\n有时候，他们似乎是本能地抓住了两个世界里最糟糕的东西：最糟糕的现代生活，最糟糕的传统观念\n◆ 第一章\n如果是“看书”这样的答案，则说明那个人很懒惰。最糟糕的，莫过于应聘者说她喜欢上网打发空闲时间。“我喜欢听到应聘的女孩子回答说喜欢跟家人在一起，或者照料自己的母亲等等之类。”王老板说，“从农村来的女孩子，就要那样单纯才行。我喜欢吃得起苦的人。”\n◆ 第二章\n他蓄着平头，这样的发型在中国一般意味着麻烦来了。在中国，那是恃强凌弱者的经典发型，我只要看见这样的平头，心就会不由自主地往下沉。\n答案就在那些建筑工地的下面。就是土地，或者更准确地说，就是土地使用权从农村转移到城市的过程。在中国的农村，所有的土地都是集体性质的，像魏子淇这样的农民们无权到开放的市场上去出售自己的土地或者房屋。相反，村里面把持着所有的买卖行为。如果某个城市拿定主意要发展到某片农田所在的地方，连村组织也没有多少讨价还价的能力。在这种情况下，城市可以随心所欲地占领土地，他们所支付的价格，是政府早就订好了的。一旦完成出售行为，农民们就得从原来的土地上搬家，城市才能在上面进行基础设施建设，那片地方也就变成了城市。城市的土地使用权可以按照市场价格拍卖给出价最高的一方。这是一种套利交易，从农村买来土地，作为城市土地再次出卖。而这种行为，只有镇以上级别的政府才有资格进行。\n地方政府往往会成立一个经济开发区，里面的土地使用权按成本价出售。便宜的价格吸引着各大工厂来此落户，工厂反过来又会上缴税金。不过，关键的地方，还是他们使城市得到了拓展。更多的老板、店员、务工人员跟了过来——这一切都意味着，郊区面积扩大，房地产市场更火热\n因为那些有积极性的工人们知道，有朝一日他们总要离开生产线。二十多岁的时候，在他的空闲时间里，罗师傅的阅读能力和写作能力也得到了提高，最后竟成了个不折不扣的文化人。在深圳，他通过了政府主办的考试，取得了函授高中毕业证。\n◆ 第三章\n在这个开车路过的城市里，我感觉自己只不过是个开车路过的记者而已，听完了那些悲伤的故事，又从高速公路上离他们而去\n在经济开发区，最让我为之一振的是那些个人主义的迹象——一些人据此摆脱了小村子里的群体思维模式，学会了自己拿主意，自己解决自己的问题。\n","permalink":"https://ynikl.github.io/books/country-driving/","summary":"总结 第一章给了我一个长途自驾深入无人地区的梦想\n第二章介绍了有能力的农村人在经济快速发展过程中的转变, 我总结了一下魏子淇的特定\n有梦想, 一直有独立的想法 行动力, 机遇来临后放手干 有格局, 第三章, 温州工厂的发展故事, 整体呈现故事偏阳光. 罗师傅经过努力奋斗之后, 也成了老板.\n保持梦想, 知行合一\n书摘 《寻路中国：从乡村到工厂的自驾之旅》 彼得·海斯勒 15个笔记\n◆ 第二章\n他们做出的地图描述性大大超过分析性。他们的地图，主要依靠语言文字，不太看重各种符号的使用。\n中国古代的皇帝们很少鼓励远征考察行为，官吏们更是有蔑视商人阶层的古老传统。\n◆ 第二章\n。村里人有个习惯，邻里生病，大家会互相帮助。如果某位三岔人生病入院了，其他村民会来到这家人的家里，送上现金——在一个没有农村医疗保险的国度里，村民们以这种方式应对医疗费用\n这正是怀柔的诀窍：这是一座正在转型的城市，人们转变的速度，跟农民们换上“意大利”皮鞋的速度一样快。\n作为小孩子，一无所有也是他的优势，因为那样他就不会丢失什么东西\n不”这个字一共被使用了二十八次\n魏嘉学到的技能不一定为我所看重，但是毫无疑问，他是在为进入中国社会做着准备。\n◆ 第三章\n有时候，他们似乎是本能地抓住了两个世界里最糟糕的东西：最糟糕的现代生活，最糟糕的传统观念\n◆ 第一章\n如果是“看书”这样的答案，则说明那个人很懒惰。最糟糕的，莫过于应聘者说她喜欢上网打发空闲时间。“我喜欢听到应聘的女孩子回答说喜欢跟家人在一起，或者照料自己的母亲等等之类。”王老板说，“从农村来的女孩子，就要那样单纯才行。我喜欢吃得起苦的人。”\n◆ 第二章\n他蓄着平头，这样的发型在中国一般意味着麻烦来了。在中国，那是恃强凌弱者的经典发型，我只要看见这样的平头，心就会不由自主地往下沉。\n答案就在那些建筑工地的下面。就是土地，或者更准确地说，就是土地使用权从农村转移到城市的过程。在中国的农村，所有的土地都是集体性质的，像魏子淇这样的农民们无权到开放的市场上去出售自己的土地或者房屋。相反，村里面把持着所有的买卖行为。如果某个城市拿定主意要发展到某片农田所在的地方，连村组织也没有多少讨价还价的能力。在这种情况下，城市可以随心所欲地占领土地，他们所支付的价格，是政府早就订好了的。一旦完成出售行为，农民们就得从原来的土地上搬家，城市才能在上面进行基础设施建设，那片地方也就变成了城市。城市的土地使用权可以按照市场价格拍卖给出价最高的一方。这是一种套利交易，从农村买来土地，作为城市土地再次出卖。而这种行为，只有镇以上级别的政府才有资格进行。\n地方政府往往会成立一个经济开发区，里面的土地使用权按成本价出售。便宜的价格吸引着各大工厂来此落户，工厂反过来又会上缴税金。不过，关键的地方，还是他们使城市得到了拓展。更多的老板、店员、务工人员跟了过来——这一切都意味着，郊区面积扩大，房地产市场更火热\n因为那些有积极性的工人们知道，有朝一日他们总要离开生产线。二十多岁的时候，在他的空闲时间里，罗师傅的阅读能力和写作能力也得到了提高，最后竟成了个不折不扣的文化人。在深圳，他通过了政府主办的考试，取得了函授高中毕业证。\n◆ 第三章\n在这个开车路过的城市里，我感觉自己只不过是个开车路过的记者而已，听完了那些悲伤的故事，又从高速公路上离他们而去\n在经济开发区，最让我为之一振的是那些个人主义的迹象——一些人据此摆脱了小村子里的群体思维模式，学会了自己拿主意，自己解决自己的问题。","title":"寻路中国：从乡村到工厂的自驾之旅"},{"content":"从社科的角度出发, 很多自己原先以为理所当然的事情, 变得没有那么理所当然. 原先, 你可能认为人 就是需要不断的学习, 不断进步. 你会瞧不起那些不思上进的人. 可是, 社会的主流思想是上进的也只 当前教育与和社会的一种主流思想. 如果人类社会不进步, 大家可能还可以无忧无虑摘野果生活.\n想说的是: 你认为的理所当然的事情, 可能并没有那么理所当然. 只是当前的社会环境和教育让你认为是 那么的理所当然.\n说说贫穷, 前现代时期的贫穷传递的工作伦理是穷人们不努力上进, 所以贫穷. 现在的后现代时我们没有 机会去工作. 越来越多的人变成了\u0026quot;社会的剩余人员\u0026quot;, 而不是\u0026quot;失业人员\u0026quot;, 剩余意味着不再需要了. 现在 已经不是你有手有脚有力气, 就可以过上温饱的生活\n《工作、消费主义和新穷人》 齐格蒙特·鲍曼 75个笔记\n◆ 点评 2023/09/15 认为一般\n◆ 第一章 工作的意义：创造工作伦理\n第一个前提是：为了维持生活并获取快乐，每个人都必须做一些他人认同的有价值的事，并以之获取回报\n第二个前提是：安于现状，不思进取是可耻的——道义上来说愚蠢又有害。因满足而停止努力是不明智、不可取的。除非是为了完成更多工作而蓄力，否则休息就是不体面\n戒律的内容如下：即使你看不到任何得获[插图]，你也应该继续工作。工作即正义，不工作是一种罪恶\n内隐的一个假定是，绝大多数人都有能力工作，可以通过出售工作能力获取相应收益，用以维持生活。缺失了这个假定，以上的戒律和前提看起来就像是空中楼阁。\n另一个内隐的假定是：只有公认的有价值的工作——那些可以要求薪水回报的，可以用于交易的——才会被工作伦理认同\n但在绝大多数情况下，单方面的善意被报以竭尽所能的偷懒\n新的工厂系统需要的只是人的一部分：身处复杂机器之中，如同没有灵魂的小齿轮一样工作的那部分。这场战斗是为了对抗人身上那些无用的“部分”——兴趣和雄心，它们不仅与生产力无关，还会干扰生产需要的那些有用的“部分”。工作伦理本质上是对自由的摒弃。\n2023/08/05发表想法 突然想到我的焊工朋友，和以前我看到在流水线工作的工人们，他们就是麻木的重复的手下一点点工作。看不到自己所航行的大船。相比之下，互联网的新工人有更大的主观全，更全面的视角\n工作伦理改革运动的另一个目的，是把人们所做的事和他们认为值得做、有意义的事分离开来，把工作本身和任何切实的、可理解的目的分离开来\n这种拒绝进步的抵抗经常被用来证明穷人的懒散，以及强硬、严格、不留情面的工厂纪律在道德上的必要性。让穷人和“不思进取”的人工作，不仅是一项经济任务，更是一项道德任务\n工作伦理是意义深远的道德教育议程中的关键项目之一，它为思想者和行动者设定的任务，构成了后来现代化的拥趸所谓的“文明化进程”之核心。\n……逐渐形成共识的是，穷人是可以被牺牲的，无论他们是否该对自己的处境负责。如果有什么办法可以在不增加社会风险的前提下简单地摆脱他们，李嘉图(Ricardo)和马尔萨斯(Malthus)肯定会建议那样做，政府也肯定会给予积极的关注，只要不增加税赋就行。\n无论生活多么悲惨，只要它是由劳动报酬支撑的，就具有道德优越性\n人们希望，不工作的穷人越是生活堕落，越是深陷赤贫，那些有工作、出卖劳动力换取最微薄工资的穷人的生活就越诱人，至少不至于无法忍受；这样，工作伦理得到了支撑，胜利也触手可及。\n救济院的恐怖生活成为评估工厂雇工生活质量的参照，帮助雇主更加肆无忌惮地加大对劳工的压迫，不用担心他们反抗或是退出。最终，那些接受工作伦理的人与那些拒绝接受的人，以及尝试接受但最终失败的人，几乎没什么差别\n当下以及未来，工厂工人的选择大幅减少了。救济院外不救济的原则是推动“没有选择”策略的一种体现。这个策略的另一种体现是引入“仅供生存”(hand-to-mouth existence)的概念——把薪水保持在一个足够低的水平，工人们只能靠它活到第二天的黎明。这样一来，除了继续辛苦工作，他们“别无选择”\n两者都需要劳工能够思考和计算。然而，思想是一把双刃剑，或者说，是原本严密的墙体中留下的一道危险缝隙，通过这道缝隙，麻烦的、难以预料的、无法估量的因素（如人们对有尊严的生活的热情或自主的冲动）会从之前的放逐中回归\n在马克思主义影响下，反对资本主义的政治口号是“不劳动者，不得食”，关于未来无产阶级社会的愿景也是完全基于工厂的模样构建的。在经典的现代工业社会时代，工作同时是个人生活、社会秩序和社会生存能力（系统化再生产）的枢纽。\n工作是决定社会地位和自我评价的主要因素\n工作类型影响着人们的全部生活，它不仅决定了与工作过程直接相关的权利和义务，而且决定了预期的生活水平、家庭模式、社会生活和业余生活、礼仪和日常行为规范\n总而言之：工作是主要的基准，所有其他生活追求都可以基于它来规划和安排。\n。在工业化现代社会中，大部分男性的绝大多数可支配时间、成年后的大部分岁月都是在工作中度过的。根据罗杰·苏(Roger Sue)的计算，在1850年人们70%的可支配时间都处于工作状态。[插图]工作场所承载了最主要的社交融合。在这里，人们接受训练，培养服从规范、遵守纪律的行为习惯，形成自己的“社会性格”，至少是那些有利于社会秩序的社会性格。除去现代另一项伟大发明——大规模征兵，工厂是现代社会最主要的“圆形监狱”\n2023/08/08发表想法 和父权社会有相互影响\n如果让大部分男性进入工厂工作是生产和维持社会秩序的主要手段，那么以（“养家糊口”的）男性为绝对权威建立强大、稳定的父权制家庭，就成为一个必要的补充\n现代工业社会的实质是借助自然的可用能源对（同样是自然的）资源进行再加工，最后产出“财富”的过程。这种再加工是由资本所有者/管理者组织，通过雇佣关系实现的。因此其延续性取决于资本所有者是否能让未参与生产的人口源源不断加入生产过程\n包括现代工厂在内的现代组织而言，它们的趋势是使人类行动者的道德情感与他们的行为无关，以便这些行为达到一定程度的规律性和可预测性——完成永远不能指望非理性的道德冲动完成的任务\n2023/08/08发表想法 获取更高的报酬\n社会生存质量的权力斗争变成了获得更多金钱的斗争，经济收益成为自治自主的唯一体现，这对现代工业社会的发展产生了深远的影响\n◆ 第二章 从工作伦理到消费美学\n在当前这个近现代(late-modern)、次现代(second-modern)或后现代(post-modern)阶段\n从生产者社会到消费者社会的变迁带来许多意义深远的变化，其中最重要的涉及人们被培养、训练以符合社会认同要求的模式，也即人们融入社会秩序并获取自己一席之地的模式。曾经举足轻重的圆形监狱逐渐失去了作用，大规模工业化雇佣迅速萎缩，小规模的、自由的职业群体取代了全民大生产，大部分人不可能再受到圆形监狱的直接影响。技术的进步在就业萎缩的前提下确保了生产力的增长，工厂的员工越来越少，“精简”成为新的行为准则。据《金融时报》(Financial Times)编辑马丁·沃尔夫(Martin Wolf)计算，从1970年到1994年，欧盟的工业就业人口比例从30%跌落到20%，美国从28%跌落到16%，而此期间工业生产力平均每年增长2.5%。\n，越是陌生的需求越具吸引力，能获取的未知生活体验会带来大量的乐趣。前所未有的新鲜的兴奋感，就是消费者游戏的秘密。\n2023/08/10发表想法 终于理解了消费信心的意思了\n近年来，各个政治派别异口同声地积极鼓吹“消费主导经济复苏”。产出不断下降、订单簿空空如也、商业街门可罗雀，这些都被归咎于消费意愿或“消费者信心”的不足（消费者信心意味着消费者通过信贷消费的欲望强烈到足以压倒对破产的恐惧）\n现在，只有极少数情况下，才能通过从事的工作来定义永久身份，更不用说确保这个身份。长期的、有保障的、确定性的工作已经很少见。那种古老的、“终身制”的，甚至是世袭的工作岗位，只限于少数古老的行业或职业，数量也正迅速萎缩\n所有的文化产品都被设计为具有“最大限度的影响力并且可以瞬间废弃”\n履行消费者的责任意味着更多地做选择，无论这最终是否带来更多的消费。拥抱消费者模式意味着首先要热衷于选择，消费仅居于次席，也并非不可或缺\n。消费者社会不会轻易呼吁延迟满足。这是一个信用卡社会，而非存折社会。消费者社会“活在当下”，物欲横流，没有耐心等待。\n赋予它们实质的复杂审美标准。这种“不需要理由”“不接受反驳”的直率，从侧面印证了美学已取代伦理学，主导了工作的价值判断。如同所有其他可以成为消费标的、被消费者自由选择的事物一样，工作必须是“有趣的”——多样化、令人兴奋、具有挑战性，包含适度的风险，并不断带来崭新的体验。那些单调、重复、例行、缺乏冒险精神、不允许创新、没有挑战、无法带来提升和自信的工作，就是“无聊的”\n富有成就感的工作，能够自我实现的工作，作为人生意义的工作，作为生活核心的工作，作为骄傲、自尊、荣誉和名声的源泉的工作，简而言之，具有使命感的工作，成为少数人的特权，成为精英阶层的特有标志。其他人只能敬畏地远观、艳羡，只能通过低俗小说和肥皂剧来体验。他们在现实中没有机会从事这类工作，体验这种生活\n每个社会都有“体面生活”的衡量标准，如果无法达到这些标准，人们就会烦恼、痛苦、自我折磨。贫穷意味着被排除在“正常生活”之外，意味着“达不到标准”，从而导致自尊心受到打击，产生羞愧感和负罪感\n消费者社会中，“正常生活”是合格消费者的生活，他们专注于从各种公开的机会中选择，以获取愉悦的感受和生动的体验。“幸福生活”的定义是：抓住很多机会，错过的机会很少，甚至没有，抓住最被人乐道、最被羡慕的机会，而且最好捷足先登，不落于人后。和其他各类社会一样，消费者社会的穷人没有机会过上正常生活，更不用说过上幸福生活\n2023/08/12发表想法 无聊，因为失败的消费者没有抓住机会\n失业者最常抱怨的问题之一是感觉被关在家里……他们不仅认为自己无聊、沮丧，（而且）看到自己这样（实际上也正是这样）更使他们烦躁不安。烦躁成了失业者日常生活的特征。\n一旦欲望的理由消失，欲望的对象就失去了诱惑力\n，消费市场比弗洛伊德更有创造力，它唤起了弗洛伊德认为无法实现的幸福状态。秘诀在于：在欲望被安抚之前激发新的欲望，在因占有而感到厌倦、烦躁之前替换新的猎物。永远不出现厌倦——这才是消费者的生活准则，也是切实可行的准则、触手可及的目标\n所以，无聊是消费者社会特有的社会分层因素产生的心理学结果。这些因素包括：选择的自由度和丰富度、流动的自由度、消除孤立和组织时间的能力\n杰里米·西布鲁克(Jeremy Seabrook)曾提醒过他的读者，当今社会依赖于“制造人为的、主观的不满足感”，因为本质上“人们满足于自己拥有的东西才是最可怕的威胁\n◆ 第三章 福利国家的兴衰\n2023/08/31发表想法 收到恩惠的人 需要砍断恩惠 来证明自己\n“福利国家”(welfare state)的概念传达了这样一种思想：国家有责任和义务保障其所有公民的“福利”——不仅仅是维持生计，而是在身处的社会中有尊严地生存\n因此，公共福利允许（明示或暗示）把公民生活与“对社会的贡献”分离开来，生产贡献只应在职业范畴中讨论，由此削弱了工作伦理最神圣的、最不容置疑的前提\n如果增加劳动力就能源源不断地产生利润，雇主当然乐得把“劳动力再商品化”的成本转嫁给财政部。不过，这种情况逐渐不复存在。公司业绩的大部分收益都是通过“前期”支出（达到总成本的80%左右）实现的，其中并不包括大量雇佣的劳动力。逐渐地，雇员从资产变成了负债\n这种新获得的全球流动自由消减了补充劳动力的经济负担：取之不尽、用之不竭的，新鲜、顺从、没有被宠坏的劳动力正在远方招手\n现在，在支撑福利国家的利益关系中，最主要的利益关系已经被移除。失去了经济基础，整个利益集群分崩离析。对“劳动力再商品化”的投资已经没有任何收益，一旦被要求承担社会福利成本，优秀的商人就会利用新获得的全球化自由，把他们的资金和企业带到国外，带到那些索求更少的地方。因此，那些坚持保持福利标准不变的政府被“双重打击”的恐惧所困扰：无家可归、一无所有的人蜂拥而入，资本（以及潜在的收入来源）蜂拥而出。\n。因税收降低结余的现金比公共保障抽象的可能性更具诱惑，何况公共保障的标准和吸引力在日渐下降。公共福利保障，用简单易懂的话来说，并不“物有所值”\n必须强烈要求拆除“特权”，因为它每时每刻都在提示着自己“被贬损的\n◆ 第四章 工作伦理和新穷人\n目前在劳动力市场上存在四类职业。第一类是“引导者”——发明家、广告商、推广者和商人。第二类是各领域、各层次的教育工作者。他们积极从事于可雇佣劳动力的再生产，把劳动力塑造成可供购买和消费的商品。第三类是从事“消费市场服务”的人。他们的工作是激活他人的消费能力，大部分是产品的销售者和培养消费者购买欲望的人。第四类是“常规劳动者”(routine labourers)。他们被配置于传统的流水线，或“新改进”的自动化电子设备终端，比如超市收银台。\n“失业”(unemployment)一词，之前通常用于指向没有工作收入的人，它表达出就业才是“正常态”这个假设。前缀“un”表示这是一种非正常现象——一种奇怪的、不正常的、暂时的现象\n。所谓“过剩”的人被标记在经济平衡表的借方，而非贷方，因为无论是现在还是可预见的未来，他们都不能增加社会的财富——他们增加的只是社会的负担（公共支出）\n就所有现实意义而言，如果他们不存在，经济会更好。简而言之，他们应该继续被排除在经济活动之外。\n劳动力过剩被视为灾难，所有寻求合理化（提升投入产出比）的努力首先都会集中于进一步削减雇员数量的可能性\n“将值得帮助的穷人和不值得帮助的穷人分开，把责难倾倒给后者，以合理化社会对他们的冷漠”\n因此“说明贫穷是个人缺陷的必然后果，进而促成对穷人和被剥夺者的漠不关心”[插图]\n无用和危险，属于沃尔特·盖里(Walter B.Gallie)认为的“本质上有争议的概念\n在这个社会中，人们对任何有用性的持久产生怀疑，困扰于零散、游移的恐惧\n这个社会中没有哪个行业或职业能够确信自己的长期有用性；这也是底层阶级的危险性为社会提供的一项重要服务——这个社会被太多焦虑困扰，人们根本无法分辨究竟在恐惧什么，如何减缓这种恐惧。\n。在缪尔达尔看来，底层社会的成员是被驱逐的受害者，他们在社会中新的定位并非因为自己选择了退出，而是经济逻辑的产物，受害者对之无法控制或施以影响。\n请注意，“犯罪”“领取救济”和“吸毒”，它们被同时提及并置于同一水平。无需论证，也无需证据，不需要解释为什么它们共同被归类于“反社会行为”\n随着劳动力迅速变成提高生产力的障碍，工作伦理仍然可以发挥作用，但这次是作为另一种有效手段：洗涤社会中正常人的双手和良知，帮他们从抛弃同胞致使同胞永久失业的罪责中摆脱出来\n每种社会秩序都会制造出一些威胁它们自身的危险形象。每个社会也会按自己的标准孕育为之奋斗的愿景\n作为事实的或潜在的罪犯，穷人不再是一个道德问题，他们已经被摒弃于我们的道德义务之外\n◆ 第五章 全球化之下的工作与过剩\n现代化是对世界和人们生活方式的一种难以抑制、令人上瘾的“重塑”，是“现代生活方式”的同义词。\n几十年前，工业机器引发的手工业行业解体为许多人招致了苦难。几十年后，轮到了矿山和工厂，它们曾经拯救过因农业技术进步而流离失所的受害者。所有这些例子里，减轻劳动者生活压力、提高他们生活水平的方法，无不是寄望于转移人口、减少本地就业竞争\n就物理空间和人类栖息地的延伸来说，地球远没有达到极限。相反，人口稀少、人迹罕至的土地面积似乎在扩大而非缩小，这些土地被认为不适合居住，不足以支撑人类的生活。\n“地球已经满负荷”是社会学和政治学的论断。\n经济发展不可能不破坏和废弃之前行之有效的谋生方式，必定会剥夺一些从业者的生计\n全球化已经成为第三条“废弃人口”的生产线（另外两条是秩序建设和经济、技术的进步），也是最多产、最不受控制的一条生产线。\n我们应该教育我们的孩子，让他们认识到不公平：我们这些坐在桌子后面敲打键盘的人的工资，是那些打扫厕所弄脏双手的人的10倍，是那些在第三世界国家制造键盘的工人的100倍。我们应当让他们看到问题的所在：先实现工业化的国家的财富是尚未实现工业化的国家的100倍\n◆ 第六章 新穷人的前景\n然而，向往秩序就是向往死亡，因为生命本身就是不断破坏秩序的过程。或者换句话说：对秩序的渴望是一种堂皇的托辞，是强烈厌世的借口\n褪去宗教光环的世界里，没有什么可以仅仅因为存在而享有权利，所有事物都必须展示出合法、合理的证据证明自己可以享有权利\n","permalink":"https://ynikl.github.io/books/work-consumerism-and-the-new-poor/","summary":"从社科的角度出发, 很多自己原先以为理所当然的事情, 变得没有那么理所当然. 原先, 你可能认为人 就是需要不断的学习, 不断进步. 你会瞧不起那些不思上进的人. 可是, 社会的主流思想是上进的也只 当前教育与和社会的一种主流思想. 如果人类社会不进步, 大家可能还可以无忧无虑摘野果生活.\n想说的是: 你认为的理所当然的事情, 可能并没有那么理所当然. 只是当前的社会环境和教育让你认为是 那么的理所当然.\n说说贫穷, 前现代时期的贫穷传递的工作伦理是穷人们不努力上进, 所以贫穷. 现在的后现代时我们没有 机会去工作. 越来越多的人变成了\u0026quot;社会的剩余人员\u0026quot;, 而不是\u0026quot;失业人员\u0026quot;, 剩余意味着不再需要了. 现在 已经不是你有手有脚有力气, 就可以过上温饱的生活\n《工作、消费主义和新穷人》 齐格蒙特·鲍曼 75个笔记\n◆ 点评 2023/09/15 认为一般\n◆ 第一章 工作的意义：创造工作伦理\n第一个前提是：为了维持生活并获取快乐，每个人都必须做一些他人认同的有价值的事，并以之获取回报\n第二个前提是：安于现状，不思进取是可耻的——道义上来说愚蠢又有害。因满足而停止努力是不明智、不可取的。除非是为了完成更多工作而蓄力，否则休息就是不体面\n戒律的内容如下：即使你看不到任何得获[插图]，你也应该继续工作。工作即正义，不工作是一种罪恶\n内隐的一个假定是，绝大多数人都有能力工作，可以通过出售工作能力获取相应收益，用以维持生活。缺失了这个假定，以上的戒律和前提看起来就像是空中楼阁。\n另一个内隐的假定是：只有公认的有价值的工作——那些可以要求薪水回报的，可以用于交易的——才会被工作伦理认同\n但在绝大多数情况下，单方面的善意被报以竭尽所能的偷懒\n新的工厂系统需要的只是人的一部分：身处复杂机器之中，如同没有灵魂的小齿轮一样工作的那部分。这场战斗是为了对抗人身上那些无用的“部分”——兴趣和雄心，它们不仅与生产力无关，还会干扰生产需要的那些有用的“部分”。工作伦理本质上是对自由的摒弃。\n2023/08/05发表想法 突然想到我的焊工朋友，和以前我看到在流水线工作的工人们，他们就是麻木的重复的手下一点点工作。看不到自己所航行的大船。相比之下，互联网的新工人有更大的主观全，更全面的视角\n工作伦理改革运动的另一个目的，是把人们所做的事和他们认为值得做、有意义的事分离开来，把工作本身和任何切实的、可理解的目的分离开来\n这种拒绝进步的抵抗经常被用来证明穷人的懒散，以及强硬、严格、不留情面的工厂纪律在道德上的必要性。让穷人和“不思进取”的人工作，不仅是一项经济任务，更是一项道德任务\n工作伦理是意义深远的道德教育议程中的关键项目之一，它为思想者和行动者设定的任务，构成了后来现代化的拥趸所谓的“文明化进程”之核心。\n……逐渐形成共识的是，穷人是可以被牺牲的，无论他们是否该对自己的处境负责。如果有什么办法可以在不增加社会风险的前提下简单地摆脱他们，李嘉图(Ricardo)和马尔萨斯(Malthus)肯定会建议那样做，政府也肯定会给予积极的关注，只要不增加税赋就行。\n无论生活多么悲惨，只要它是由劳动报酬支撑的，就具有道德优越性\n人们希望，不工作的穷人越是生活堕落，越是深陷赤贫，那些有工作、出卖劳动力换取最微薄工资的穷人的生活就越诱人，至少不至于无法忍受；这样，工作伦理得到了支撑，胜利也触手可及。\n救济院的恐怖生活成为评估工厂雇工生活质量的参照，帮助雇主更加肆无忌惮地加大对劳工的压迫，不用担心他们反抗或是退出。最终，那些接受工作伦理的人与那些拒绝接受的人，以及尝试接受但最终失败的人，几乎没什么差别\n当下以及未来，工厂工人的选择大幅减少了。救济院外不救济的原则是推动“没有选择”策略的一种体现。这个策略的另一种体现是引入“仅供生存”(hand-to-mouth existence)的概念——把薪水保持在一个足够低的水平，工人们只能靠它活到第二天的黎明。这样一来，除了继续辛苦工作，他们“别无选择”\n两者都需要劳工能够思考和计算。然而，思想是一把双刃剑，或者说，是原本严密的墙体中留下的一道危险缝隙，通过这道缝隙，麻烦的、难以预料的、无法估量的因素（如人们对有尊严的生活的热情或自主的冲动）会从之前的放逐中回归\n在马克思主义影响下，反对资本主义的政治口号是“不劳动者，不得食”，关于未来无产阶级社会的愿景也是完全基于工厂的模样构建的。在经典的现代工业社会时代，工作同时是个人生活、社会秩序和社会生存能力（系统化再生产）的枢纽。\n工作是决定社会地位和自我评价的主要因素\n工作类型影响着人们的全部生活，它不仅决定了与工作过程直接相关的权利和义务，而且决定了预期的生活水平、家庭模式、社会生活和业余生活、礼仪和日常行为规范\n总而言之：工作是主要的基准，所有其他生活追求都可以基于它来规划和安排。\n。在工业化现代社会中，大部分男性的绝大多数可支配时间、成年后的大部分岁月都是在工作中度过的。根据罗杰·苏(Roger Sue)的计算，在1850年人们70%的可支配时间都处于工作状态。[插图]工作场所承载了最主要的社交融合。在这里，人们接受训练，培养服从规范、遵守纪律的行为习惯，形成自己的“社会性格”，至少是那些有利于社会秩序的社会性格。除去现代另一项伟大发明——大规模征兵，工厂是现代社会最主要的“圆形监狱”\n2023/08/08发表想法 和父权社会有相互影响\n如果让大部分男性进入工厂工作是生产和维持社会秩序的主要手段，那么以（“养家糊口”的）男性为绝对权威建立强大、稳定的父权制家庭，就成为一个必要的补充\n现代工业社会的实质是借助自然的可用能源对（同样是自然的）资源进行再加工，最后产出“财富”的过程。这种再加工是由资本所有者/管理者组织，通过雇佣关系实现的。因此其延续性取决于资本所有者是否能让未参与生产的人口源源不断加入生产过程\n包括现代工厂在内的现代组织而言，它们的趋势是使人类行动者的道德情感与他们的行为无关，以便这些行为达到一定程度的规律性和可预测性——完成永远不能指望非理性的道德冲动完成的任务\n2023/08/08发表想法 获取更高的报酬","title":"工作、消费主义和新穷人"},{"content":"“村上”味，文中主人公的孤独感 \u0026ndash; 或着与他人的疏离感， 很“素”的黄色剧情。\n冷酷仙境是身为\u0026quot;计算士\u0026quot;的我, 所处的科技发达的世界 世界尽头是身为\u0026quot;读梦人\u0026quot;的我, 所处的自我封闭的小镇 在冷酷仙境中，奇怪科学博士不经过同意对我的私自对“我”的脑袋进行改造， 导致我思维分裂，当前的第一思维只有 24 小时的寿命， 同时衍生出了第三思维 小镇 \u0026ndash; 世界尽头。\n在世界尽头中， 大家都失去了心，过着完全，且无欲无求的日子。主角另一个我“读梦人”， 刚和自己的影子（代表心和记忆）分开。 陷入是否要彻底摒弃自己 内心的困境。\n书中有一段影子劝说“我”离开世界尽头的话：\n“没有争夺没有怨恨没有欲望，无非等于说也就没有相反的东西，那便是快乐、幸福和爱情。正因为有绝望有幻灭有哀怨，才有喜悦可言。没有绝望的终极幸福是根本不存在的。”\n觉得最精彩的三句话:\n有的东西不过很久是不可能理解的，有的东西等到理解了又为时已晚。大多时候，我们不得不在尚未清楚认识自己的心的情况下选择行动，因而感到迷惘和困惑\n就是感觉很对而已\n“年龄一大，相信的东西就越来越少，”我说，“和牙齿磨损一个样。既非玩世不恭，又不是疑神疑鬼，只是磨损而已。”\n同样也是感觉描述的很对\n手表指在凌晨四时十二分。天还未亮，晨报尚未派发，电车尚未启动，地上的人们应当还在酣然大睡\n主人公正在深夜穿越洞穴去见博士的时候，看了眼时间描述。 感到人与人之间是疏离感\n引用豆瓣网友Lilian:\n村上春树的书中我也最爱这一本，影子那段应该是用了王尔德《渔夫和他的灵魂》的典故。\n下下一本看这个.\n书摘 《世界尽头与冷酷仙境（2023修订版）》 村上春树 22个笔记\n◆ 独角兽：心与意识之间（译序）\n小说以至文学的职责，就是把仅靠意识和逻辑无法彻底打捞的那类东西切切实实地不紧不慢地打捞下去。小说即是填埋心与意识之间的空隙的东西。\n◆ 4 世界尽头——图书馆\n她身上有一种东西在静静摇晃着我意识深处某种软绵绵的沉积物，但我不明白这到底意味着什么，语言已被葬入遥远的黑暗\n◆ 5 冷酷仙境——计算、进化、性欲\n就是无法自由选择。任何人都无法选择进化，它属于洪水雪崩地震一类，来临之前你不得而知，一旦临头又无可抗拒\n◆ 15 冷酷仙境——威士忌、拷问、屠格涅夫\n从全程马拉松所需时间到卫生纸一次所用长度，世上实在充满着各种各样的标准值\n提着购物篮的主妇络绎不绝地从我眼前走过。大葱和萝卜在超级商场购物袋口探头探脑。我不由得有点羡慕她们，她们既不会被砸坏冰箱，又不至于被刀子划破肚子，只消考虑一下葱和萝卜的烹饪方式和小孩的成绩，岁月即可风平浪静地流过。她们无需抱住独角兽头骨不放，脑袋不必遭受莫名其妙的密码和复杂程序的困扰。这便是普普通通的生活。\n◆ 17 冷酷仙境——世界尽头、查理·帕克、定时炸弹\n不知道。大概是想怪罪谁吧——把这种莫名其妙的勾当推到一个人头上，心里才舒服点\n你看上去很疲劳，而疲劳却又像是一种精力。\n◆ 18 世界尽头——读梦\n有的东西不过很久是不可能理解的，有的东西等到理解了又为时已晚。大多时候，我们不得不在尚未清楚认识自己的心的情况下选择行动，因而感到迷惘和困惑\n◆ 19 冷酷仙境——汉堡包、天际线、截止期限\n“人上了年纪，无可挽回的事情的数量就越来越多。” “所以疲劳？” “不错，”我说，“所以疲劳。”\n但我无论如何也不相信自己会真的成为一流角色。一流角色一般都具有坚定的自信，这也是成为一流的前提。倘若自己都不相信自己会成为一流，那么很难仅仅由于势之所趋而荣登一流宝座。\n◆ 21 冷酷仙境——手镯、本·约翰逊、恶魔\n“年龄一大，相信的东西就越来越少，”我说，“和牙齿磨损一个样。既非玩世不恭，又不是疑神疑鬼，只是磨损而已。”\n◆ 23 冷酷仙境——洞穴、蚂蟥、塔\n但这一瞬间过后，我还是清醒地认识到了自己仍然活着，仍在活生生地继续呼吸。作为其结果我可以感觉出头部的痛不可耐，感觉出泪水涟涟而下打湿脸颊\n手表指在凌晨四时十二分。天还未亮，晨报尚未派发，电车尚未启动，地上的人们应当还在酣然大睡\n我双手攥紧绳索，深深吸了口气，慢慢向上攀援。\n◆ 25 冷酷仙境——吃喝、象厂、圈套\n何谓Identity？就是每一个人由于过去积累的体验和记忆而造成的思维体系的主体性。简言之，称为心也未尝不可。\n◆ 29 冷酷仙境——湖水、近藤正臣、连裤袜\n2023/08/02发表想法 黑暗总是带来令人恐惧的想法\n黑暗这东西实在助长着各种各样的恐怖。\n◆ 32 世界尽头——垂死的影子\n一进地下室，粪便味首先扑鼻而来。由于没窗，臭气全都憋在里面。地下室大小如贮物室，床就占了三分之一，彻底消瘦下去的影子脸朝我这边躺在床上，床下可以瞥见陶瓷马桶。有一张东摇西晃的旧木桌，桌上点着一支已燃烧多时的蜡烛，此外见不到一个灯盏或暖气片。地面就是泥地，满屋子潮湿的寒气，几乎冷入骨髓。影子把毛毯一直拉到耳根，用毫无生气的眼睛一动不动地朝上看着我。老人说得不错，怕是活不长久了。\n你说这镇子上没有争夺没有怨恨没有欲望，这固然可钦可佩，若有力气，我也想为之鼓掌。可是，没有争夺没有怨恨没有欲望，无非等于说也就没有相反的东西，那便是快乐、幸福和爱情。正因为有绝望有幻灭有哀怨，才有喜悦可言。没有绝望的终极幸福是根本不存在的。这也就是我所说的自然\n◆ 33 冷酷仙境——雨日洗涤、出租车、鲍勃·迪伦\n人们的大多数行动，都是以自己仍将生存下去这一点为前提的，倘若去掉这一前提，便几乎没什么可做的了。\n“不过像你这样年轻的女孩喜欢听鲍勃·迪伦也真是稀罕。”“喜欢往日的音乐。鲍勃·迪伦、甲壳虫、大门、大鸟、吉米·亨德里克斯等等。”\n◆ 34 世界尽头——头骨\n你能够相信什么——无论是什么——这点显然是心的作用，懂么？假定你相信什么，相信的结果很可能是适得其反。如若适得其反，必然有失望随之而来。这便是心的活动。莫非你还有心？\n◆ 39 冷酷仙境——爆米花、吉姆爷、消失\n“人人可以进入，个个可以出去。”我说，“这也正是有限梦想的优越之处。进来时擦好皮鞋，出去时关紧门扇即可。谁都不例外\n","permalink":"https://ynikl.github.io/books/hard-boiled_wonderland_and_the_end_of_the_world/","summary":"“村上”味，文中主人公的孤独感 \u0026ndash; 或着与他人的疏离感， 很“素”的黄色剧情。\n冷酷仙境是身为\u0026quot;计算士\u0026quot;的我, 所处的科技发达的世界 世界尽头是身为\u0026quot;读梦人\u0026quot;的我, 所处的自我封闭的小镇 在冷酷仙境中，奇怪科学博士不经过同意对我的私自对“我”的脑袋进行改造， 导致我思维分裂，当前的第一思维只有 24 小时的寿命， 同时衍生出了第三思维 小镇 \u0026ndash; 世界尽头。\n在世界尽头中， 大家都失去了心，过着完全，且无欲无求的日子。主角另一个我“读梦人”， 刚和自己的影子（代表心和记忆）分开。 陷入是否要彻底摒弃自己 内心的困境。\n书中有一段影子劝说“我”离开世界尽头的话：\n“没有争夺没有怨恨没有欲望，无非等于说也就没有相反的东西，那便是快乐、幸福和爱情。正因为有绝望有幻灭有哀怨，才有喜悦可言。没有绝望的终极幸福是根本不存在的。”\n觉得最精彩的三句话:\n有的东西不过很久是不可能理解的，有的东西等到理解了又为时已晚。大多时候，我们不得不在尚未清楚认识自己的心的情况下选择行动，因而感到迷惘和困惑\n就是感觉很对而已\n“年龄一大，相信的东西就越来越少，”我说，“和牙齿磨损一个样。既非玩世不恭，又不是疑神疑鬼，只是磨损而已。”\n同样也是感觉描述的很对\n手表指在凌晨四时十二分。天还未亮，晨报尚未派发，电车尚未启动，地上的人们应当还在酣然大睡\n主人公正在深夜穿越洞穴去见博士的时候，看了眼时间描述。 感到人与人之间是疏离感\n引用豆瓣网友Lilian:\n村上春树的书中我也最爱这一本，影子那段应该是用了王尔德《渔夫和他的灵魂》的典故。\n下下一本看这个.\n书摘 《世界尽头与冷酷仙境（2023修订版）》 村上春树 22个笔记\n◆ 独角兽：心与意识之间（译序）\n小说以至文学的职责，就是把仅靠意识和逻辑无法彻底打捞的那类东西切切实实地不紧不慢地打捞下去。小说即是填埋心与意识之间的空隙的东西。\n◆ 4 世界尽头——图书馆\n她身上有一种东西在静静摇晃着我意识深处某种软绵绵的沉积物，但我不明白这到底意味着什么，语言已被葬入遥远的黑暗\n◆ 5 冷酷仙境——计算、进化、性欲\n就是无法自由选择。任何人都无法选择进化，它属于洪水雪崩地震一类，来临之前你不得而知，一旦临头又无可抗拒\n◆ 15 冷酷仙境——威士忌、拷问、屠格涅夫\n从全程马拉松所需时间到卫生纸一次所用长度，世上实在充满着各种各样的标准值\n提着购物篮的主妇络绎不绝地从我眼前走过。大葱和萝卜在超级商场购物袋口探头探脑。我不由得有点羡慕她们，她们既不会被砸坏冰箱，又不至于被刀子划破肚子，只消考虑一下葱和萝卜的烹饪方式和小孩的成绩，岁月即可风平浪静地流过。她们无需抱住独角兽头骨不放，脑袋不必遭受莫名其妙的密码和复杂程序的困扰。这便是普普通通的生活。\n◆ 17 冷酷仙境——世界尽头、查理·帕克、定时炸弹\n不知道。大概是想怪罪谁吧——把这种莫名其妙的勾当推到一个人头上，心里才舒服点\n你看上去很疲劳，而疲劳却又像是一种精力。\n◆ 18 世界尽头——读梦\n有的东西不过很久是不可能理解的，有的东西等到理解了又为时已晚。大多时候，我们不得不在尚未清楚认识自己的心的情况下选择行动，因而感到迷惘和困惑\n◆ 19 冷酷仙境——汉堡包、天际线、截止期限\n“人上了年纪，无可挽回的事情的数量就越来越多。” “所以疲劳？” “不错，”我说，“所以疲劳。”\n但我无论如何也不相信自己会真的成为一流角色。一流角色一般都具有坚定的自信，这也是成为一流的前提。倘若自己都不相信自己会成为一流，那么很难仅仅由于势之所趋而荣登一流宝座。","title":"世界尽头与冷酷仙境"},{"content":"总结:\ncmd 一个代码库多个启动程序, 清晰明了 internal 将外部依赖放置在 internal 外面, 避免内部逻辑代码直接引用. 比如, 数据持久层 MySQL 参考一下 ChatGPT 给我的答案:\n在 Go 语言中，使用 cmd 目录和 internal 目录的组合是一种常见的方式来组织项目结构。 cmd 目录通常包含可执行程序的入口点。这些可执行程序可以是应用程序的命令行接口、工具或测试二进制文件。每个子目录都包含一个可执行程序的主要文件，以及与其关联的其他文件。这种风格使得每个程序都可以独立编译和分发，并且可以让其它人轻松了解和使用它们。\n对于 internal 目录，其命名约束了该目录下的代码仅供内部使用。这意味着代码不应该由任何可以被外部依赖使用的包引用。这种风格允许对代码的控制更精细，因为程序员可以更好地控制哪些代码可以被其他人使用。\n使用这样的结构来组织 Go 项目有很多好处，包括：\n代码更易于维护和理解：使用独立的可执行程序和内部目录，可以让代码更清晰且更容易维护，使开发人员能够更好地理解代码的用途和位置。\n扩展性强：该结构使得每个可执行程序都可以相对独立地进行开发、测试和部署。这也使得代码更有扩展和修改的完整性。\n松耦合：使用 cmd 和 internal 目录方式可以大大增强代码间的松耦合度。这使得程序员可以更好地对代码变化做出反应，同时减少代码冲突及协调问题。\n综上所述，使用 cmd 和 internal 目录方式更易于开发和维护，是现代化 Go 应用程序中广受欢迎的项目结构设计方式。\n","permalink":"https://ynikl.github.io/blog/golang-project-layout-cmd/","summary":"总结:\ncmd 一个代码库多个启动程序, 清晰明了 internal 将外部依赖放置在 internal 外面, 避免内部逻辑代码直接引用. 比如, 数据持久层 MySQL 参考一下 ChatGPT 给我的答案:\n在 Go 语言中，使用 cmd 目录和 internal 目录的组合是一种常见的方式来组织项目结构。 cmd 目录通常包含可执行程序的入口点。这些可执行程序可以是应用程序的命令行接口、工具或测试二进制文件。每个子目录都包含一个可执行程序的主要文件，以及与其关联的其他文件。这种风格使得每个程序都可以独立编译和分发，并且可以让其它人轻松了解和使用它们。\n对于 internal 目录，其命名约束了该目录下的代码仅供内部使用。这意味着代码不应该由任何可以被外部依赖使用的包引用。这种风格允许对代码的控制更精细，因为程序员可以更好地控制哪些代码可以被其他人使用。\n使用这样的结构来组织 Go 项目有很多好处，包括：\n代码更易于维护和理解：使用独立的可执行程序和内部目录，可以让代码更清晰且更容易维护，使开发人员能够更好地理解代码的用途和位置。\n扩展性强：该结构使得每个可执行程序都可以相对独立地进行开发、测试和部署。这也使得代码更有扩展和修改的完整性。\n松耦合：使用 cmd 和 internal 目录方式可以大大增强代码间的松耦合度。这使得程序员可以更好地对代码变化做出反应，同时减少代码冲突及协调问题。\n综上所述，使用 cmd 和 internal 目录方式更易于开发和维护，是现代化 Go 应用程序中广受欢迎的项目结构设计方式。","title":"GO 代码结构中为什么老有 cmd 和 internal 文件夹"},{"content":"总结:\n先更新数据库, 再删除Key\n陈皓大佬的 缓存更新的套路 唉， 叹息\n","permalink":"https://ynikl.github.io/blog/redis-design-pattern/","summary":"总结:\n先更新数据库, 再删除Key\n陈皓大佬的 缓存更新的套路 唉， 叹息","title":"Redis 在缓存场景中的应用模式"},{"content":"总结 最大的收获是, 作为一个程序员现在去担心35岁会失业, 完全是多余的行为. 相反, 我现在 应该合理的规划自己45年, 3个阶段的职业生涯. 聚焦自己的长处. 当我35岁被迫离职之后, 我还是需要继续从事工作才能正常的存活下去, 那也是我的职业生涯的一部分.\n职场燃料\n可迁移的技能 有意义的经验 可持续的关系 四大黄金问题：\n1、我是否正在学习和成长？ 2、我是否正对某些人、现在的公司，乃至整个社会拥有影响力？ 3、我体验到乐趣了么？ 4、我是否得到适当的奖励，并创造了经济价值？\n书摘 《远见》 46个笔记\n◆ 前言 用新思维构建属于你的职业生涯\n于我而言，构建一段成功的职业生涯的目的并不仅在于找到你热爱的工作，而且是建立起你热爱的生活\n我们需要一种包容了生活中所有方面的工作哲学，它能够指导我们如何保持进取之心并追求成功，同时不牺牲家庭、朋友、健康、理想等珍贵的东西。本书讲的是如何建立一个长期的职业规划，因为众所周知，在二三十岁带来快乐的东西会随着职业生涯的发展而改变、演化。我们需要一套能伴随着我们一起变化和成长的工具，毕竟生活中的每个瞬间都可能让你的观念和目标发生重大的变化。\n◆ 01 远见思维：多行动，少忧虑\n各个年龄层的大部分人都将职场生活视为一份工作，而不是一段职业生涯\n他们大都将职业生涯当成一场短跑比赛，然而事实上，这是一场至少长达45年的马拉松\n。职业生涯由三个主要阶段组成，分别持续大约15年时间。\n在这一阶段，要为职业生涯打好基础并建立起良好的早期习惯。\n第二阶段是聚焦长板的时候。该阶段的首要目标是寻找自己的甜蜜区，即你所擅长的、所热爱的和这个世界所需要的这三者之间的交集。\n这种燃料有三个主要来源：可迁移技能、有意义的经验和持久的关系\n4．职业生涯并不是以线性或者可预测的方式发展的。你必须时刻保持探索和学习的状态\n．盘点职场清单，梳理你最有用处的技能、经验和关系。作为这份清单的一部分，你需要评估目前所处的职业生涯阶段，并描绘出职业生态系统。\n进行“100小时测试”并完成一份“个人时间档案”，从而了解你目前的时间投资状况。你是否将足够多的时间投入到让你变得最成功和快乐的事情上了呢\n◆ 02 3大阶段，聚焦45年职业生涯\n第一阶段是探索和弥补自身短板的时候。如果你是个糟糕的演讲者，那就去参加相关的培训课程。如果你对待团队成员过于强势或弱势，那就去参加领导力培训。学习要比纯粹的成功更重要。有时跌倒并不可怕，只要你能吸取教训，并将这些经验加以利用就行。\n着眼于核心长板，突破自我，更进一步吧。当你进入第二阶段时，补足短板已经难上加难了。更好的办法常常是专注于自己的长板，与能够帮助你、弥补你短板的人为伴。没有哪个卓越领袖可以面面俱到\n◆ 03 储备3大职场燃料\n职业生涯中存在三种基本形式的职场燃料，每一种对获得长远的成功都非常重要。可迁移技能；有意义的经验；持久的关系。\n有的时候，如果我要解决一个复杂的问题，就会做一个名为“给妈妈写信”的练习。我会真的起草一封给妈妈的信，解释眼前的问题和我想采取的行动。由于我妈妈未曾涉足过我的行业，所以这一练习就会迫使我使用简单明了的语言，从而让关键点呈现得尤为清晰。下次你遇到什么棘手的挑战时，也可以试试“给妈妈写信”\n罗里发现，在不同的环境中尝试不同的事情、试验不同的做事方法，这样能创造出更强的决策技能。如果我们一直用同一种方法做事，虽然会变得很有效率，但这种状态很脆弱。我们都知道，在遗传学中，一定程度的遗传多样性和基因突变会创造出更有活力的物种\n身边的人才。你是否在职业生涯早期遇见了顶尖的领导者和相关领域的专家？你应该问自己这样一个问题：“如果我自己创建公司，周围的人里，我愿意带上谁，以及他们是否会接受我的邀请？”\n。社会学家查尔斯·汉迪（Charles Handy）提出了一项很好的假设性练习：想象一下，当你40岁时不得不永远告别自己的工作，以一己之力创立一家公司，你会怎么做？这是一个很好的测试自主力的练习。\n◆ 04 5个数字，树立正确的职场思维\n2023/06/20发表想法 就算35程序员被迫退休，我还是需要选择新的工作，我的职业生涯并没有结束\n1．职业生涯的长度：用62减去你目前的年龄。算出的结果是你距离提前退休的年数。\n◆ 05 4大黄金问题，评估职业价值\n2023/06/20发表想法 盘点自己的职场燃料\n检查一下这三大主要的职场燃料吧： 可迁移技能； 有意义的经验； 持久的关系。\n如果你将自己当成一个学生，那就自然会找到老师。在找到了能推动你职业生涯前进的人时，你就要想尽办法帮助他们、为其所用，或者花时间与他们相处\n一旦找到了一名导师或支持者，首要任务就是欣赏他们，并与他们保持联系。时不时地给他们发条消息，告诉他们你现在的状况，分享你的成功和失败，向他们寻求建议。记住，对你的导师而言，这类沟通并不是什么负担，而是一种奖励。在职业生涯现阶段，谁是你的导师呢？谁可能会成为下一个呢？你是否做得够好，能够培养和赢得他们的支持呢\n我是否正在学习和成长？我是否正在对某些人、现在的公司，乃至整个社会拥有影响力？我体验到乐趣了吗？我是否得到了适当的奖励，并创造了经济价值？\n至于奖励，要记住不能光看基本的薪水，而要衡量完整的收入，包括基本薪水、福利、津贴、假期、弹性时间、报销或补贴，可能还要加上你在积累的所有权或股份的任何变化。\n◆ 06 100小时测试，合理投资时间\n如果你问一个资深的财务顾问，如何让你的投资获得最高的长期产出，他会告诉你，关键是“资产配置”。换句话说就是，你是否在正确的时间投资了正确的东西，即股票、债券、期货和其他资产类型？职业生涯也是一样的道理，只不过关键的变量是你如何投资时间\n因为我们平均每周都有大约100个小时是清醒的，所以你也可以轻而易举地画出这样一张图。\n像教学、社区活动和健身这样的高效能部分只要有一丁点儿变化，都会让我们发生巨大的改变。\n除了前摄时间迁移，与我交流过的成功人士大都将界限和专注列为应对忙碌职业生涯的策略的重点。\n◆ 07 职场路径向导，做出正确的职业决策\n我们要回答三个问题。你的职业理想是什么，或者至少假设一个你可能想要达到的目标。你目前手上有什么职场燃料？你需要什么职场燃料才能实现这个终极理想？\n但你需要确定它会给你的职业生涯带来什么样的特殊价值，思考它能否：增加你目前不具备的可迁移技能？帮助你重塑自我，改变职业生涯的方向？建立新的人际关系，并拓展职业生态系统？获得你目前没有的重要证书？加速你的探索步伐，即通过实践验证自己真正擅长和热爱的东西？\n对穆罕默德·阿舒尔而言，他的选择归根结底还是出于他一开始追求医学的理由：他希望自己能创造宝贵的遗产，渴望拥有积极的影响力，并追求财务的稳定性，成为医生可以让他拥有这一切。而“想吃”公司也能让他做到以上这几点，甚至可能做得更好，只不过他要走的是一条从未预见过的道路\n奥朗·霍夫曼还说：“当你有33%～66%的概率失败时，成长的速度也是最快的。要想精进，就得主动站在可能失败的立场上\n◆ 08 第一阶段：加添燃料，强势开局\n作为自己的品牌经理，请利用第一阶段培养好成功的职业生涯所需的技能和习惯。多多见识，全身心投入，成为某方面的专家，学习高效的沟通技巧，建立声望，寻求反馈，并创造价值。\n，所以每一次你都要说得一清二楚。其次，写下你的三个重点，加上用于佐证的事实和原因加强说服力。这意味着你既有观点，又有支撑它的证据。最后，直白地说出你希望听众接下来怎么做。\n你做的事情是否能提高公司的声誉，如发表一篇文章、参加一场颇受好评的演讲活动、赢得一个奖项等，或者是否为人才库增加了一些重要的新生力量？尽可能多地关注产出，而不是行动。光是做你的本职工作只能让你维系目前的职位和薪酬\n2023/06/22发表想法 身为领导也可以有机会拉进和底层员工的沟通，降低沟通成本，也方便员工的反馈\n戴夫的“一万杯咖啡”平台本质上就是一条双向通道。寻求建议的年轻人可以得到想要的东西，而专家领袖也能得偿所愿。优质公司已经开始利用这个平台与内部员工沟通。他们发现了这是一个绝佳的平台，可以为创新和产品开发项目收集研究材料，并且让高层管理者与公司内部的年轻员工联系在一起。各大校友协会也在利用“一万杯咖啡”让他们的机构与校友圈子保持联系，同时让学生和校友能够围绕着共同的兴趣爱好建立关系\n2023/06/22发表想法 我可以通过喝咖啡和各行各业了解一些行业的实践故事\n生活不是线性的，它无法在教室里学会，而是要在实践中学。而最好的作品是在你不工作的时候诞生的\n◆ 09 第二阶段：锚定甜蜜区，聚焦长板\n但是到最后，由于与这一领域缺乏深度的联系，各种困扰就会出现，这往往会发生在我们40多岁的时候。我们会感到越来越无法投入工作，竞争力不断下降。我们天生的创造力已经快耗尽了。我们无法关注所在领域发生的变化，因为我们已经脱轨。更年轻、更有创造力，而且更廉价的人很快就会取代我\n我们都见过那种始终高高在上的领导者，也见过另外一类似乎离地面只有几厘米、一直插手问题的领导者。不要一直做飞在高空的宇航员，也不要一直做飞在低空的扫地机\n◆ 10 第三阶段：优化长尾，发挥持续影响力\n在过去的一个世纪里，发达经济体的人口寿命增加了整整30年。正如贝特森指出的那样，这并不是让“老年时期”延长了，而是让我们在变老之前额外增加了一个生命阶段。\n◆ 11 如何做好职场父母\n米莱娜和保罗知道，紧张的全职工作和繁忙的家庭生活会扰乱他们的步伐。压力是会传染的。保罗说：“压力很大的父母会把它传递给孩子。面对一份像经营创业公司这样劳心费力的工作，大起大落的经历实在太多了。”这就是贝里夫妇为家庭时间划出明确界限，从而为生活留出一点空间和平静的原因之一。在晚上6—9点，他们一门心思扑在孩子身上，拒绝一切工作电话或电子邮件。这家人每天晚上都有一小时的时间专门用来一起读书\n◆ 13 如何应对职场危机\n每个人都有一个计划，直到被打掉牙的那一刻。迈克·泰森　世界重量级拳王\n◆ 尾声 工作的未来\n2023/06/25发表想法 程序员存在的意义，不仅仅是写代码，而是如何解决问题\n相比之下，如果重复性和程序性的工作正在没落，那么要求员工用自己的大脑思考，并得出有创造力的原创想法的职位，就会在自动化面前拥有相当大的优势了。这对艺术家、设计师或工程师而言是个好消息\n那么，机器的崛起对于我们长期的职业规划有什么启示呢？答案很简单：你需要确保能拥有一些与机器的工作不同或互补的人类技能。如果你做的事情全都是常规的计算、报告或执行，那么就该警惕了。如果你正在追求一份重复性很高而社交投入很低的工作，那么就真的应该捏一把汗了，你应当马上行动起来。如果无动于衷，那么在未来的某个时候，你就会被机器超越、取代或排斥\n2023/06/25发表想法 我突然意识到，我已经很久没有进入过这种状态了\n在《当下的幸福》（Flow： The Psychology of Optimal Experience）中，作者将心流描述为：“一个人的技能足以应付眼前挑战的一种感觉。此时，人的精力高度集中，以至于没有任何多余的注意力可以用来思考无关的事情或为其他问题忧心。这个人的自我意识消失了，而对时间的感觉也会发生扭曲。”一个处于“心流”状态的人表现为“用一种天衣无缝的无意识的熟练的方式行动，在其行为中产生流动的感觉\n2023/06/25发表想法 检查自己在哪里\n每年至少花一整天的时间反省和制订职业生涯的策略，进行职场盘点，尝试一些假设，确立目标，不断建立和更新你的职场燃料，监控你的进度\n","permalink":"https://ynikl.github.io/books/the-long-view/","summary":"总结 最大的收获是, 作为一个程序员现在去担心35岁会失业, 完全是多余的行为. 相反, 我现在 应该合理的规划自己45年, 3个阶段的职业生涯. 聚焦自己的长处. 当我35岁被迫离职之后, 我还是需要继续从事工作才能正常的存活下去, 那也是我的职业生涯的一部分.\n职场燃料\n可迁移的技能 有意义的经验 可持续的关系 四大黄金问题：\n1、我是否正在学习和成长？ 2、我是否正对某些人、现在的公司，乃至整个社会拥有影响力？ 3、我体验到乐趣了么？ 4、我是否得到适当的奖励，并创造了经济价值？\n书摘 《远见》 46个笔记\n◆ 前言 用新思维构建属于你的职业生涯\n于我而言，构建一段成功的职业生涯的目的并不仅在于找到你热爱的工作，而且是建立起你热爱的生活\n我们需要一种包容了生活中所有方面的工作哲学，它能够指导我们如何保持进取之心并追求成功，同时不牺牲家庭、朋友、健康、理想等珍贵的东西。本书讲的是如何建立一个长期的职业规划，因为众所周知，在二三十岁带来快乐的东西会随着职业生涯的发展而改变、演化。我们需要一套能伴随着我们一起变化和成长的工具，毕竟生活中的每个瞬间都可能让你的观念和目标发生重大的变化。\n◆ 01 远见思维：多行动，少忧虑\n各个年龄层的大部分人都将职场生活视为一份工作，而不是一段职业生涯\n他们大都将职业生涯当成一场短跑比赛，然而事实上，这是一场至少长达45年的马拉松\n。职业生涯由三个主要阶段组成，分别持续大约15年时间。\n在这一阶段，要为职业生涯打好基础并建立起良好的早期习惯。\n第二阶段是聚焦长板的时候。该阶段的首要目标是寻找自己的甜蜜区，即你所擅长的、所热爱的和这个世界所需要的这三者之间的交集。\n这种燃料有三个主要来源：可迁移技能、有意义的经验和持久的关系\n4．职业生涯并不是以线性或者可预测的方式发展的。你必须时刻保持探索和学习的状态\n．盘点职场清单，梳理你最有用处的技能、经验和关系。作为这份清单的一部分，你需要评估目前所处的职业生涯阶段，并描绘出职业生态系统。\n进行“100小时测试”并完成一份“个人时间档案”，从而了解你目前的时间投资状况。你是否将足够多的时间投入到让你变得最成功和快乐的事情上了呢\n◆ 02 3大阶段，聚焦45年职业生涯\n第一阶段是探索和弥补自身短板的时候。如果你是个糟糕的演讲者，那就去参加相关的培训课程。如果你对待团队成员过于强势或弱势，那就去参加领导力培训。学习要比纯粹的成功更重要。有时跌倒并不可怕，只要你能吸取教训，并将这些经验加以利用就行。\n着眼于核心长板，突破自我，更进一步吧。当你进入第二阶段时，补足短板已经难上加难了。更好的办法常常是专注于自己的长板，与能够帮助你、弥补你短板的人为伴。没有哪个卓越领袖可以面面俱到\n◆ 03 储备3大职场燃料\n职业生涯中存在三种基本形式的职场燃料，每一种对获得长远的成功都非常重要。可迁移技能；有意义的经验；持久的关系。\n有的时候，如果我要解决一个复杂的问题，就会做一个名为“给妈妈写信”的练习。我会真的起草一封给妈妈的信，解释眼前的问题和我想采取的行动。由于我妈妈未曾涉足过我的行业，所以这一练习就会迫使我使用简单明了的语言，从而让关键点呈现得尤为清晰。下次你遇到什么棘手的挑战时，也可以试试“给妈妈写信”\n罗里发现，在不同的环境中尝试不同的事情、试验不同的做事方法，这样能创造出更强的决策技能。如果我们一直用同一种方法做事，虽然会变得很有效率，但这种状态很脆弱。我们都知道，在遗传学中，一定程度的遗传多样性和基因突变会创造出更有活力的物种\n身边的人才。你是否在职业生涯早期遇见了顶尖的领导者和相关领域的专家？你应该问自己这样一个问题：“如果我自己创建公司，周围的人里，我愿意带上谁，以及他们是否会接受我的邀请？”\n。社会学家查尔斯·汉迪（Charles Handy）提出了一项很好的假设性练习：想象一下，当你40岁时不得不永远告别自己的工作，以一己之力创立一家公司，你会怎么做？这是一个很好的测试自主力的练习。\n◆ 04 5个数字，树立正确的职场思维\n2023/06/20发表想法 就算35程序员被迫退休，我还是需要选择新的工作，我的职业生涯并没有结束\n1．职业生涯的长度：用62减去你目前的年龄。算出的结果是你距离提前退休的年数。\n◆ 05 4大黄金问题，评估职业价值\n2023/06/20发表想法 盘点自己的职场燃料\n检查一下这三大主要的职场燃料吧： 可迁移技能； 有意义的经验； 持久的关系。","title":"The Long View"},{"content":"字符集和比较规则 我们上边说 utf8 字符集表示一个字符需要使用1~4个字节，但是我们常用的一些字符使用1~3个字节就可以表 示了。而在 MySQL 中字符集表示一个字符所用最大字节长度在某些方面会影响系统的存储和性能，所以设计 MySQL 的大叔偷偷的定义了两个概念:\u2028utf8mb3 :阉割过的 utf8 字符集，只使用1~3个字节表示字符。 utf8mb4 :正宗的 utf8 字符集，使用1~4个字节表示字符。 有一点需要大家十分的注意，在 MySQL 中 utf8 是 utf8mb3 的别名，所以之后在 MySQL 中提到 utf8 就意味着使 用1~3个字节来表示一个字符，如果大家有使用4字节编码一个字符的情况，比如存储一些emoji表情啥的，那请 使用 utf8mb4 。\nSHOW COLLATION LIKE \u0026lsquo;utf8_%\u0026rsquo;; 字符比较规则\nMySQL 有4个级别的字符集和比较规则，分别是: 服务器级别 数据库级别 表级别 列级别\n1 2 CREATE TABLE 表名 (列的信息) [[DEFAULT] CHARACTER SET 字符集名称] [COLLATE 比较规则名称] 1 2 3 CREATE TABLE 表名( 列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称], 其他列... ); InnoDB 而我们知道读写磁盘的速度非常慢，和内存读写差了几个数量级，所以当我 们想从表中获取某些记录时， InnoDB 存储引擎需要一条一条的把记录从磁盘上读出来么?不，那样会慢死， InnoDB 采取的方式是:将数据划分为若干个页，以页作为磁盘和内存之间交互的基本单位，InnoDB中页的大小 一般为 16 KB。也就是在一般情况下，一次最少从磁盘中读取16KB的内容到内存中，一次最少把内存中的16KB 内容刷新到磁盘中。\nInnoDB 存储引擎的大叔们到现在为止设计了4种不同类型的 行格式 ，分别是 Compact 、 Redundant 、 Dynamic 和 Compressed 行格式\n变长字段列表\n假设某个字符集中表示一个字符最多需要使用的字节数为 W ，也就是使用 SHOW CHARSET 语句的结果中的 Maxlen 列，比方说 utf8 字符集中的 W 就是 3 ， gbk 字符集中的 W 就是 2 ， ascii 字符集中的 W 就是 1。 对于变长类型 VARCHAR(M) 来说，这种类型表示能存储最多 M 个字符(注意是字符不是字节)，所以这个类 型能表示的字符串最多占用的字节数就是 M×W 。 假设它实际存储的字符串占用的字节数是 L 。 如果该可变字段允许存储的最大字节数( M×W )超过255字节并且真实存储的字节数( L ) 超过127字节，则使用2个字节，否则使用1个字节。\nNULL 值列表\n如果表中没有允许存储 NULL 的列，则 NULL 也不存在了，否则将每个允许存储 NULL 的列对应一个 二进制位，二进制位按照列的顺序逆序排列，二进制位表示的意义如下: 二进制位的值为 1 时，代表该列的值为 NULL 。 二进制位的值为 0 时，代表该列的值不为 NULL 。\nInnoDB 数据页的7个组成部分，知道了各个数据页可以组成一个 双向链表 ，而每个数据页 中的记录会按照主键值从小到大的顺序组成一个 单向链表 ，每个数据页都会为存储在它里边儿的记录生成一个 页目录 ，在通过主键查找某条记录的时候可以在 页目录 中使用二分法快速定位到对应的槽，然后再遍历该槽对 应分组中的记录即可快速找到指定的记录\n我们必须通过一些诸如记录移动的操作来始终保 证这个状态一直成立:下一个数据页中用户记录的主键值必须大于上一个页中用户记录的主键值。这个过程 我们也可以称为 页分裂 。\n聚簇索引, 数据索引\n二级索引\n联合索引\n对于同一个联合索引来说，虽然对多个列都进行范围查找时只能用到最左边那个索引列，但是如果左边的列是精 确查找，则右边的列可以进行范围查找 回表的代理\n需要回表的记录越多，使用二级索引的性能就越低， 甚至让某些查询宁愿使用全表扫描也不使用 二级索引 。比 方说 name 值在 Asa ~ Barlow 之间的用户记录数量占全部记录数量90%以上，那么如果使用 idx_name_birthday_phone_number 索引的话，有90%多的 id 值需要回表，这不是吃力不讨好么，还不如直接去 扫描聚簇索引(也就是全表扫描)。\n覆盖索引\n查询列表只包含索引列, 无需回表\n索引优化项 只为用于搜索、排序或分组的列创建索引 为列的基数大的列创建索引 (基数为集合中不同的个数) 索引列的类型尽量小 可以只对字符串值的前缀建立索引 只有索引列在比较表达式中单独出现才可以适用索引 为了尽可能少的让 聚簇索引 发生页面分裂和记录移位的情况，建议让主键拥有 AUTO_INCREMENT 属性。 定位并删除表中的重复和冗余索引 尽量使用 覆盖索引 进行查询，避免 回表 带来的性能损耗。 MySQL 的数据目录 一个库一个文件夹 frm 描述表结构的文件 ibd 独立表空间描述文件 系统数据库\nmysql 这个数据库贼核心，它存储了MySQL的用户账户和权限信息，一些存储过程、事件的定义信息，一些运行过 程中产生的日志信息，一些帮助信息以及时区信息等。\ninformation_schema 这个数据库保存着MySQL服务器维护的所有其他数据库的信息，比如有哪些表、哪些视图、哪些触发器、哪 些列、哪些索引吧啦吧啦。这些信息并不是真实的用户数据，而是一些描述性信息，有时候也称之为元数 据。\nperformance_schema 这个数据库里主要保存MySQL服务器运行过程中的一些状态信息，算是对MySQL服务器的一个性能监控。 包括统计最近执行了哪些语句，在执行过程的每个阶段都花费了多长时间，内存的使用情况等等信息。\nsys 这个数据库主要是通过视图的形式把 information_schema 和 performance_schema 结合起来，让程序员可以 更方便的了解MySQL服务器的一些性能信息。\nJOIN 笛卡尔积\n1 select * from t1, t2 连接过程\n选取代价的表, 作为驱动表, 先获取到查询结果 拿着驱动表获取到的数据, 到 被驱动表 中查询数据 驱动表中的记录即使在被驱动表中没有匹配的记录，也仍然需要加入到结果集, 产生了 外连接 和 内连接\n内连接 ( INNER JOIN) 驱动表中的记录在被驱动表中找不到匹配的记录，该记录不会加入到最后的结果 集，我们上边提到的连接都是所谓的 内连接 。\n外连接 ( RIGHT JOIN, LEFT JOIN ) 驱动表中的记录即使在被驱动表中没有匹配的记录，也仍然需要加入到结果集。\n在 MySQL 中，根据选取驱动表的不同，外连接仍然可以细分为2种:\n左外连接 选取左侧的表为驱动表。 右外连接 选取右侧的表为驱动表。 连接中的 where 和 ON\n不想把驱动表的所有的数据显示到结果集合中, 产生了 where 和 on\nwhere 会过滤所有不符合的记录 on 当外连接的时候, 会显示没有匹配的数据. 在内连接中 where 等价 on. on 被成为连接条件 连接的实现方式\n嵌套循环连接 利用索引加速连接 基于块的嵌套循环连接 (批量驱动表数据) 查看表的统计信息\n1 SELECT * FROM mysql.innodb_table_stats; 1 select * from mysql.innodb_index_stats 子查询结果集分类\n标量 单一值 SELECT (SELECT m1 FROM t1 LIMIT 1); 行子查询 单一多个值 SELECT * FROM t1 WHERE m1 = (SELECT MIN(m2) FROM t2); 列子查询 一列 SELECT * FROM t1 WHERE m1 IN (SELECT m2 FROM t2); 表子查询 SELECT * FROM t1 WHERE (m1, n1) IN (SELECT m2, n2 FROM t2); 事务 原子性 隔离性 一致性 (提供 check 校验) 通过其他三点保证 持久性 redo 体积小, 页码, 偏移量, 修改值 顺序写入 MVCC 事物并发问题\n脏读, 读到其他事务未提交的数据 (其他事务进行到一半) 脏写, 写到其他事务未提交的数据 不可重复读, 本事务第一次读到A值, 其他事务修改并提交B值, 本事务再读到B值 (不能重复读取到事务开始时的A值) 幻读, 事务开始后, 第二次范围查询的值与第一次范围查询不一致 ( 第一次查询AC, 其他事务插入B, 第二次查询 ABC)o MySQL 的隔离等级\nRead Uncommitted Read committed 以提交读 Repeadted Read Serializable trx_id roll_pointer 锁 一致性读 ( 普通读 ) 锁定读 S 共享锁 select ... lock in share mode; X 排他锁 select ... for update; 意向锁: 当要对行加锁时, 在表上面加的锁, 方便快速知道该表是否可能直接加表锁.\nIS、IX锁是表级锁，它们的提出仅仅为了在之后加表级别的S锁和X锁时可以快速判断表中的记录是否 被上锁，以避免用遍历的方式来查看表中有没有上锁的记录，也就是说其实IS锁和IX锁是兼容的，IX锁和IX锁是 兼容的\n行级锁\nLOCK_REC_NOT_GAP GAP Locks 锁住当前记录的前方数据间隙, 用于解决幻读问题(与MVCC同时起作用). 引入两个伪记录 Infimun, Supermum Next-Key Locks 记录锁 + 间隙锁 ","permalink":"https://ynikl.github.io/books/mysql-how-to-run/","summary":"字符集和比较规则 我们上边说 utf8 字符集表示一个字符需要使用1~4个字节，但是我们常用的一些字符使用1~3个字节就可以表 示了。而在 MySQL 中字符集表示一个字符所用最大字节长度在某些方面会影响系统的存储和性能，所以设计 MySQL 的大叔偷偷的定义了两个概念:\u2028utf8mb3 :阉割过的 utf8 字符集，只使用1~3个字节表示字符。 utf8mb4 :正宗的 utf8 字符集，使用1~4个字节表示字符。 有一点需要大家十分的注意，在 MySQL 中 utf8 是 utf8mb3 的别名，所以之后在 MySQL 中提到 utf8 就意味着使 用1~3个字节来表示一个字符，如果大家有使用4字节编码一个字符的情况，比如存储一些emoji表情啥的，那请 使用 utf8mb4 。\nSHOW COLLATION LIKE \u0026lsquo;utf8_%\u0026rsquo;; 字符比较规则\nMySQL 有4个级别的字符集和比较规则，分别是: 服务器级别 数据库级别 表级别 列级别\n1 2 CREATE TABLE 表名 (列的信息) [[DEFAULT] CHARACTER SET 字符集名称] [COLLATE 比较规则名称] 1 2 3 CREATE TABLE 表名( 列名 字符串类型 [CHARACTER SET 字符集名称] [COLLATE 比较规则名称], 其他列... ); InnoDB 而我们知道读写磁盘的速度非常慢，和内存读写差了几个数量级，所以当我 们想从表中获取某些记录时， InnoDB 存储引擎需要一条一条的把记录从磁盘上读出来么?","title":"MySQL 是怎样运行的"},{"content":"原先打算凭借着满腔热血骑着摩托车去体验一趟318吧. 但是, 读了这本书之后, 感觉藏地离我们还是很远. 不管是318, 219, 只在公路上驰骋, 就还是无法体验到他们生活, 观光客. 书中深入藏地, 让人感受到了藏民的信仰强烈. 给我印象最为深刻和触动的还是所画被挥刀砍废画画的手, 后面又遁入了佛门. 当人们越绝望的时候, 就会越需要信仰(\u0026hellip;)\n摘抄 ◆ 第十五章 阿嘎的神\n事实上，作为佛的授意者，活佛之所以受到人们的爱戴，不单从精神上他能给人指引光明，生活中，也在切实可靠地扶危济困，才会叫人由衷地敬爱。\n◆ 第十六章 多农喇嘛\n就这样四张大花脸站在院落里，开荒一样的，把多年不现人气的荒疏院落灌输进温暖，欢笑，明亮得可以捧起来的，那么多的欢笑。\n◆ 第十七章 福气\n兴奋的青年，举止间佯装得漫无目标，哈达却充满情意地在空中抖动，然后即以一种悠扬而坚定的姿态，落进我的怀里。\n◆ 第三十三章 上路\n女娃也不能直接从大路进入天葬场，我们得从寺庙背面绕过一座山进入。那个山不高，道路却极其曲折\n是的，人的生命内容除了日常生活之外，最需要做的是安顿灵魂，或说精神。事实上灵魂如果无所依靠，那的确会叫人彷徨。\n◆ 第四十二章 第一口血\n最大的孤独，是你的热情掉进周围的寂寞世界。你说什么，你唱什么，你呐喊什么，你即使自寻短见，都是你一个人。大地无动于衷。\n◆ 第四十七章 神医\n但视觉上的光明怎么能够消除我精神上的恐惧呢。除非我能强迫自己睡过去，要不这个夜晚将要怎样捱过？\n◆ 第五十二章 酥油里的孩子\n老师，理想跟愿望有一点小小的区别。理想是对于未来事物的合理想象；愿望是希望将来能够达到某种目标的想法！”\n◆ 第五十五章 雪山\n有时候分离就是拖着沉重的情感逃亡，送别就是拱手相让。是的，\n◆ 第五十九章 酥油病\n沉厚的电梯铁门在我们面前缓缓张开。狭小逼仄的空间，车轮进入电梯时与凹槽碰撞发出的震动，叫我的心也在相应震动。金属和金属撞击的时候，血和肉也在撞击。推手术车的护士脸上紧蒙蓝色口罩，眼睛雪亮，表情严肃，步步紧守，像是我会逃跑\n◆ 第七十七章 闭关\n抬起眼，我不知道要把目光往哪里放。望天，天巨大空虚，没有尽头。人在它面前，蝼蚁不如。风很大，也很紧，抓住头发乱扯，像一群发狂的蝙蝠，要抓破人的皮肉，叫身体流血。 一头瘫坐在地，动不得身，想不起什么。没有那种漫浪或者悲伤的回忆。只是呆呆地坐着\n","permalink":"https://ynikl.github.io/books/shuyou/","summary":"原先打算凭借着满腔热血骑着摩托车去体验一趟318吧. 但是, 读了这本书之后, 感觉藏地离我们还是很远. 不管是318, 219, 只在公路上驰骋, 就还是无法体验到他们生活, 观光客. 书中深入藏地, 让人感受到了藏民的信仰强烈. 给我印象最为深刻和触动的还是所画被挥刀砍废画画的手, 后面又遁入了佛门. 当人们越绝望的时候, 就会越需要信仰(\u0026hellip;)\n摘抄 ◆ 第十五章 阿嘎的神\n事实上，作为佛的授意者，活佛之所以受到人们的爱戴，不单从精神上他能给人指引光明，生活中，也在切实可靠地扶危济困，才会叫人由衷地敬爱。\n◆ 第十六章 多农喇嘛\n就这样四张大花脸站在院落里，开荒一样的，把多年不现人气的荒疏院落灌输进温暖，欢笑，明亮得可以捧起来的，那么多的欢笑。\n◆ 第十七章 福气\n兴奋的青年，举止间佯装得漫无目标，哈达却充满情意地在空中抖动，然后即以一种悠扬而坚定的姿态，落进我的怀里。\n◆ 第三十三章 上路\n女娃也不能直接从大路进入天葬场，我们得从寺庙背面绕过一座山进入。那个山不高，道路却极其曲折\n是的，人的生命内容除了日常生活之外，最需要做的是安顿灵魂，或说精神。事实上灵魂如果无所依靠，那的确会叫人彷徨。\n◆ 第四十二章 第一口血\n最大的孤独，是你的热情掉进周围的寂寞世界。你说什么，你唱什么，你呐喊什么，你即使自寻短见，都是你一个人。大地无动于衷。\n◆ 第四十七章 神医\n但视觉上的光明怎么能够消除我精神上的恐惧呢。除非我能强迫自己睡过去，要不这个夜晚将要怎样捱过？\n◆ 第五十二章 酥油里的孩子\n老师，理想跟愿望有一点小小的区别。理想是对于未来事物的合理想象；愿望是希望将来能够达到某种目标的想法！”\n◆ 第五十五章 雪山\n有时候分离就是拖着沉重的情感逃亡，送别就是拱手相让。是的，\n◆ 第五十九章 酥油病\n沉厚的电梯铁门在我们面前缓缓张开。狭小逼仄的空间，车轮进入电梯时与凹槽碰撞发出的震动，叫我的心也在相应震动。金属和金属撞击的时候，血和肉也在撞击。推手术车的护士脸上紧蒙蓝色口罩，眼睛雪亮，表情严肃，步步紧守，像是我会逃跑\n◆ 第七十七章 闭关\n抬起眼，我不知道要把目光往哪里放。望天，天巨大空虚，没有尽头。人在它面前，蝼蚁不如。风很大，也很紧，抓住头发乱扯，像一群发狂的蝙蝠，要抓破人的皮肉，叫身体流血。 一头瘫坐在地，动不得身，想不起什么。没有那种漫浪或者悲伤的回忆。只是呆呆地坐着","title":"酥油"},{"content":"返向读一遍陈皓老师在 coolshell 上发布的文档. 并简单做一下读后记录.\nETCD的内存问题\n一个清晰的排查 Etcd 内存占用过大问题 一把梭：REST API 全用 POST\nRESTFul 为通用惯用标准, 切有各大厂的指导文档背书. 身为程序员要对自己的代码负责, 有程序员的操守, 反对\u0026quot;优雅不能当饭吃\u0026quot; 反对讨论问题使用: 讨论都是在主观的“我觉得”，“我认为”，“感觉还好”…… TCP 的那些事儿 (上) tcp_syncookies 可以用于防止 sync 攻击 seq_num 是根传输字节相关 ISN 的与一个假时钟相关, 每4微妙加一 TCP 的那些事儿（下）\n我做系统架构的一些原则\n完备性比性能更重要 控制逻辑进行收口 服从标准, 规范, 最佳实践 双向显示文本\n如何做一个有质量的技术分享\n描述好问题 怎么做, 为什么 最佳实践和方法总结 GO编程模式：PIPELINE\n在今天，流式处理，函数式编程，以及应用网关对微服务进行简单的API编排， 其实都是受pipeline这种技术方式的影响，Pipeline这种技术在可以很容易的把代码按单一 职责的原则拆分成多个高内聚低耦合的小模块，然后可以很方便地拼装起来去完成比较复杂 的功能。\ngolang 的 Pipeline 代码大家都会写, 但是我一直没有思考过为什么要这样子写.\nGO编程模式：委托和反转控制\n把控制逻辑与业务逻辑分层 未完待续\u0026hellip;\n","permalink":"https://ynikl.github.io/blog/reading-from-coolshell/","summary":"返向读一遍陈皓老师在 coolshell 上发布的文档. 并简单做一下读后记录.\nETCD的内存问题\n一个清晰的排查 Etcd 内存占用过大问题 一把梭：REST API 全用 POST\nRESTFul 为通用惯用标准, 切有各大厂的指导文档背书. 身为程序员要对自己的代码负责, 有程序员的操守, 反对\u0026quot;优雅不能当饭吃\u0026quot; 反对讨论问题使用: 讨论都是在主观的“我觉得”，“我认为”，“感觉还好”…… TCP 的那些事儿 (上) tcp_syncookies 可以用于防止 sync 攻击 seq_num 是根传输字节相关 ISN 的与一个假时钟相关, 每4微妙加一 TCP 的那些事儿（下）\n我做系统架构的一些原则\n完备性比性能更重要 控制逻辑进行收口 服从标准, 规范, 最佳实践 双向显示文本\n如何做一个有质量的技术分享\n描述好问题 怎么做, 为什么 最佳实践和方法总结 GO编程模式：PIPELINE\n在今天，流式处理，函数式编程，以及应用网关对微服务进行简单的API编排， 其实都是受pipeline这种技术方式的影响，Pipeline这种技术在可以很容易的把代码按单一 职责的原则拆分成多个高内聚低耦合的小模块，然后可以很方便地拼装起来去完成比较复杂 的功能。\ngolang 的 Pipeline 代码大家都会写, 但是我一直没有思考过为什么要这样子写.\nGO编程模式：委托和反转控制\n把控制逻辑与业务逻辑分层 未完待续\u0026hellip;","title":"返读 Coolshell 记录"},{"content":"variable shadowing init 弊端\n初始化 error 的处理, 不应该是包自己用 panic 捕获错误终止程序，而是调用来决定是否应该终止程序 影响测试， 会在测试之前执行 获取执行数据，需要通过全局变量（ 全局变量弊端：1. 会被修改，2. 影响测试） 什么时候使用\n避免错误产生没有err 不会产生全局变量 getters and setters 如果只是简单获取值的话，就不应该用\n方法命名\n获取值 Balance 而不是 （ GetBalance) 设置值 SetBalance interface pollution interface 的价值\n通用的方法（ 如排序） 解耦 限制实体行为（仅提供特定方法） 只要在当我们真正用到的时候才去创建\nwe should create an interface when we need it, not when we foresee that we could need it\ninterface 抽象 是通过发现的，而不是通过创造的\n生产端接口声明，与实现放在同一个包中 消费端接口声明，与使用interface的放在同一个包中 Interface 是通过发现的，符合使用者的需求（与其他语言最大区别就是 Interface 为隐式实现）所以大部分接口应该是是消费端接口声明。\n准备库定义生产端声明，可以提供自定义接口的能力。 生产端接口要尽量简洁。\nreturn interfaceBe conservative in what you do, be liberal in fr Be conservative in what you do, be liberal in what you accept from others.\n对自己依赖别人的功能保守，对自己赋予别人的能力保持开放\n尽量接收 interface 尽量返回 结构体 正常 consumer 定义接口， 就会造成循环引用\n如果 是现房new 的时候返回 interface 就会变成，由实现方来限制了限制了客户端使用接口消费的抽象组合方式\nConfuse Generics 限制 constraint， 可以是一下两种\n接口 任意类型 ~int， 限制 底层类型\nembbding 错误使用将底层的方法公开出来\ntype client struct { sync.Mutex // 错误地将 Lock() 和 Unlock() 方法暴露给客户端了 protectData map[string]string }\nFunctional Options Parttern\n定义闭包声明函数，更新和修改配置， 有几个好处\n使用默认配置时， 避免声明空的 cfg 参数结构体 通过闭包延迟 err 的处理， 聚合在客户端内部 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 type options struct { port *int } type Option func(opt options) error func WithPort(port int) Option { return func(opt options) error { opt.port = port } } func NewServer(c client, opts ...Option) { var cfg options for _, op := range opts { err := op(cfg) if err != nil { } } } func main() { NewServer(http.DefaultClient, WihtPort(8080)) } 12 Project Organization project-layout\nWe should minimize what should be exported as much as possible to reduce the coupling between pack-\nages and keep unnecessary exported elements hidden.\n包的成员，非必要不公开。\n13 Utility Package 创建类似与 common ， utility, base， shared 等没有意义的包名，共享一些工具类代码。\n14 Ignoring Package name collisions 避免包名和变量名冲突\n使用不同的变量名redisClient 对引用的包取别名 redisPkg 15 Missing code documentation exported 的公开变量 都需要进行文档备注 Deprecated: // Package 的说明应该在 doc.go 文件 // Package 包名开头 与 Go 代码声明有空行间隔 会被忽略 16 Not using linters 17 Creating confusion with octal literal 错误使用 010， 表示八进制\n0b 二进制 0x 十六进制 0i 虚数 18 Integer Overflow 整形溢出， 多注意\n19 floating points 20 slice length and capactity the slice length is the number of available elements in the slice,\nwhereas the slice capacity is the number of elements in the backing arra\n长度是 slice 可用的长度， 容量是slice底层数据的长度\n22 slice empty and nil slice nil\n不需要分配内存， nil slice 是 empty slice empty slice\n长度等于 0 23 check slice by nil 通过 list == nil 判断 slice 是否为空，是错误的\n要通过长度判断 len(list)判断 slice 是否为空。\n24 copy slice 赋值数量为最小两个slice 之间最小长度\n复制之前应该，注意复制的目标数组的长度\nsrc := []int{0, 1, 2} dst := make([]int, len(src)) copy(dst, src) fmt.Println(dst)\n不同的复制方式\nsrc := []int{0, 1, 2} dst := append([]int(nil), src\u0026hellip;)\n25 切片更新添加数据副作用 s1 := []int{1,2,3} s2 := s1[1:2] s3 := append(s2, 10}\n// Output: // s1 [1, 2, 10]\n26 slice 导致内存泄露 使用切变承接输入的大数据数组， 获取小部分数据。\n小数据的slice， 仍然会指向大数组的空间，内存占用仍会较高。\n需要重新声明 slice， 使用copy 复制需要的数据。\nGC 不会回收 slice 已经分配但没有使用的空间。\n27 Map 初始化 load factor overflowed\nmake(map, hint_size) 初始化 map, 带预计大小, 可以避免map 在插入的时候, 需要复制.\n获取足够的内存 重新平衡分配元素到各个bucket 28 map memory leaks A map can only grow and have more buckets; it never shrinks.\nGC 可以回收 map 的元素, 但是无法回收 map 本身占用的空间大小.\n解决方法\n创建副本, 创建一个新的map, 复制现有的值, 释放原有的map map的value 存放 指针, 缩小每一个空的bucket 占用的空间大小 (指针空间 8bytes or 4bytes) 29 值比较  Booleans—Compare whether two Booleans are equal.\n Numerics (int, float, and complex types)—Compare whether two numerics are equal.\nStrings—Compare whether two strings are equal.\n Channels—Compare whether two channels were created by the same call to\nmake or if both are nil.\n Interfaces—Compare whether two interfaces have identical dynamic types and\nequal dynamic values or if both are nil.\n Pointers—Compare whether two pointers point to the same value in memory or\nif both are nil.\n Structs and arrays—Compare whether they are composed of similar types.\n对比方法\n简单通过 == 对比, 无法处理复杂类型 reflect.DeepEuqal 有性能瓶颈 自己实现对比方法, 参考已经有标准库, 如bytes.Compare 30 copy value in range 在 range 遍历的过程中, 是值复制\n31 range expresion evaluated for i, v := range exp exp 针对不同类型表达式, 会在 开始执行 loop 之前, 对exp 进行复制\nslice range 会在开始range的时候, 计算slice 的长度和容量, 并创建一个临时的 slice\n![[Pasted image 20230221093451.png]]\n1 2 3 4 5 s := []int{0, 1, 2} for i := 0; i \u0026lt; len(s); i++ { s = append(s, 10) } 会无限执行下去, 因为 len 是每次执行的时候都会计算一次\nchannel 与slice 一样, 同样会在开始的时候为 channel 创建一个临时变量.\n1 2 3 4 5 6 ch := ch1 for v := range ch { fmt.Println(v) ch = ch2 } 这个在range 这替换的动作是无效的, range 的仍然是ch1\narray 1 2 3 4 5 6 7 a := [3]int{0, 1, 2} for i, v := range a { a[2] = 10 if i == 2 { fmt.Println(v) } } 会对 a 整个数据进行复制, 输出是2, 原数组不变\n修改原数组方案\n使用 index , 访问和修改数据 对数据取指针方法 for i, v := range \u0026amp;a 32 range 过程中使用 遍历元素的指针 1 2 3 for _, customer := range customers { s.m[customer.ID] = \u0026amp;customer } \u0026amp;customer 指向的是 range 复制出来的内存\n33 对 map 数据的错误消费 依赖 map 的顺序， map 的数据是无序的 在遍历过程中继续插入新的数据， 结果是不可预测的。有可能会被遍历到，也有可能会被跳过 34 break 层的错误理解 break 对 for, select, switch 三个语句的最内层生效\n1 2 3 4 5 6 for i := 0; i \u0026lt; 5; i++ { switch i { case 2: break } } 没有中断， 结果正常遍历。\n可以使用 Label 达到中断 for 的方式， 标准库也经常采用该种写法。\n35 在 for 中使用 defer 36 没有理解 rune string 是一个结构体, 有两个字段\nA pointer to an immutable byte sequence 长度 Unicode 是字符集 Utf-8 是编码方式\nRune 是 Unicode 的字符集表示，相当于一个字符, golang 使用utf-8编码方式， 所以一个rune 是1-4个字节 bytes.\n1 type rune = int32 len()函数返回的是 bytes 的长度\n37 对 string 的错误遍历 获取字符串的字符个数 utf8.RuneCountInString\n获取字符串的第i个字符\n如果是纯ascii码字符串，直接通过str[i]获取。 获取出来的是 bytes 编码需要转成字符 如果存在非ascii 字符 通过 for i, c := range str遍历获取到第 i 个 rune 字符， 和 c 字符编码 通过索引获取， 需要先强制转化成 []rune(str)[i] 可以直接获取字符串的第 i 个 rune 字符 38 对 TrimRight / TrimSuffix 混淆 strings.TrimRight 是从右到开始移除所有符合的字符集，直到遇到第一个不符合的字符 TrimSuffix 是移除整个字符串\n39 使用 += 字符串拼接 使用 += 拼接一系列字符串，会造成内存分配频繁，因为每一个字串都是不变的。 推荐使用 strings.Builder\n40 冗余转化成字符串 所有的字符串操作 strings 包， 在 bytes 包都会有相对应的替换方法，没有必要将 bytes 转化成 string 在进行操作。\n41 subString 导致内存泄露 substring 生成的 新字符串与旧字符串指向同一块内存，原理同slice\n42 方法值接受者和指针接收者 pointer receiver\n需要修改对象数据 接收者包含不能copy的对象，如 sync 接收者为大对象 value receiver\n不修改接收者 接收者为 map, channel 接收者为小对象， 基础类型 43 命名的返回参数 用处\n增加代码可读性， 如果无法增加可读性，就不需要命名 提前初始化变量 使用 naked return 的提前是函数短小，太长的函数会降低可读性，需要一直记住变量 不应改混着使用 naked return 和 带参数return 44 返回了未赋值的命名 err 1 2 3 4 5 6 func name(ctx context.Context) (a,b int, err error) { if ctx.Err() != nil { // err is nil return 0, 0, err } } 45 interface 返回 non-nil 1 2 3 4 5 func Validate() error { var m *MutilErrorStruct return m } // 返回值 err != nil 永远为true nil 的结构体， 在返回 interface 的函数之后就永远不等于 nil ![[Pasted image 20230309221827.png]]\n解决方案，永远明确地返回 nil\n1 2 3 4 if m != nil { return m } return nil 46 不用使用文件名作为参数 使用 io.Reader 做为参数, 替代文件有两种好处\n方法的具体实现可以与数据源的类型无关, 文件, 或者http, 或者sock 方便测试, 无法因为测试而创建一堆文件 47 defer 参数的计算 defer 在代码执行到的时候会, 立刻使用当前函数的参数的变量值, 包括方法的接收者作为参数.\n48 panic 什么时候应该panic\na pure programmer error ( 程序员编码错误 ) 依赖初始化失败 49 Error Wrap 什么时候使用 Error Wrap\n添加额外的信息 标记为某一特定的错误类型 处理的信息的多种选择\n直接返回错误 自定义错误类型 fmt.Errorf + %w wrap 错误 fmt.Errorf + %v 包含错误文字 50 用 as 检查Err类型 通过 wrap 的 error 需要使用 error.As(err, \u0026amp;targetErrorStruct{}) 判断是否为目标结构体\n51 erros.Is 制定 error 错误信息的原则:\n可以预测的错误使用制定错误变量 ErrFoo = errors.New(\u0026quot;foo\u0026quot;) 无法预测的错误,使用指定错误类型 type BarError struct 使用 error.Is(err, sql.ErrNoRows) 判断错误是否为指定的错误类型.\n52 多次处理同一个错误 一个错误多次重复打日志, 会让调试更加艰难.\n打印错误也是一种错误的处理方式. 所有, 要么选择打印错误, 要么选择向上抛出错误. 不要两者同时.\n向上层函数抛出错误的时候, 需要通过 WrapErr 附加上当前的额外错误信息\n53 明确忽略的 error 使用 _ 接收返回的error, 明确表示不处理, 错误\n1 2 _ = funcReturnErr() 建议再加上注释说明为什么不处理函数错误\n54 处理 defer 函数返回的错误 记得要处理 defer 的函数返回的错误, 至少需要显示忽略\n55 并发和并行 并发的重点是可以处理多项事务的设计结构, 并行是多项事务可以同时进行处理.\nConcurrency is about dealing with lots of things at once. Parallelism is about doing lots of things at once. —Rob Pike\n并发并不代表多件事务真正意义上的\u0026quot;同时进行\u0026quot;, 同时进行是并行, 并发主要处理阻塞的流程 优化\n56 并发 不一定更快 过小的切分任务, 会让时间消耗在创建和消费协程上, 并没有真正的提高\u0026quot;并行\u0026quot;能力.\n57 通道和互斥锁 通道的底层也是互斥锁.\n当协程之间需要传递信息, 或者数据, 使用通道 \u0026ndash; 互斥锁的更高抽象\n58 数据竞争(data race) 和条件竞争(race condition) 数据竞争:\n同时有多个协程同时访问统一块内存, 且至少有一个协程正在写入数据\n条件竞争:\n事件发生的先后顺序不可控制, 无法控制协程的执行先后顺序, 导致结果不可控.\n59 区分任务类型 (计算密集或者 I/O密集型) 如果是计算密集型, goroutine 的并发上线应该采用 runtime.GOMAXPROCS(0)\n过多的协程, 可能导致创建过得的 M, 就会出现多个 M 在一个 cpu 核心 中疯狂切换.\n60 Conetxt Deadline 设置超时时间 context.WithTimeout 传递取消消息 context.WithCancel 传递值 context.WithValue context.Err 会返回解释, 为何context.Done关闭 传递值时, key 不直接使用 string 是为了避免, 冲突覆盖.\nThe provided key must be comparable and should not be of type string or any other built-in type to avoid collisions between packages using context. Users of WithValue should define their own types for keys. To avoid allocating when assigning to an interface{}, context keys often have concrete type struct{}. Alternatively, exported context key variables\u0026rsquo; static type should be a pointer or interface.\n疑惑的时候就使用 context.TODO\nWhen in doubt about which context to use, we should use context.TODO() instead of passing an empty context with context.Background.\n61 传递 context 62 关心 goroutine 什么时候停止 关心 goroutine 持有的文件描述符是否被正确的关闭 注意协程持有的资源\n63 注意 goroutine 获取循环变量 64 select 是随机, case 先后顺序不保证优先级. 65 消息型 channel 消息型 channel 的数据结构应该使用 make(chan struct{}) 空结构体, 编程惯例, 提醒 接收者, 传递的消息是没有任何意义的.\n66 使用 nil channel 在使用 select 的时候, 当 channel 已经 close 掉后, 就可以将channel 设置成 nil , 让该 case 条件进入堵塞状态\n67 分清 buffed and unbeffed channel 的使用场景 68 string format 的副作用 如果有协程正在更新 ctx, context的值的话, 就会出现数据竞争, fmt 读取ctx的内部值\nctxKey := fmt.Sprintf(\u0026quot;%v\u0026quot;, ctx)\nfmt 会读取 string() 的方法, 应注意该方法中的读写锁是否会造成死锁.\n69 append 的数据竞争 slice 更新和读取不通的index时不会出问题.\nmap 操作时存在更新, 无论key是否相同有可能产生冲突. 因为, map 的底层是数组, 不同的 key 也有可能指向相同的数组\n70 71 wg.Add 在协程开启前 72 sycn.cond 73 errgroup 74 sync 包不能被复制, 要小心值复制 75 time.Duration 的时间单位是 纳秒 标准使用\n1 1 * time.Second 76 time.Afte 导致内存泄露 方法内部实现的协程, 需要等到时间到了, 才会释放资源, 所以不要在循环中调用.\n77 结构体 序列化和反序列化 结构体嵌套 直接嵌入未命名的结构体, 可能会使用sub embedding struct 的序列化接口方法, 导致bug\n1 2 3 4 type a struct { ID int time.Time } a 结构体再序列化的时候会使用 time.Time 的MarshalJSON()的方法\n使用命名结构体接入 重新实现接口方法 time 的对比 time 内部包含 wall clock 和 montonic clock 字段, 返回序列化后的 time 对象, 不包含 montonic clock 直接对比, 会不相同\nThe general rule is that the wall clock is for telling time and the monotonic clock is for measuring time.\n可以使用 time.Equal 方法 或者使用 Truncate 移除 monotonic clock 数值 map map[string]any 数值反序列化后类型都为 float64\n78 SQL 错误 sql.Open sql.Open() 不一定是与数据库服务建立了连接, 具体还是需要看 驱动 实现, 可以通过 ping 方法, 强制建立连接\nsql 连接池的配置 sql 连接状态分两种\n使用者 idle 等待使用, 已创建但没有再使用 sql 连接池配置\nSetMaxOpenConns 最大连接数量, 考虑到下游服务的性能 SetMaxIdleConn 在并发高时适当增加, 避免创建耗时 SetConnMaxIdleTime 并发增加之后, 维持多久销毁连接 SetConnMaxLifetime 不希望一个连接持续过久 sql.prepared 语句 高效: 更加高效, 避免 SQL 重复编译 安全: 避免SQL注入 string 处理 null 值 使用指针声明 *string 使用 sql.NullString 类型 rows.Err 错误捕获 79 资源关闭 实现 io.Closer 的临时资源需要 及时 close\nhttp 请求的客户端, respBody 需要close sql.Rows os.File 80 http handle 忘记 return 81 使用 默认http client 和 server client http 的请求步骤\ndial tls 握手 send read header read body 4个超时配置\nnet.Dialer.Timeout 建立连接超时 http.Transport.TLSHandshakeTimeout TLS 握手超时 http.Transport.ResponseHeaderTimeout 等待服务返回头此时 http.Client.Timeout 这个请求的时间限制, from 上述步骤1到5 net/http: request canceled (Client.Timeout exceeded while awaiting headers) 报错 服务端返回超时, 在step4, 读取头时等待超时.\nhttp 连接池\nhttp.Transport.IdleConnTimeout http.Transport.MaxIdleConns http.Transport.MaxIdleConnsPerHost 默认为2, 严重影响并发 server 1 2 server := \u0026amp;http.Server{} server.Serve(listener) 服务端步骤\n等待请求 TLS read request headers read request body write response 3个 timeout\nhttp.Sever.ReadHeadersTimeout http.Server.ReadTimeout http.TimeoutHandler http.Server.IdleTimeout keep-alive 请求可以保持多久 TimeoutHanlder 包裹 handle 当处理超时时,返回503\n如果都没有配置超时的话, 服务器就没有超时机制, 会一直等待客户端主动关闭连接. 当服务暴露给不信任客户端时, 至少需要配置 ReadTimeout 和 TimeoutHandler 避免资源被耗尽.\n82 对单元测试进行分类 避免执行不需要单元测试, 提升测试效率.\n使用 tag go test --tags=integration -v . 根据环境变量, 使用testing.Skip() 显示调用为什么跳过测试 使用 testing.Short() 判断当前执行模式, 跳过需要长时间耗时的测试 go test -short -v . 83 测试启用 \u0026ndash;race 编译时带 --race 会增加程序消耗\n内存提高5-10倍 运行时间2-20倍 避免在生产环境使用, 在CI的时候使用\n84 test 的执行模式 parallel\ntesting.T.Parallel() 会先暂停, 等待顺序测试任务完成后, 继续执行.\ngo test - parallel 16 . 并发执行测试\nshuffle\ngo test -shuffle=on -v . 打乱 go test 函数的执行顺序\n85 Table-driven 表驱动测试 t.Run(name, func(t *testing.T) {})\n执行子测试 go test -run=TestFoo/subtest_1 -v\n86 避免测试中的 sleep 在并发场景下, 我们使用 time.Sleep 模拟, 任务处理耗时, 但是我们不知道时间是否足够\n使用多次尝试校验, retry mock 对象使用消息通知校验 87 处理依赖时间测试 改变依赖, 造假数据 修改方法, 让接口传入时间 88 单测工具包 http 相关\nhttptest.NewServer httptest.NewRequest iotest\n89 正确使用 benchmark 测试 忽略耗时函数 忽略对硬件底层 90 单元测试的拓展功能 TestMain 从不同的包测试 ( 重视包对外的开放功能) cover 单测覆盖率 91 CPU cache cpu 三级缓存\ncpu cache Line 加载的 locality of reference, 局部性和相关性 cache line 一般 64 bytes, CPU 内存加载预测\nUnit stride Constant stride Non-Unit stride 92 通过 padding 避免并发操作相同内存复制到不同cpu core 中 cpu 会有cache line 加载数据, 如果两个协程, 并发操作的不同的数据字段(在同一块cache line 大小内存中) 内存中. 这块内存会被同时加载到不同的cpu 核心的缓存中. 因为cpu MESI保证内存一致, 一边更新另一边会失效.\nWhen a cache line is shared across multiple cores and at least one goroutine is a writer, the entire cache line is invalidated.\n使用 pading , 将同时操作的内存分到不同cache line 中\n1 2 3 4 5 type result struct { sumA int64 _ [56]byte // padding sumB int64 } 93 考虑指令集优化 94 内存对齐 内存对齐可以减少结构体占用的内存大小.\n结构体的内存对齐系数, 为各字段中最大的系数\n官方文档\n95 stack \u0026amp;\u0026amp; heap 栈内存是不需要GC, 只是会根据栈的大小范围表示为不可用, 再次使用的时候, 新值直接覆盖旧值.\n当变量内存分配到栈上, 且函数退出, 变量引用表示不可用 \u0026ndash; 无法再次访问, 所以需要 堆.\n堆的使用成本更大, 需要GC, 内存分配成本也更大.\n96 优化内存分配 string.Builder 代替 + 避免 []byte 转 string slice map 的初始化 结构体内存对齐 改变 interface 声明, 避免内存逃逸 sync.Pool 编译器优化, 避免 bytes-to-string 转化 97 编译器函数内联 inline. 当调用的子函数较为简单时, 编译器会是将调用函数的内部实现嵌入当前调用点.\n避免函数的调用成本 可以使编译器进一步优化 (比如, 内存逃逸 直接分配到栈中) 当子函数过为复杂时, 可以抽出子函数的复杂部分为另一个调用函数实现 mid inline. 让中间函数嵌入调用点.\n98 使用分析工具 pprof trace 99 GC marks and sweep\n遍历所有对象, 标记是否在使用 遍历所以对象, 清除没有在使用的对象 GOGC 配置 GC 的敏感度, 当 GOGC=100 时, 当堆内存容量涨100%时触发GC.\n通过 GOGC 进行优化 uber 调优原文 GOGC 调优 100 Docker 和 K8s 资源分配对并发性能的影响 引用 http://github.com/uber-go/automaxprocs 自动设置 GOPROMAX\n","permalink":"https://ynikl.github.io/blog/golang-100mistake/","summary":"variable shadowing init 弊端\n初始化 error 的处理, 不应该是包自己用 panic 捕获错误终止程序，而是调用来决定是否应该终止程序 影响测试， 会在测试之前执行 获取执行数据，需要通过全局变量（ 全局变量弊端：1. 会被修改，2. 影响测试） 什么时候使用\n避免错误产生没有err 不会产生全局变量 getters and setters 如果只是简单获取值的话，就不应该用\n方法命名\n获取值 Balance 而不是 （ GetBalance) 设置值 SetBalance interface pollution interface 的价值\n通用的方法（ 如排序） 解耦 限制实体行为（仅提供特定方法） 只要在当我们真正用到的时候才去创建\nwe should create an interface when we need it, not when we foresee that we could need it\ninterface 抽象 是通过发现的，而不是通过创造的\n生产端接口声明，与实现放在同一个包中 消费端接口声明，与使用interface的放在同一个包中 Interface 是通过发现的，符合使用者的需求（与其他语言最大区别就是 Interface 为隐式实现）所以大部分接口应该是是消费端接口声明。\n准备库定义生产端声明，可以提供自定义接口的能力。 生产端接口要尽量简洁。\nreturn interfaceBe conservative in what you do, be liberal in fr Be conservative in what you do, be liberal in what you accept from others.","title":"Golang 100 mistake 的简单读书笔记"},{"content":"variable shadowing init 弊端\n初始化 error 的处理, 不应该是包自己用 panic 捕获错误终止程序，而是调用来决定是否应该终止程序 影响测试， 会在测试之前执行 获取执行数据，需要通过全局变量（ 全局变量弊端：1. 会被修改，2. 影响测试） 什么时候使用\n避免错误产生没有err 不会产生全局变量 getters and setters 如果只是简单获取值的话，就不应该用\n方法命名\n获取值 Balance 而不是 （ GetBalance) 设置值 SetBalance interface pollution interface 的价值\n通用的方法（ 如排序） 解耦 限制实体行为（仅提供特定方法） 只要在当我们真正用到的时候才去创建\nwe should create an interface when we need it, not when we foresee that we could need it\ninterface 抽象 是通过发现的，而不是通过创造的\n生产端接口声明，与实现放在同一个包中 消费端接口声明，与使用interface的放在同一个包中 Interface 是通过发现的，符合使用者的需求（与其他语言最大区别就是 Interface 为隐式实现）所以大部分接口应该是是消费端接口声明。\n准备库定义生产端声明，可以提供自定义接口的能力。 生产端接口要尽量简洁。\nreturn interfaceBe conservative in what you do, be liberal in fr Be conservative in what you do, be liberal in what you accept from others.\n对自己依赖别人的功能保守，对自己赋予别人的能力保持开放\n尽量接收 interface 尽量返回 结构体 正常 consumer 定义接口， 就会造成循环引用\n如果 是现房new 的时候返回 interface 就会变成，由实现方来限制了限制了客户端使用接口消费的抽象组合方式\nConfuse Generics 限制 constraint， 可以是一下两种\n接口 任意类型 ~int， 限制 底层类型\nembbding 错误使用将底层的方法公开出来\ntype client struct { sync.Mutex // 错误地将 Lock() 和 Unlock() 方法暴露给客户端了 protectData map[string]string }\nFunctional Options Parttern\n定义闭包声明函数，更新和修改配置， 有几个好处\n使用默认配置时， 避免声明空的 cfg 参数结构体 通过闭包延迟 err 的处理， 聚合在客户端内部 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 type options struct { port *int } type Option func(opt options) error func WithPort(port int) Option { return func(opt options) error { opt.port = port } } func NewServer(c client, opts ...Option) { var cfg options for _, op := range opts { err := op(cfg) if err != nil { } } } func main() { NewServer(http.DefaultClient, WihtPort(8080)) } 12 Project Organization project-layout\nWe should minimize what should be exported as much as possible to reduce the coupling between pack-\nages and keep unnecessary exported elements hidden.\n包的成员，非必要不公开。\n13 Utility Package 创建类似与 common ， utility, base， shared 等没有意义的包名，共享一些工具类代码。\n14 Ignoring Package name collisions 避免包名和变量名冲突\n使用不同的变量名redisClient 对引用的包取别名 redisPkg 15 Missing code documentation exported 的公开变量 都需要进行文档备注 Deprecated: // Package 的说明应该在 doc.go 文件 // Package 包名开头 与 Go 代码声明有空行间隔 会被忽略 16 Not using linters 17 Creating confusion with octal literal 错误使用 010， 表示八进制\n0b 二进制 0x 十六进制 0i 虚数 18 Integer Overflow 整形溢出， 多注意\n19 floating points 20 slice length and capactity the slice length is the number of available elements in the slice,\nwhereas the slice capacity is the number of elements in the backing arra\n长度是 slice 可用的长度， 容量是slice底层数据的长度\n22 slice empty and nil slice nil\n不需要分配内存， nil slice 是 empty slice empty slice\n长度等于 0 23 check slice by nil 通过 list == nil 判断 slice 是否为空，是错误的\n要通过长度判断 len(list)判断 slice 是否为空。\n24 copy slice 赋值数量为最小两个slice 之间最小长度\n复制之前应该，注意复制的目标数组的长度\nsrc := []int{0, 1, 2} dst := make([]int, len(src)) copy(dst, src) fmt.Println(dst)\n不同的复制方式\nsrc := []int{0, 1, 2} dst := append([]int(nil), src\u0026hellip;)\n25 切片更新添加数据副作用 s1 := []int{1,2,3} s2 := s1[1:2] s3 := append(s2, 10}\n// Output: // s1 [1, 2, 10]\n26 slice 导致内存泄露 使用切变承接输入的大数据数组， 获取小部分数据。\n小数据的slice， 仍然会指向大数组的空间，内存占用仍会较高。\n需要重新声明 slice， 使用copy 复制需要的数据。\nGC 不会回收 slice 已经分配但没有使用的空间。\n27 Map 初始化 load factor overflowed\nmake(map, hint_size) 初始化 map, 带预计大小, 可以避免map 在插入的时候, 需要复制.\n获取足够的内存 重新平衡分配元素到各个bucket 28 map memory leaks A map can only grow and have more buckets; it never shrinks.\nGC 可以回收 map 的元素, 但是无法回收 map 本身占用的空间大小.\n解决方法\n创建副本, 创建一个新的map, 复制现有的值, 释放原有的map map的value 存放 指针, 缩小每一个空的bucket 占用的空间大小 (指针空间 8bytes or 4bytes) 29 值比较  Booleans—Compare whether two Booleans are equal.\n Numerics (int, float, and complex types)—Compare whether two numerics are equal.\nStrings—Compare whether two strings are equal.\n Channels—Compare whether two channels were created by the same call to\nmake or if both are nil.\n Interfaces—Compare whether two interfaces have identical dynamic types and\nequal dynamic values or if both are nil.\n Pointers—Compare whether two pointers point to the same value in memory or\nif both are nil.\n Structs and arrays—Compare whether they are composed of similar types.\n对比方法\n简单通过 == 对比, 无法处理复杂类型 reflect.DeepEuqal 有性能瓶颈 自己实现对比方法, 参考已经有标准库, 如bytes.Compare 30 copy value in range 在 range 遍历的过程中, 是值复制\n31 range expresion evaluated for i, v := range exp exp 针对不同类型表达式, 会在 开始执行 loop 之前, 对exp 进行复制\nslice range 会在开始range的时候, 计算slice 的长度和容量, 并创建一个临时的 slice\n![[Pasted image 20230221093451.png]]\n1 2 3 4 5 s := []int{0, 1, 2} for i := 0; i \u0026lt; len(s); i++ { s = append(s, 10) } 会无限执行下去, 因为 len 是每次执行的时候都会计算一次\nchannel 与slice 一样, 同样会在开始的时候为 channel 创建一个临时变量.\n1 2 3 4 5 6 ch := ch1 for v := range ch { fmt.Println(v) ch = ch2 } 这个在range 这替换的动作是无效的, range 的仍然是ch1\narray 1 2 3 4 5 6 7 a := [3]int{0, 1, 2} for i, v := range a { a[2] = 10 if i == 2 { fmt.Println(v) } } 会对 a 整个数据进行复制, 输出是2, 原数组不变\n修改原数组方案\n使用 index , 访问和修改数据 对数据取指针方法 for i, v := range \u0026amp;a 32 range 过程中使用 遍历元素的指针 1 2 3 for _, customer := range customers { s.m[customer.ID] = \u0026amp;customer } \u0026amp;customer 指向的是 range 复制出来的内存\n33 对 map 数据的错误消费 依赖 map 的顺序， map 的数据是无序的 在遍历过程中继续插入新的数据， 结果是不可预测的。有可能会被遍历到，也有可能会被跳过 34 break 层的错误理解 break 对 for, select, switch 三个语句的最内层生效\n1 2 3 4 5 6 for i := 0; i \u0026lt; 5; i++ { switch i { case 2: break } } 没有中断， 结果正常遍历。\n可以使用 Label 达到中断 for 的方式， 标准库也经常采用该种写法。\n35 在 for 中使用 defer 36 没有理解 rune string 是一个结构体, 有两个字段\nA pointer to an immutable byte sequence 长度 Unicode 是字符集 Utf-8 是编码方式\nRune 是 Unicode 的字符集表示，相当于一个字符, golang 使用utf-8编码方式， 所以一个rune 是1-4个字节 bytes.\n1 type rune = int32 len()函数返回的是 bytes 的长度\n37 对 string 的错误遍历 获取字符串的字符个数 utf8.RuneCountInString\n获取字符串的第i个字符\n如果是纯ascii码字符串，直接通过str[i]获取。 获取出来的是 bytes 编码需要转成字符 如果存在非ascii 字符 通过 for i, c := range str遍历获取到第 i 个 rune 字符， 和 c 字符编码 通过索引获取， 需要先强制转化成 []rune(str)[i] 可以直接获取字符串的第 i 个 rune 字符 38 对 TrimRight / TrimSuffix 混淆 strings.TrimRight 是从右到开始移除所有符合的字符集，直到遇到第一个不符合的字符 TrimSuffix 是移除整个字符串\n39 使用 += 字符串拼接 使用 += 拼接一系列字符串，会造成内存分配频繁，因为每一个字串都是不变的。 推荐使用 strings.Builder\n40 冗余转化成字符串 所有的字符串操作 strings 包， 在 bytes 包都会有相对应的替换方法，没有必要将 bytes 转化成 string 在进行操作。\n41 subString 导致内存泄露 substring 生成的 新字符串与旧字符串指向同一块内存，原理同slice\n42 方法值接受者和指针接收者 pointer receiver\n需要修改对象数据 接收者包含不能copy的对象，如 sync 接收者为大对象 value receiver\n不修改接收者 接收者为 map, channel 接收者为小对象， 基础类型 43 命名的返回参数 用处\n增加代码可读性， 如果无法增加可读性，就不需要命名 提前初始化变量 使用 naked return 的提前是函数短小，太长的函数会降低可读性，需要一直记住变量 不应改混着使用 naked return 和 带参数return 44 返回了未赋值的命名 err 1 2 3 4 5 6 func name(ctx context.Context) (a,b int, err error) { if ctx.Err() != nil { // err is nil return 0, 0, err } } 45 interface 返回 non-nil 1 2 3 4 5 func Validate() error { var m *MutilErrorStruct return m } // 返回值 err != nil 永远为true nil 的结构体， 在返回 interface 的函数之后就永远不等于 nil ![[Pasted image 20230309221827.png]]\n解决方案，永远明确地返回 nil\n1 2 3 4 if m != nil { return m } return nil 46 不用使用文件名作为参数 使用 io.Reader 做为参数, 替代文件有两种好处\n方法的具体实现可以与数据源的类型无关, 文件, 或者http, 或者sock 方便测试, 无法因为测试而创建一堆文件 47 defer 参数的计算 defer 在代码执行到的时候会, 立刻使用当前函数的参数的变量值, 包括方法的接收者作为参数.\n48 panic 什么时候应该panic\na pure programmer error ( 程序员编码错误 ) 依赖初始化失败 49 Error Wrap 什么时候使用 Error Wrap\n添加额外的信息 标记为某一特定的错误类型 处理的信息的多种选择\n直接返回错误 自定义错误类型 fmt.Errorf + %w wrap 错误 fmt.Errorf + %v 包含错误文字 50 用 as 检查Err类型 通过 wrap 的 error 需要使用 error.As(err, \u0026amp;targetErrorStruct{}) 判断是否为目标结构体\n51 erros.Is 制定 error 错误信息的原则:\n可以预测的错误使用制定错误变量 ErrFoo = errors.New(\u0026quot;foo\u0026quot;) 无法预测的错误,使用指定错误类型 type BarError struct 使用 error.Is(err, sql.ErrNoRows) 判断错误是否为指定的错误类型.\n52 多次处理同一个错误 一个错误多次重复打日志, 会让调试更加艰难.\n打印错误也是一种错误的处理方式. 所有, 要么选择打印错误, 要么选择向上抛出错误. 不要两者同时.\n向上层函数抛出错误的时候, 需要通过 WrapErr 附加上当前的额外错误信息\n53 明确忽略的 error 使用 _ 接收返回的error, 明确表示不处理, 错误\n1 2 _ = funcReturnErr() 建议再加上注释说明为什么不处理函数错误\n54 处理 defer 函数返回的错误 记得要处理 defer 的函数返回的错误, 至少需要显示忽略\n55 并发和并行 并发的重点是可以处理多项事务的设计结构, 并行是多项事务可以同时进行处理.\nConcurrency is about dealing with lots of things at once. Parallelism is about doing lots of things at once. —Rob Pike\n并发并不代表多件事务真正意义上的\u0026quot;同时进行\u0026quot;, 同时进行是并行, 并发主要处理阻塞的流程 优化\n56 并发 不一定更快 过小的切分任务, 会让时间消耗在创建和消费协程上, 并没有真正的提高\u0026quot;并行\u0026quot;能力.\n57 通道和互斥锁 通道的底层也是互斥锁.\n当协程之间需要传递信息, 或者数据, 使用通道 \u0026ndash; 互斥锁的更高抽象\n58 数据竞争(data race) 和条件竞争(race condition) 数据竞争:\n同时有多个协程同时访问统一块内存, 且至少有一个协程正在写入数据\n条件竞争:\n事件发生的先后顺序不可控制, 无法控制协程的执行先后顺序, 导致结果不可控.\n59 区分任务类型 (计算密集或者 I/O密集型) 如果是计算密集型, goroutine 的并发上线应该采用 runtime.GOMAXPROCS(0)\n过多的协程, 可能导致创建过得的 M, 就会出现多个 M 在一个 cpu 核心 中疯狂切换.\n60 Conetxt Deadline 设置超时时间 context.WithTimeout 传递取消消息 context.WithCancel 传递值 context.WithValue context.Err 会返回解释, 为何context.Done关闭 传递值时, key 不直接使用 string 是为了避免, 冲突覆盖.\nThe provided key must be comparable and should not be of type string or any other built-in type to avoid collisions between packages using context. Users of WithValue should define their own types for keys. To avoid allocating when assigning to an interface{}, context keys often have concrete type struct{}. Alternatively, exported context key variables\u0026rsquo; static type should be a pointer or interface.\n疑惑的时候就使用 context.TODO\nWhen in doubt about which context to use, we should use context.TODO() instead of passing an empty context with context.Background.\n61 传递 context 62 关心 goroutine 什么时候停止 关心 goroutine 持有的文件描述符是否被正确的关闭 注意协程持有的资源\n63 注意 goroutine 获取循环变量 64 select 是随机, case 先后顺序不保证优先级. 65 消息型 channel 消息型 channel 的数据结构应该使用 make(chan struct{}) 空结构体, 编程惯例, 提醒 接收者, 传递的消息是没有任何意义的.\n66 使用 nil channel 在使用 select 的时候, 当 channel 已经 close 掉后, 就可以将channel 设置成 nil , 让该 case 条件进入堵塞状态\n67 分清 buffed and unbeffed channel 的使用场景 68 string format 的副作用 如果有协程正在更新 ctx, context的值的话, 就会出现数据竞争, fmt 读取ctx的内部值\nctxKey := fmt.Sprintf(\u0026quot;%v\u0026quot;, ctx)\nfmt 会读取 string() 的方法, 应注意该方法中的读写锁是否会造成死锁.\n69 append 的数据竞争 slice 更新和读取不通的index时不会出问题.\nmap 操作时存在更新, 无论key是否相同有可能产生冲突. 因为, map 的底层是数组, 不同的 key 也有可能指向相同的数组\n70 71 wg.Add 在协程开启前 72 sycn.cond 73 errgroup 74 sync 包不能被复制, 要小心值复制 75 time.Duration 的时间单位是 纳秒 标准使用\n1 1 * time.Second 76 time.Afte 导致内存泄露 方法内部实现的协程, 需要等到时间到了, 才会释放资源, 所以不要在循环中调用.\n77 结构体 序列化和反序列化 结构体嵌套 直接嵌入未命名的结构体, 可能会使用sub embedding struct 的序列化接口方法, 导致bug\n1 2 3 4 type a struct { ID int time.Time } a 结构体再序列化的时候会使用 time.Time 的MarshalJSON()的方法\n使用命名结构体接入 重新实现接口方法 time 的对比 time 内部包含 wall clock 和 montonic clock 字段, 返回序列化后的 time 对象, 不包含 montonic clock 直接对比, 会不相同\nThe general rule is that the wall clock is for telling time and the monotonic clock is for measuring time.\n可以使用 time.Equal 方法 或者使用 Truncate 移除 monotonic clock 数值 map map[string]any 数值反序列化后类型都为 float64\n78 SQL 错误 sql.Open sql.Open() 不一定是与数据库服务建立了连接, 具体还是需要看 驱动 实现, 可以通过 ping 方法, 强制建立连接\nsql 连接池的配置 sql 连接状态分两种\n使用者 idle 等待使用, 已创建但没有再使用 sql 连接池配置\nSetMaxOpenConns 最大连接数量, 考虑到下游服务的性能 SetMaxIdleConn 在并发高时适当增加, 避免创建耗时 SetConnMaxIdleTime 并发增加之后, 维持多久销毁连接 SetConnMaxLifetime 不希望一个连接持续过久 sql.prepared 语句 高效: 更加高效, 避免 SQL 重复编译 安全: 避免SQL注入 string 处理 null 值 使用指针声明 *string 使用 sql.NullString 类型 rows.Err 错误捕获 79 资源关闭 实现 io.Closer 的临时资源需要 及时 close\nhttp 请求的客户端, respBody 需要close sql.Rows os.File 80 http handle 忘记 return 81 使用 默认http client 和 server client http 的请求步骤\ndial tls 握手 send read header read body 4个超时配置\nnet.Dialer.Timeout 建立连接超时 http.Transport.TLSHandshakeTimeout TLS 握手超时 http.Transport.ResponseHeaderTimeout 等待服务返回头此时 http.Client.Timeout 这个请求的时间限制, from 上述步骤1到5 net/http: request canceled (Client.Timeout exceeded while awaiting headers) 报错 服务端返回超时, 在step4, 读取头时等待超时.\nhttp 连接池\nhttp.Transport.IdleConnTimeout http.Transport.MaxIdleConns http.Transport.MaxIdleConnsPerHost 默认为2, 严重影响并发 server 1 2 server := \u0026amp;http.Server{} server.Serve(listener) 服务端步骤\n等待请求 TLS read request headers read request body write response 3个 timeout\nhttp.Sever.ReadHeadersTimeout http.Server.ReadTimeout http.TimeoutHandler http.Server.IdleTimeout keep-alive 请求可以保持多久 TimeoutHanlder 包裹 handle 当处理超时时,返回503\n如果都没有配置超时的话, 服务器就没有超时机制, 会一直等待客户端主动关闭连接. 当服务暴露给不信任客户端时, 至少需要配置 ReadTimeout 和 TimeoutHandler 避免资源被耗尽.\n82 对单元测试进行分类 避免执行不需要单元测试, 提升测试效率.\n使用 tag go test --tags=integration -v . 根据环境变量, 使用testing.Skip() 显示调用为什么跳过测试 使用 testing.Short() 判断当前执行模式, 跳过需要长时间耗时的测试 go test -short -v . 83 测试启用 \u0026ndash;race 编译时带 --race 会增加程序消耗\n内存提高5-10倍 运行时间2-20倍 避免在生产环境使用, 在CI的时候使用\n84 test 的执行模式 parallel\ntesting.T.Parallel() 会先暂停, 等待顺序测试任务完成后, 继续执行.\ngo test - parallel 16 . 并发执行测试\nshuffle\ngo test -shuffle=on -v . 打乱 go test 函数的执行顺序\n85 Table-driven 表驱动测试 t.Run(name, func(t *testing.T) {})\n执行子测试 go test -run=TestFoo/subtest_1 -v\n86 避免测试中的 sleep 在并发场景下, 我们使用 time.Sleep 模拟, 任务处理耗时, 但是我们不知道时间是否足够\n使用多次尝试校验, retry mock 对象使用消息通知校验 87 处理依赖时间测试 改变依赖, 造假数据 修改方法, 让接口传入时间 88 单测工具包 http 相关\nhttptest.NewServer httptest.NewRequest iotest\n89 正确使用 benchmark 测试 忽略耗时函数 忽略对硬件底层 90 单元测试的拓展功能 TestMain 从不同的包测试 ( 重视包对外的开放功能) cover 单测覆盖率 91 CPU cache cpu 三级缓存\ncpu cache Line 加载的 locality of reference, 局部性和相关性 cache line 一般 64 bytes, CPU 内存加载预测\nUnit stride Constant stride Non-Unit stride 92 通过 padding 避免并发操作相同内存复制到不同cpu core 中 cpu 会有cache line 加载数据, 如果两个协程, 并发操作的不同的数据字段(在同一块cache line 大小内存中) 内存中. 这块内存会被同时加载到不同的cpu 核心的缓存中. 因为cpu MESI保证内存一致, 一边更新另一边会失效.\nWhen a cache line is shared across multiple cores and at least one goroutine is a writer, the entire cache line is invalidated.\n使用 pading , 将同时操作的内存分到不同cache line 中\n1 2 3 4 5 type result struct { sumA int64 _ [56]byte // padding sumB int64 } 93 考虑指令集优化 94 内存对齐 内存对齐可以减少结构体占用的内存大小.\n结构体的内存对齐系数, 为各字段中最大的系数\n官方文档\n95 stack \u0026amp;\u0026amp; heap 栈内存是不需要GC, 只是会根据栈的大小范围表示为不可用, 再次使用的时候, 新值直接覆盖旧值.\n当变量内存分配到栈上, 且函数退出, 变量引用表示不可用 \u0026ndash; 无法再次访问, 所以需要 堆.\n堆的使用成本更大, 需要GC, 内存分配成本也更大.\n96 优化内存分配 string.Builder 代替 + 避免 []byte 转 string slice map 的初始化 结构体内存对齐 改变 interface 声明, 避免内存逃逸 sync.Pool 编译器优化, 避免 bytes-to-string 转化 97 编译器函数内联 inline. 当调用的子函数较为简单时, 编译器会是将调用函数的内部实现嵌入当前调用点.\n避免函数的调用成本 可以使编译器进一步优化 (比如, 内存逃逸 直接分配到栈中) 当子函数过为复杂时, 可以抽出子函数的复杂部分为另一个调用函数实现 mid inline. 让中间函数嵌入调用点.\n98 使用分析工具 pprof trace 99 GC marks and sweep\n遍历所有对象, 标记是否在使用 遍历所以对象, 清除没有在使用的对象 GOGC 配置 GC 的敏感度, 当 GOGC=100 时, 当堆内存容量涨100%时触发GC.\n通过 GOGC 进行优化 uber 调优原文 GOGC 调优 100 Docker 和 K8s 资源分配对并发性能的影响 引用 http://github.com/uber-go/automaxprocs 自动设置 GOPROMAX\n","permalink":"https://ynikl.github.io/books/golang-100mistake/","summary":"variable shadowing init 弊端\n初始化 error 的处理, 不应该是包自己用 panic 捕获错误终止程序，而是调用来决定是否应该终止程序 影响测试， 会在测试之前执行 获取执行数据，需要通过全局变量（ 全局变量弊端：1. 会被修改，2. 影响测试） 什么时候使用\n避免错误产生没有err 不会产生全局变量 getters and setters 如果只是简单获取值的话，就不应该用\n方法命名\n获取值 Balance 而不是 （ GetBalance) 设置值 SetBalance interface pollution interface 的价值\n通用的方法（ 如排序） 解耦 限制实体行为（仅提供特定方法） 只要在当我们真正用到的时候才去创建\nwe should create an interface when we need it, not when we foresee that we could need it\ninterface 抽象 是通过发现的，而不是通过创造的\n生产端接口声明，与实现放在同一个包中 消费端接口声明，与使用interface的放在同一个包中 Interface 是通过发现的，符合使用者的需求（与其他语言最大区别就是 Interface 为隐式实现）所以大部分接口应该是是消费端接口声明。\n准备库定义生产端声明，可以提供自定义接口的能力。 生产端接口要尽量简洁。\nreturn interfaceBe conservative in what you do, be liberal in fr Be conservative in what you do, be liberal in what you accept from others.","title":"Golang 100 mistake 的简单读书笔记"},{"content":"生活的忙碌可以分成七个层次。\n大家可以对照一下，自己属于哪个层次？\n第 1 级：一点不忙。\n时间很自由，怎么安排都可以，没有一定要去完成的事项，周末想睡多久就多久。\n第 2 级：有一些小事。\n你记得有一些事要做。这些事情是合理的事项，没有截止期，但是你知道这些事迟早要做。\n第 3 级：有一些重要的事。\n你有必须要做的事情，需要及时跟踪，不能拖延，你会时刻提醒自己这些事情。\n第 4 级：日程排满了。\n你的日程排满了，不得不经常问自己\u0026quot;什么事情更重要？\u0026quot;，以便决定先做哪些事，后做哪些事。\n你没有计划外的时间，不过你还能控制日程。\n第 5 级：生活出现混乱。\n你的事情在工作时间做不完，你开始加班了。\n你经常因为事情来不及，而对别人说\u0026quot;对不起\u0026quot;。那些事情并没有被你放弃，只是你不得不赶时间，有些事情执行变得草率。\n第 6 级：任务做不完。\n你需要做的事情，超过了你安排日程的能力。即使放弃某些事情，你依然做不完剩下的事情。\n你的工作时间大大延长，影响到正常生活。你感到非常疲劳。\n第 7 级：日子过不下去。\n各种任务塞满了你醒着的每一分钟。吃饭和其他生活必需的事情，都是抽时间来做。你忙起来的时候，甚至饭也没时间吃。\n你不写日程安排了，因为根本没有时间做计划，每个小时情况都在发生变化。\n你走路也心不在焉，常常觉得要崩溃，日子过不下去了。\n来源: 阮一峰周报\n","permalink":"https://ynikl.github.io/posts/the-seven-levels-of-busy/","summary":"生活的忙碌可以分成七个层次。\n大家可以对照一下，自己属于哪个层次？\n第 1 级：一点不忙。\n时间很自由，怎么安排都可以，没有一定要去完成的事项，周末想睡多久就多久。\n第 2 级：有一些小事。\n你记得有一些事要做。这些事情是合理的事项，没有截止期，但是你知道这些事迟早要做。\n第 3 级：有一些重要的事。\n你有必须要做的事情，需要及时跟踪，不能拖延，你会时刻提醒自己这些事情。\n第 4 级：日程排满了。\n你的日程排满了，不得不经常问自己\u0026quot;什么事情更重要？\u0026quot;，以便决定先做哪些事，后做哪些事。\n你没有计划外的时间，不过你还能控制日程。\n第 5 级：生活出现混乱。\n你的事情在工作时间做不完，你开始加班了。\n你经常因为事情来不及，而对别人说\u0026quot;对不起\u0026quot;。那些事情并没有被你放弃，只是你不得不赶时间，有些事情执行变得草率。\n第 6 级：任务做不完。\n你需要做的事情，超过了你安排日程的能力。即使放弃某些事情，你依然做不完剩下的事情。\n你的工作时间大大延长，影响到正常生活。你感到非常疲劳。\n第 7 级：日子过不下去。\n各种任务塞满了你醒着的每一分钟。吃饭和其他生活必需的事情，都是抽时间来做。你忙起来的时候，甚至饭也没时间吃。\n你不写日程安排了，因为根本没有时间做计划，每个小时情况都在发生变化。\n你走路也心不在焉，常常觉得要崩溃，日子过不下去了。\n来源: 阮一峰周报","title":"The Seven Levels of Busy"},{"content":"记最近换出租房的经验教训 换房租不到两个月 这次是从厦门的岛外海沧湾公园, 搬到软件园二期内, 望海公寓.\n我的考虑如下:\n我可以把通勤的时间, 节省下来, 将时间放在提升自己技术能力上. 我可以在园内附近随便找一个健身房, 这样子也很方便 中午我可以回到宿舍, 自己烹煮健康的午餐 可以避免我在海沧的停车不方便, 已经开车的话, 需要双边缴交停车费. 导致我后悔住在那边的原因:\n我并没有办法把时间投放在提升自己的技术能力上, 让自己一直待在同一个地方我自己 的内心会非常的难受. 时间不经意流失了, 原先我在地铁上还可以保持着, 客观的阅读量. 附近的健身房质量偏低, 都比较拥挤, 价格不合适. 让我不太想去练, 只能跑回原来的 健身房, 导致我需要一个小时的通勤健身成本, 开车到一个较远的健身房. 中午的午饭做腻了, 已经不太想在自己做了 居住的空间变小了, 不上不下, 回到卧室之后也不知道干什么 外部环境比较差, 当我不想在公司, 不想在宿舍的时候, 附近没有可以提供我消遣的地方 租金高昂 总结一下让我搬出来原因\n通勤(包括往返健身房) 居住的环境 周边的环境 租金 我个人认为再次挑选租房的因素 居住环境 不喜欢繁华的地区, 还是比较偏远幽静的小区(个人比较喜欢偏远的地区) 房间的大小, 要在房间里面做什么(个人没有玩游戏的需求, 一般会想房里面舒服地, 办公 或者阅读, 如果房间太小, 你就会什么事情都不想干, 就想躺在床上玩手机.) 阳光, hhh, 大家好像都喜欢阳光好的房间 房子内部 空调的能耗等级, 这个觉得了你夏天的好过程度 盥洗盆的水龙头是否有热水, 这个决定了你能否快乐的洗漱 (我现在已经离不开热水了) 通勤 上班的通勤方式, 你能接受的通勤时间. 我对通勤时间有着极大的忍受程度. (我已经习惯 在地铁上阅读书籍, 我会把这段时间当作 reading time. 目前单程通勤1.5h) 你生活必须的目的地的通勤, 比如, 咖啡馆, 健身房, 图书馆, 或者商场之类的. 考虑进去. 租金 考虑自己收入和租房预算 如果车的话, 还需考虑停车位的费用 其他 地区政策, 厦门比较特殊岛内不能骑摩托车, 而我最近又疯狂迷恋上骑摩托车. 有没有方便的停车棚 (停你的自行车, 摩托车, 电动车) 对我自己未来居住环境的展望 停车棚, 可以让我小摩托不用风吹雨淋 有个车库, 可以自己动手摆弄摩托车 有一个停车位, 方便停放小车 方便去健身房 有一个大阳台 附近人少 ","permalink":"https://ynikl.github.io/posts/%E7%A7%9F%E6%88%BF%E6%97%A5%E8%AE%B0/","summary":"记最近换出租房的经验教训 换房租不到两个月 这次是从厦门的岛外海沧湾公园, 搬到软件园二期内, 望海公寓.\n我的考虑如下:\n我可以把通勤的时间, 节省下来, 将时间放在提升自己技术能力上. 我可以在园内附近随便找一个健身房, 这样子也很方便 中午我可以回到宿舍, 自己烹煮健康的午餐 可以避免我在海沧的停车不方便, 已经开车的话, 需要双边缴交停车费. 导致我后悔住在那边的原因:\n我并没有办法把时间投放在提升自己的技术能力上, 让自己一直待在同一个地方我自己 的内心会非常的难受. 时间不经意流失了, 原先我在地铁上还可以保持着, 客观的阅读量. 附近的健身房质量偏低, 都比较拥挤, 价格不合适. 让我不太想去练, 只能跑回原来的 健身房, 导致我需要一个小时的通勤健身成本, 开车到一个较远的健身房. 中午的午饭做腻了, 已经不太想在自己做了 居住的空间变小了, 不上不下, 回到卧室之后也不知道干什么 外部环境比较差, 当我不想在公司, 不想在宿舍的时候, 附近没有可以提供我消遣的地方 租金高昂 总结一下让我搬出来原因\n通勤(包括往返健身房) 居住的环境 周边的环境 租金 我个人认为再次挑选租房的因素 居住环境 不喜欢繁华的地区, 还是比较偏远幽静的小区(个人比较喜欢偏远的地区) 房间的大小, 要在房间里面做什么(个人没有玩游戏的需求, 一般会想房里面舒服地, 办公 或者阅读, 如果房间太小, 你就会什么事情都不想干, 就想躺在床上玩手机.) 阳光, hhh, 大家好像都喜欢阳光好的房间 房子内部 空调的能耗等级, 这个觉得了你夏天的好过程度 盥洗盆的水龙头是否有热水, 这个决定了你能否快乐的洗漱 (我现在已经离不开热水了) 通勤 上班的通勤方式, 你能接受的通勤时间. 我对通勤时间有着极大的忍受程度.","title":"记最近换出租房的经验教训"},{"content":"可以解决什么问题 表太大, 无法全部放入内存中 表有热点数据, 其他均是历史数据 分区更容易维护, 批量删除,修复 可以跨多个硬件设备 减少单个索引互斥访问 独立备份和恢复分区 主要目的就是对表, 进行一个粗粒度的过滤;\n原理 将一个表在物理上分层多个更小的部分, 但是在逻辑上, 仍是只有一个表.\n执行 SQL 时, 可以通过合适的过滤今天, 过滤掉那边不需要查询的分区, 以此提高性能.\n支持类型为: 水平分区, 不支持垂直分区;\n分区的数据操作流程 先打开并锁住所有的分区底层表, 过滤掉多余的分区. 再进行操作.\n分区类型 range list hash key 创建分区时, 分区的列, 必须是主键或者唯一索引的一部分\n1 2 3 4 5 6 7 8 9 create table t1 ( col1 int null, col2 int null, col3 int null, unique key(col1, col2, col3) ) partitionby hash(col3) partitions 4; Range 创建分区\n1 2 3 4 5 create table t ( id int) partition by range (id)( partition p0 values less than (10), partition p1 values less than (20)); 增加 maxvalue 分区\n1 alter table t add partition ( partition p2 value less than maxvalue); 创建分区后, 表就会变成多个 ibd 文件组成, 查看详情:\n1 2 select * from information_schema.PARTITIONS where table_schema=databese() and table_name = \u0026#39;t\u0026#39;; LIST 与 range 类似, 离散版\n1 2 3 4 5 6 7 create table t ( a int, b int) engine=innodb partition by list(b)( partion p0 values in (1,3,5,7,9), partion p1 values in (0,2,4,5,8) ); HASH HASH 分区的目的是将数据均分地分布到各个分区中, 保证分区的数据量都是一样的.\n1 2 3 4 5 create table t_hash( a int, b datetime) engine=innodb partition by hash (YEAR(b)) partitions 4 还支持 LINEAR HASH\nKEY 与HASH类似, HASH 使用用户定义的函数分区, KEY 使用 MySQL 的函数进行区分\nCOLUMNS 以上四种分区方法都是需要对整型进行操作.\nRANGE 和 LIST 的进化, columns 可以直接对非整型数据进行分区.\n子分区 处理超大的表时, 可以在分区下方, 在继续划分子分区.\nNull 值 Mysql 把 null 视为小于任何一个非 null 值.\nrange 下所有的 null 都会被划分在最左分区. list 需要显示指明那个分区存放 null 值 hash 和 key 都是等于0值. 最左分区. 性能 数据场景分两种, OLTP, OLAP\nOLAP 在 OLAP 下, 需要频繁扫面大表, 可以通过对应搜索字段进行分区, 直接过滤掉无需扫描的分区.\nOLTP 获取的数据量较小, 一般是通过索引获取几条记录. B+树的索引, 一般需要2-3次IO\n分区列与索引列不匹配 如果检索的字段或者索引, 没有在分区字段上, 每个分区都会有独立的索引, 就会导致每个分区都需要进行索引检索. 导致IO的次数增长, 导致查询变慢. (1000万条数据, 10个分区话, 就会需要 10 * (2或3次)IO)\n查看 Partition 是否开启 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 mysql\u0026gt; SELECT -\u0026gt; PLUGIN_NAME as Name, -\u0026gt; PLUGIN_VERSION as Version, -\u0026gt; PLUGIN_STATUS as Status -\u0026gt; FROM INFORMATION_SCHEMA.PLUGINS -\u0026gt; WHERE PLUGIN_TYPE=\u0026#39;STORAGE ENGINE\u0026#39;; +--------------------+---------+--------+ | [Name](Name) | Version | Status | +--------------------+---------+--------+ | binlog | 1.0 | ACTIVE | | CSV | 1.0 | ACTIVE | | MEMORY | 1.0 | ACTIVE | | MRG_MYISAM | 1.0 | ACTIVE | | MyISAM | 1.0 | ACTIVE | | PERFORMANCE_SCHEMA | 0.1 | ACTIVE | | BLACKHOLE | 1.0 | ACTIVE | | ARCHIVE | 3.0 | ACTIVE | | InnoDB | 5.7 | ACTIVE | | partition | 1.0 | ACTIVE | +--------------------+---------+--------+ 10 rows in set (0.00 sec) 1 select * from information_schema.PARTITIONS; 使用优化 访问分区表的时候, 需要在 where 条件后面增加一个分区列, 让优化器过滤分区.\nMysql 无法根据表达式进行过滤, 与索引一致, 只能通过值进行过滤.\n参考 高性能的MySQL (第三版) MySQL 技术内幕: InnoDB存储引擎 ","permalink":"https://ynikl.github.io/blog/mysql-partition/","summary":"可以解决什么问题 表太大, 无法全部放入内存中 表有热点数据, 其他均是历史数据 分区更容易维护, 批量删除,修复 可以跨多个硬件设备 减少单个索引互斥访问 独立备份和恢复分区 主要目的就是对表, 进行一个粗粒度的过滤;\n原理 将一个表在物理上分层多个更小的部分, 但是在逻辑上, 仍是只有一个表.\n执行 SQL 时, 可以通过合适的过滤今天, 过滤掉那边不需要查询的分区, 以此提高性能.\n支持类型为: 水平分区, 不支持垂直分区;\n分区的数据操作流程 先打开并锁住所有的分区底层表, 过滤掉多余的分区. 再进行操作.\n分区类型 range list hash key 创建分区时, 分区的列, 必须是主键或者唯一索引的一部分\n1 2 3 4 5 6 7 8 9 create table t1 ( col1 int null, col2 int null, col3 int null, unique key(col1, col2, col3) ) partitionby hash(col3) partitions 4; Range 创建分区","title":"Mysql 分区"},{"content":"概括 这本书只浅浅地读了前一半, 总体感觉知识面是铺的很全的, 但是由于本人相关知识匮乏. 很多内容没有能够吸收, 先暂时浅读一半. 搁置.\n投资要投那些行业集中度高的行业, 局势清晰, 回报高. 比如白色家电. 投资要投有定价权的企业, 如茅台. 上一点也是这个理 必须区分清楚“赌赢了”和“赌对了”是两回事 书摘 不可否认，每个投资人都有自己的能力边界和局限性，但只要认识到了局限性的存在，就可以在一定程度上摆脱它的制约\n长期牛股 什么行业易出长期牛股？行业集中度持续提高的行业。因为这样的行业有门槛，有先发优势，后浪没法让前浪死在沙滩上，易出大牛股。相反，如果行业越来越分散，说明行业门槛不高，既有的领先者没有足够深的护城河来阻止追赶者抢夺其市场份额，这种行业一般是城头变幻大王旗，各领风骚两三年\n好公司的两个标准 一是它做的事情别人做不了；二是它做的事情自己可以重复做。前者是门槛，决定利润率的高低和趋势；后者是成长的可复制性，决定销售增速\n如果二者不可兼得，宁要有门槛的低增长（可持续），也不要没门槛的高增长（不可持续）。门槛是现有的，好把握；成长是将来的，难预测。\n互联网的本质是“人生人”，优势在于能以极低成本服务无数客户，规模效应体现在“人多”，二八现象不明显，是典型的散户经济，得散户者得天下\n银行业的本质是“钱生钱”，规模效应体现在“钱多”，80%的业务来自20%的客户，二八现象显著，得大户者得天下，而且那20%的大客户是需要线下的高端服务的，这就是网络银行至今在欧美日韩都没有很成功的案例的重要原因\n新兴行业讲的是需求快速成长的事，不必纠结于供给。而传统行业则只有控制供给，企业利润才能快速增长\n乔治·索罗斯说：“凡事总有盛极而衰的时候，大好之后便是大坏。”约翰·邓普顿说：“要做拍卖会上唯一的出价者。”查理·芒格说：“倒过来想，一定要倒过来想。”卡尔·伊坎说：“买别人不买的东西，在没人买的时候买。”巴菲特说：“别人恐惧时我贪婪，别人贪婪时我恐惧\n不接下跌的飞刀\n。估值高的股票本身估值下调的空间大，加上这类股票的未来增长预期同样存在巨大下调空间，因此这种“戴维斯双杀”导致的下跌一般持续时间长而且幅度大，刚开始暴跌时不宜逆向投资\n最后，看股价暴跌本身是否会导致公司的基本面进一步恶化，即是否有索罗斯所说的反身性。贝尔斯登和雷曼的股价下跌直接引发了债券评级的下降以及交易对手追加保证金的要求，这种负反馈带来的连锁反应就不适合逆向投资\n对于灾难的发生，每个人都很难过，但是投资决策不应该加入感情的因素。\nA股的情绪波动容易走极端，因此“人多的地方不去”是至理名言\n作为投资者，我们能分辨清楚的就是市场的错误定价在哪个板块以及错误的程度有多大，然后远离被高估的板块，买入被低估的公司。至于市场要等多久才会进行纠错，纠错前会不会把这种错误定价进一步扩大，就不是能够预测的了\n在大多数时候，真理在大多数人手里；在少数时候，真理在少数人手里。如何区别这两种情况呢？一般说来，趋势的初期和末期，就是真理在少数人手里的时候\n买早了还得熬得住，这是逆向投资者的必备素质。投资者必须明白一个道理，市场中没有人能够卖在最高点、买在最低点\n由此可见，流动性一旦收得紧了，很多东西的价格就会撑不住，其中的道理很简单：所有的价格其实本质上都是一种货币现象，就是说你的资金跟你所有东西的价格之和其实是一致的\n右侧投资 常有人说，在A股做价值投资难，概念股满天飞，好公司没人要，便宜的股票买入后往往变得更便宜\n公司有四种：好的、平庸的、烂的、看不懂的；股票也有四种：被低估的、合理的、被高估的、估不准的。人的知识、时间、精力都是有限的，因此看不懂的公司占了一大半\n所谓的投资，就是牢牢抓住这个定价权。就像茅台，整天在涨价，日子太好过了，怎么提价都有人买，为什么呢？就是有这个定价权\n选股票，一定是先选行业。就像买房子，一定是先看社区，社区不行，房子再漂亮也不行\n我认为现在市场价格波动的风险比较大，但是本金永久性丧失的风险不大。因为市盈率在10倍，我觉得是中国的低点\n同一件事，看多者和看空者往往作截然不同的解释——你看到的是你想看到的。\n两个卖鞋的人到了光脚岛。悲观者说，这里人不穿鞋，卖鞋根本没市场。乐观者说，这里人没鞋穿，卖鞋市场巨大。短期看来，悲观者是对的，因为短期内要改变岛民的穿鞋习惯是很难的。长期看来，乐观者是对的，因为岛民迟早会认识到穿鞋比光脚舒服。同一事情两种解读，往往是考虑的时间跨度不同\n所有的社会学规律都有反例，股市中更是如此。股市中的任何规律、方法只能提高你的成功率，没有百战百胜的灵丹妙药。我说吸烟有害身体健康，你说你三舅爷是个大烟枪但活了99岁。我说低估值价值股平均跑赢高估值成长股，你说你买的那个100倍市盈率的成长股已经涨了5倍了。我说的是规律，你说的是个例。咱俩都对，只是我对得更有代表性一些\n正如乔尔·格林布拉特（Joel Greenblatt）所说，第一，价值投资是有效的；第二，价值投资不是每年都有效；第二点是第一点的保证\n在建立研究方法之前，必须区分清楚“赌赢了”和“赌对了”是两回事\n我认为彼得·林奇说得对，他说当有人告诉你“A公司是下一个B公司”的时候，第一要把A卖掉，第二要把B也卖掉。因为第一，A永远不会成为B；第二，B已经被当作成功的代名词，说明它的优点可能已经体现在现在的股价中了\n客户彻底放弃了他们，因为机构客户最不能忍受的就是基金经理的风格飘移\n这说明在季报公布出来的业绩中，成长股很容易低于预期，而价值股很容易超出预期，因为未来不会有乐观者想象的那么好，也不会有悲观者想象的那么差\n公司的品质好坏，关键是看能不能具有定价权。并不是说消费品就好，投资品就不好，关键还是在于有没有定价权。\n对品质的判断，第二个要注意的是差异化竞争和同质化竞争的区别\n我认为做一个证券分析师就很有先发优势。做10年之后，和新进来的人相比，你的市场影响力、在行业内的人脉、对行业的理解是完全不一样的，这是个好行业。像外国的券商研究所里有60多岁了还在做分析师的人，也做得很快乐。但是，做程序员就不一定是一个好行业，可能3年就需要学一种新的计算机语言，除非你转型做产品经理。中国的很多行业就是这样，总是有后浪不断去推前浪，最后把前浪拍死在沙滩上。这样的行业就很难受。\n对行业格局的分析和对公司核心竞争力的理解是“道”，财务分析只是“术”，但是后者对前者起着验证和把关的作用。\n最后钱都被平台赚走了，内容公司只是为他人作嫁衣裳\n比如说高端酒是得品牌者得天下，中低端酒得渠道者得天下。中低端酒的品牌忠诚度没有那么高，就看谁的渠道铺得更广，管理得更精细\n国家给的寡头垄断（例如公用事业）往往伴随着价格管制，长期投资回报一般不会太高。只有市场竞争、行业洗牌后产生的寡头垄断才有定价权\n","permalink":"https://ynikl.github.io/books/the-simple-things-in-investment/","summary":"概括 这本书只浅浅地读了前一半, 总体感觉知识面是铺的很全的, 但是由于本人相关知识匮乏. 很多内容没有能够吸收, 先暂时浅读一半. 搁置.\n投资要投那些行业集中度高的行业, 局势清晰, 回报高. 比如白色家电. 投资要投有定价权的企业, 如茅台. 上一点也是这个理 必须区分清楚“赌赢了”和“赌对了”是两回事 书摘 不可否认，每个投资人都有自己的能力边界和局限性，但只要认识到了局限性的存在，就可以在一定程度上摆脱它的制约\n长期牛股 什么行业易出长期牛股？行业集中度持续提高的行业。因为这样的行业有门槛，有先发优势，后浪没法让前浪死在沙滩上，易出大牛股。相反，如果行业越来越分散，说明行业门槛不高，既有的领先者没有足够深的护城河来阻止追赶者抢夺其市场份额，这种行业一般是城头变幻大王旗，各领风骚两三年\n好公司的两个标准 一是它做的事情别人做不了；二是它做的事情自己可以重复做。前者是门槛，决定利润率的高低和趋势；后者是成长的可复制性，决定销售增速\n如果二者不可兼得，宁要有门槛的低增长（可持续），也不要没门槛的高增长（不可持续）。门槛是现有的，好把握；成长是将来的，难预测。\n互联网的本质是“人生人”，优势在于能以极低成本服务无数客户，规模效应体现在“人多”，二八现象不明显，是典型的散户经济，得散户者得天下\n银行业的本质是“钱生钱”，规模效应体现在“钱多”，80%的业务来自20%的客户，二八现象显著，得大户者得天下，而且那20%的大客户是需要线下的高端服务的，这就是网络银行至今在欧美日韩都没有很成功的案例的重要原因\n新兴行业讲的是需求快速成长的事，不必纠结于供给。而传统行业则只有控制供给，企业利润才能快速增长\n乔治·索罗斯说：“凡事总有盛极而衰的时候，大好之后便是大坏。”约翰·邓普顿说：“要做拍卖会上唯一的出价者。”查理·芒格说：“倒过来想，一定要倒过来想。”卡尔·伊坎说：“买别人不买的东西，在没人买的时候买。”巴菲特说：“别人恐惧时我贪婪，别人贪婪时我恐惧\n不接下跌的飞刀\n。估值高的股票本身估值下调的空间大，加上这类股票的未来增长预期同样存在巨大下调空间，因此这种“戴维斯双杀”导致的下跌一般持续时间长而且幅度大，刚开始暴跌时不宜逆向投资\n最后，看股价暴跌本身是否会导致公司的基本面进一步恶化，即是否有索罗斯所说的反身性。贝尔斯登和雷曼的股价下跌直接引发了债券评级的下降以及交易对手追加保证金的要求，这种负反馈带来的连锁反应就不适合逆向投资\n对于灾难的发生，每个人都很难过，但是投资决策不应该加入感情的因素。\nA股的情绪波动容易走极端，因此“人多的地方不去”是至理名言\n作为投资者，我们能分辨清楚的就是市场的错误定价在哪个板块以及错误的程度有多大，然后远离被高估的板块，买入被低估的公司。至于市场要等多久才会进行纠错，纠错前会不会把这种错误定价进一步扩大，就不是能够预测的了\n在大多数时候，真理在大多数人手里；在少数时候，真理在少数人手里。如何区别这两种情况呢？一般说来，趋势的初期和末期，就是真理在少数人手里的时候\n买早了还得熬得住，这是逆向投资者的必备素质。投资者必须明白一个道理，市场中没有人能够卖在最高点、买在最低点\n由此可见，流动性一旦收得紧了，很多东西的价格就会撑不住，其中的道理很简单：所有的价格其实本质上都是一种货币现象，就是说你的资金跟你所有东西的价格之和其实是一致的\n右侧投资 常有人说，在A股做价值投资难，概念股满天飞，好公司没人要，便宜的股票买入后往往变得更便宜\n公司有四种：好的、平庸的、烂的、看不懂的；股票也有四种：被低估的、合理的、被高估的、估不准的。人的知识、时间、精力都是有限的，因此看不懂的公司占了一大半\n所谓的投资，就是牢牢抓住这个定价权。就像茅台，整天在涨价，日子太好过了，怎么提价都有人买，为什么呢？就是有这个定价权\n选股票，一定是先选行业。就像买房子，一定是先看社区，社区不行，房子再漂亮也不行\n我认为现在市场价格波动的风险比较大，但是本金永久性丧失的风险不大。因为市盈率在10倍，我觉得是中国的低点\n同一件事，看多者和看空者往往作截然不同的解释——你看到的是你想看到的。\n两个卖鞋的人到了光脚岛。悲观者说，这里人不穿鞋，卖鞋根本没市场。乐观者说，这里人没鞋穿，卖鞋市场巨大。短期看来，悲观者是对的，因为短期内要改变岛民的穿鞋习惯是很难的。长期看来，乐观者是对的，因为岛民迟早会认识到穿鞋比光脚舒服。同一事情两种解读，往往是考虑的时间跨度不同\n所有的社会学规律都有反例，股市中更是如此。股市中的任何规律、方法只能提高你的成功率，没有百战百胜的灵丹妙药。我说吸烟有害身体健康，你说你三舅爷是个大烟枪但活了99岁。我说低估值价值股平均跑赢高估值成长股，你说你买的那个100倍市盈率的成长股已经涨了5倍了。我说的是规律，你说的是个例。咱俩都对，只是我对得更有代表性一些\n正如乔尔·格林布拉特（Joel Greenblatt）所说，第一，价值投资是有效的；第二，价值投资不是每年都有效；第二点是第一点的保证\n在建立研究方法之前，必须区分清楚“赌赢了”和“赌对了”是两回事\n我认为彼得·林奇说得对，他说当有人告诉你“A公司是下一个B公司”的时候，第一要把A卖掉，第二要把B也卖掉。因为第一，A永远不会成为B；第二，B已经被当作成功的代名词，说明它的优点可能已经体现在现在的股价中了\n客户彻底放弃了他们，因为机构客户最不能忍受的就是基金经理的风格飘移\n这说明在季报公布出来的业绩中，成长股很容易低于预期，而价值股很容易超出预期，因为未来不会有乐观者想象的那么好，也不会有悲观者想象的那么差\n公司的品质好坏，关键是看能不能具有定价权。并不是说消费品就好，投资品就不好，关键还是在于有没有定价权。\n对品质的判断，第二个要注意的是差异化竞争和同质化竞争的区别\n我认为做一个证券分析师就很有先发优势。做10年之后，和新进来的人相比，你的市场影响力、在行业内的人脉、对行业的理解是完全不一样的，这是个好行业。像外国的券商研究所里有60多岁了还在做分析师的人，也做得很快乐。但是，做程序员就不一定是一个好行业，可能3年就需要学一种新的计算机语言，除非你转型做产品经理。中国的很多行业就是这样，总是有后浪不断去推前浪，最后把前浪拍死在沙滩上。这样的行业就很难受。\n对行业格局的分析和对公司核心竞争力的理解是“道”，财务分析只是“术”，但是后者对前者起着验证和把关的作用。\n最后钱都被平台赚走了，内容公司只是为他人作嫁衣裳\n比如说高端酒是得品牌者得天下，中低端酒得渠道者得天下。中低端酒的品牌忠诚度没有那么高，就看谁的渠道铺得更广，管理得更精细\n国家给的寡头垄断（例如公用事业）往往伴随着价格管制，长期投资回报一般不会太高。只有市场竞争、行业洗牌后产生的寡头垄断才有定价权","title":"投资中最简单的事"},{"content":"SQL 对某字段去重， 且取最新的一条数据 在SQL中，可以使用子查询和MAX函数来对某字段去重，并取最新的一条数据。以下是示例代码：\n1 2 3 4 5 6 7 SELECT t1.* FROM table_name t1 INNER JOIN ( SELECT MAX(column1) AS max_column1 FROM table_name GROUP BY column2 ) t2 ON t1.column1 = t2.max_column1; 在上面的代码中，首先使用子查询和MAX函数，取出每个column2字段的最大值，然后将结果与原表进行INNER JOIN操作，得到最新的一条数据。 需要注意的是，如果需要根据多个字段进行去重和排序，可以在子查询中指定多个字段，并在INNER JOIN操作中使用多个字段进行连接。如果需要查询的字段比较多，可以使用通配符*来代替所有字段。 总之，在SQL中可以使用子查询和MAX函数来对某字段去重，并取最新的一条数据。需要指定需要查询的表名、字段名和排序方式，以及使用INNER JOIN操作进行连接。\n查看是否用重复数据 1 SELECT name, COUNT(*) c FROM table GROUP BY name HAVING c \u0026gt; 1; mysql inner, left, right, full join https://stackoverflow.com/a/28719292\nt+1 场景是什么意思 t+1场景通常指的是预测未来某个时间点的情况，即在当前时刻t，预测下一个时间点t+1的情况。这个概念在很多领域都有应用，例如金融、经济、物流、天气预报等等。 在金融领域，t+1场景通常指的是预测未来某个时间点的股票价格、汇率、利率等等。例如，如果当前时刻是2021年1月1日，那么预测2021年1月2日某个股票的价格就是一个t+1场景。 在物流领域，t+1场景通常指的是预测未来某个时间点的货物运输情况，例如预测某个包裹在下一个时间点是否能够按时到达目的地。 在人工智能和机器学习领域，t+1场景通常指的是使用历史数据来预测未来某个时间点的情况，例如预测明天的气温、下一个小时的交通流量等等。这个过程通常需要使用时间序列分析、回归分析等技术来处理。 总之，t+1场景是一个非常常见的概念，可以用于预测未来某个时间点的情况，帮助人们做出更好的决策。\n湖仓能力 “湖仓能力”通常指的是企业在数据仓库（Data Warehouse）方面的能力，即构建和管理大规模数据仓库的能力。数据仓库是一个用于存储和管理企业数据的系统，它可以集成来自不同数据源的数据，并对这些数据进行处理、分析和挖掘，以帮助企业做出更好的决策。 “湖仓”是数据仓库的一种类型，它是近年来兴起的一种新型数据仓库，与传统的关系型数据仓库（RDBMS）不同，湖仓采用了分布式、非关系型的架构，可以处理更加海量和复杂的数据，例如半结构化数据、文本数据、图像数据等等。湖仓通常采用了Hadoop、Spark、Hive、Presto等开源技术来构建和管理。 因此，“湖仓能力”通常指企业在构建和管理大规模、分布式、非关系型的数据仓库方面的能力，包括数据的采集、清洗、存储、处理、分析、挖掘等等。对于现代企业来说，湖仓能力已经成为了一项非常重要的核心竞争力，可以帮助企业更好地理解和应对市场变化，提高决策的准确性和效率。\nJWT header . payload . secret header 和 payload 都是可以使用 base64 进行解密, 获取其中的 json 信息, 是公开的. secret 是使用header中的 加密算法 对header+payload+secret进行计算, 验证jwt信息没有被修改过.\nhttps://jwt.io/introduction\njwt 1 2 3 4 5 HMACSHA256( base64UrlEncode(header) + \u0026#34;.\u0026#34; + base64UrlEncode(payload), your-256-bit-secret ) replace into replace into 跟 insert 功能类似，不同点在于：replace into 首先尝试插入数据到表中， 1. 如果发现表中已经有此行数据（根据主键或者唯一索引判断）则先删除此行数据，然后插入新的数据。 2. 否则，直接插入新数据。 要注意的是：插入数据的表必须有主键或者是唯一索引！否则的话，replace into 会直接插入数据，这将导致表中出现重复的数据。\ngolang 避免多次打印同一个错误 打印错误也是一种错误的处理方式. 所有, 要么选择打印错误, 要么选择向上抛出错误. 不要两者同时.\n","permalink":"https://ynikl.github.io/weekly/2023-04-02/","summary":"SQL 对某字段去重， 且取最新的一条数据 在SQL中，可以使用子查询和MAX函数来对某字段去重，并取最新的一条数据。以下是示例代码：\n1 2 3 4 5 6 7 SELECT t1.* FROM table_name t1 INNER JOIN ( SELECT MAX(column1) AS max_column1 FROM table_name GROUP BY column2 ) t2 ON t1.column1 = t2.max_column1; 在上面的代码中，首先使用子查询和MAX函数，取出每个column2字段的最大值，然后将结果与原表进行INNER JOIN操作，得到最新的一条数据。 需要注意的是，如果需要根据多个字段进行去重和排序，可以在子查询中指定多个字段，并在INNER JOIN操作中使用多个字段进行连接。如果需要查询的字段比较多，可以使用通配符*来代替所有字段。 总之，在SQL中可以使用子查询和MAX函数来对某字段去重，并取最新的一条数据。需要指定需要查询的表名、字段名和排序方式，以及使用INNER JOIN操作进行连接。\n查看是否用重复数据 1 SELECT name, COUNT(*) c FROM table GROUP BY name HAVING c \u0026gt; 1; mysql inner, left, right, full join https://stackoverflow.com/a/28719292\nt+1 场景是什么意思 t+1场景通常指的是预测未来某个时间点的情况，即在当前时刻t，预测下一个时间点t+1的情况。这个概念在很多领域都有应用，例如金融、经济、物流、天气预报等等。 在金融领域，t+1场景通常指的是预测未来某个时间点的股票价格、汇率、利率等等。例如，如果当前时刻是2021年1月1日，那么预测2021年1月2日某个股票的价格就是一个t+1场景。 在物流领域，t+1场景通常指的是预测未来某个时间点的货物运输情况，例如预测某个包裹在下一个时间点是否能够按时到达目的地。 在人工智能和机器学习领域，t+1场景通常指的是使用历史数据来预测未来某个时间点的情况，例如预测明天的气温、下一个小时的交通流量等等。这个过程通常需要使用时间序列分析、回归分析等技术来处理。 总之，t+1场景是一个非常常见的概念，可以用于预测未来某个时间点的情况，帮助人们做出更好的决策。\n湖仓能力 “湖仓能力”通常指的是企业在数据仓库（Data Warehouse）方面的能力，即构建和管理大规模数据仓库的能力。数据仓库是一个用于存储和管理企业数据的系统，它可以集成来自不同数据源的数据，并对这些数据进行处理、分析和挖掘，以帮助企业做出更好的决策。 “湖仓”是数据仓库的一种类型，它是近年来兴起的一种新型数据仓库，与传统的关系型数据仓库（RDBMS）不同，湖仓采用了分布式、非关系型的架构，可以处理更加海量和复杂的数据，例如半结构化数据、文本数据、图像数据等等。湖仓通常采用了Hadoop、Spark、Hive、Presto等开源技术来构建和管理。 因此，“湖仓能力”通常指企业在构建和管理大规模、分布式、非关系型的数据仓库方面的能力，包括数据的采集、清洗、存储、处理、分析、挖掘等等。对于现代企业来说，湖仓能力已经成为了一项非常重要的核心竞争力，可以帮助企业更好地理解和应对市场变化，提高决策的准确性和效率。","title":"2023 04 02"},{"content":"golang 泛型: type parameters interface 定义一系列类型 type constraint ~string [s [] E, E any] type inferene 官方泛型介绍\n判断时间是否重叠 startA \u0026lt; endB and endA \u0026gt; startB stackoverflow\npython -m python -m 是 Python 命令行工具中的一个选项，用于执行 Python 模块\npypi 名称 Python Package Index , python 的包的目录\n拥有多个小项目对公司成本的影响 扎克伯格 的裁员信\n\u0026ldquo;人们很容易认为，只要一个项目产生的价值超过其直接成本，它就是正收益的。 但是，任何项目都需要一个主管，我们要么提拔一个工程师，要么从另一个项目挑选一个人，让其负责该项目。这两种情况都分散了人才，并且创造出了更多的管理层。 如果项目继续发展，整个团队也许分散到多个楼层或多个办公室，这让沟通变得更加困难。 我们还需要为项目配备更多的笔记本电脑和其他资源，这些更多的工程师还会导致雇佣更多的 IT 人员、HR 人员和招聘人员。 随着团队越来越大，效率不断降低，反应变迟钝了。它也许会与另一个团队的工作重叠，或者本应使用现有基础架构时却构建了一个定制系统。 总之，那些低优先级项目对公司重要性不大，却带来复杂的间接成本，很容易低估它们。\u0026rdquo;\nAES Advanced Encryption Standard 当前最流行的对称加密\nwikipeida\ngolang http 请求转化成 curl 可以方便地将 http.Request 转化成可直接输出成字符串的 curl 对象\nhttp2curl\n","permalink":"https://ynikl.github.io/weekly/2023-03-26/","summary":"golang 泛型: type parameters interface 定义一系列类型 type constraint ~string [s [] E, E any] type inferene 官方泛型介绍\n判断时间是否重叠 startA \u0026lt; endB and endA \u0026gt; startB stackoverflow\npython -m python -m 是 Python 命令行工具中的一个选项，用于执行 Python 模块\npypi 名称 Python Package Index , python 的包的目录\n拥有多个小项目对公司成本的影响 扎克伯格 的裁员信\n\u0026ldquo;人们很容易认为，只要一个项目产生的价值超过其直接成本，它就是正收益的。 但是，任何项目都需要一个主管，我们要么提拔一个工程师，要么从另一个项目挑选一个人，让其负责该项目。这两种情况都分散了人才，并且创造出了更多的管理层。 如果项目继续发展，整个团队也许分散到多个楼层或多个办公室，这让沟通变得更加困难。 我们还需要为项目配备更多的笔记本电脑和其他资源，这些更多的工程师还会导致雇佣更多的 IT 人员、HR 人员和招聘人员。 随着团队越来越大，效率不断降低，反应变迟钝了。它也许会与另一个团队的工作重叠，或者本应使用现有基础架构时却构建了一个定制系统。 总之，那些低优先级项目对公司重要性不大，却带来复杂的间接成本，很容易低估它们。\u0026rdquo;\nAES Advanced Encryption Standard 当前最流行的对称加密\nwikipeida\ngolang http 请求转化成 curl 可以方便地将 http.Request 转化成可直接输出成字符串的 curl 对象","title":"2023 03 26"},{"content":"总结 要重视自己没有退休金的未来生活, 现在总是不敢去认真对待未来, 总是天真地认为未来的 一切都变好的.\n进行资金投资的时候不能简单地求稳, 需要根据自己目标的年化率选择合适的投资方式, 不 然可能年物价上涨的都跑不过, 导致购买力下降\n开发自己的能力潜能, 提高自己的年薪是打工人最好提升收入的方式.\n要对未来有明确的规划, 对一些专项事务, 准备目标基金, 比如孩子结婚, 购置房产.\n整理和弄清自己的财务状况, 量入为出, 尽量缩进不必要的开支.\n书摘 “假设你现在30岁，计划在55岁退休，终老年龄80岁。目前城市基本生活费和医疗保险支出的最基本消费是1500元/月，暂考虑4%的通货膨胀率，25年后，要维持目前的生活水平，需要4000元/月。25年的退休生活至少需要4000元/月×12月×25年=120万元，如果加上旅游、休闲支出按月消费最基本的1000元计算，还将增加80万元，总共200万元。200万，这只是一个人的费用，夫妻双方费用需求总和保守估计也将超过400万元”\n“养老金是国家为保障国民在丧失劳动能力时，即在残疾或晚年状态下也能享有基本生活权利的制度”\n“这15年的零用钱都是孩子们给的，拿零用钱都得看他们脸色，我哪敢再向他们开口要钱请朋友吃饭……”\n“以前常听老人说“过了40岁就该处处花钱了”，这句话果然没错。尽管收入有增加，但是支出的增长速度更快，所以人生收支变成负数的时期就是从40岁中期开始的。再加上45岁后还要面临退休的问题，收入不保的可能性大大增加”\n“想到自己以前没有做好人生的理财规划，总是漫无目标地过着安逸的生活，天真地以为“以后总有办法解决”，不禁埋怨起自己来”\n“不是有句话说，当你觉得太迟的时候，其实正是最早的一刻”\n“但是每个人必须做的就是为目标资金做准备，为此即便要放弃目前的一部分支出和财产，也要毫不犹豫予以舍弃”\n“掌握自己目前的净资产搞清自己每月收支状况推算自己的劳动时间设定自己期望的退休生活标准持续为退休生活进行投资”\n“人们觉得只要有利息产生，储蓄额上升了，资产也会随之增加，其实这只不过是人们的一种错觉，因为即使储蓄额上升，但如果物价也一同上涨，购买力还是不会发生任何变化，到最后顶多也只能保本，并没有形成增值”\n“掌握自己目前的净资产搞清自己每月收支状况推算自己的劳动时间设定自己期望的退休生活标准持续为退休生活进行投资”\n“在估算储蓄额度时，有两件事要注意。首先，要适当控制支出；其次，要不断通过努力来增加收入。此外，在估算今后生活所需的支出费用时，不仅要将现在的支出计算在内，退休后的预计支出也要包括在内。每月花多少生活费是一目了然的，但子女教育费和结婚费用，以及有可能是大额投入的医疗费也同样不能忽视”\n“企业出现赤字会影响企业稳定，家庭也是一样，只有家庭的财务结构搭建得十分扎实，才可以指望家庭经济出现增长。为此我们要审视家庭的财务状况，必要的话要进行结构调整，减少不必要的支出，将只产生费用的资产果断处理掉，只保留能够带来收益的资产。结构不佳的财务状况就好像一艘有破洞的船一样，如果钱一直流出去，那赚再多的钱也没用。但是要注意，家庭资产的结构调整不是小俊兄一人的事，必须和夫人共同商议后再做决定。”\n“像我们这样的上班族要想提高收入，首选方式是提高年薪。为了达到这个目的，光是干好本职工作是不够的，还要倾注更大的努力专注于自我潜能开发。我们不是经常见到因为英语能力不足而失去晋升机会或更好工作岗位的现实例子吗？只有拥有实力，年薪才有可能提高。上班族年薪拿到好几十万或几百万的故事离我们并不遥远，有的就发生在我们身边……据统计，大部分想成为富翁的人并不指望通过工作来致富，而是梦想着通过理财来成为富翁，这听起来是不是很滑稽？”\n“为了更有效地发挥家庭账簿的作用，一定要有个比较的标准。每月需要建立预算，并时常拿这个预算与实际支出情况作比较，此外需要注意一点，预算必须将节约目标与实际情况合理地结合在一起，没有节约目标或目标脱离现实，这样的预算就不具任何意义”\n“今后，比起资金的募集，如何更有效地通过运作让资金增值将会成为整个社会关注的焦点。储蓄的时代正在转变成为投资的时代，但问题是很多人至今没有看到社会的这种变化，仍然固守着自己亘古不变的储蓄观念。”\n“如果因为担心失败而干脆放弃投资，这样的企业不会再成长，最终逃脱不了被市场淘汰的命运。”\n“如果想通过25年的储蓄来为25年的退休生活筹集资金，考虑到物价等因素的存在，即使把现在一半的收入都存进去也还是不够。归根结底我们的一生中必须有一段时期要通过承担风险来提高收入，我们要趁自己还年轻、还有稳定收入的时候来承担风险。在自己还有固定收入的时候，如果因为投资出现亏损，我们还可以一直等待获利那一天的到来，并且还可以通过节约和储蓄来弥补亏损的部分。但是等上了年纪没有固定收入后，你身上的钱都是用来维持生计的，资金上稍微出一点问题就会给你的人生带来致命的打击。”\n“我认为基金投资的成功原则有五个，三个核心原则和两个附属原则，三个核心原则为‘挑选优良基金’、‘分散投资’和‘长期投资’，此外的两个原则是‘找到符合自己的投资取向’和‘积极听取专家的意见’。”\n“比方说按照4.5％的利率（税后为3.8%）进行一个25年期的定期储蓄，最后的结果会如何？虽然25年后能安全地获得利息，但是这不能称之为安全的投资。还记得我们之前提到过的物价因素吧，如果年平均物价上涨率超过3.8%该怎么办？因利息而带来的资产增值效果被物价的上涨所抵消，资产购买力反而减少，假设物价年平均上涨率为5%，25年后物价上涨了3.4倍，与之相反，资产增值仅为2.5倍（按复利计算），资产（金额）虽然增长，但实际购买力反而下降25%，这就等于是说存了二十多年的钱，先别指望资产增加，事实上连本金都赔了21%，这样一种投资当然不能算作安全的投资。在筹集退休生活资金时，不考虑物价上涨因素，而一味关注本金额度的保障，这么做实际上没有任何意义。”\n“我们活在这世上需要应对两个最大的危险，一个是过早死去的危险，另一个是活得太长的危险，”\n“思凡所说的要应对太早死亡的危险，指的是人寿保险吗？我也买了这种保险，是在第一个孩子出生时买的，现在已经是第6年了。”“没错。一家之主本来就对家人负有经济上的抚养义务，而且这种抚养义务不是只有在活着的时候，即便不幸身故，也应该为家人做好准备”\n“在计算费用时最好将固定支出和浮动支出分开计算。固定支出为住房贷款偿还费用、汽车分期付款、保险费、公共教育费、税金等一些固定发生的费用，这些是不可能按自己意愿进行调节的。与之相反，浮动支出则是像伙食费、课外教育费、零用钱、文化生活费、服装费等可以根据自身的选择来进行调节的费用，要想确保一定的储蓄能力靠的就是对这些费用的调节。”\n“很多人都会和钱小俊一样感受到生活的冷酷，于是乎不少人选择了逃避，干脆就不管不问自己的财务状况，但如果不想自己的晚年陷入悲惨境地，不想等到老了之后再去面对，最好还是现在正视自己的财务问题。”\n","permalink":"https://ynikl.github.io/books/30-year-after/","summary":"总结 要重视自己没有退休金的未来生活, 现在总是不敢去认真对待未来, 总是天真地认为未来的 一切都变好的.\n进行资金投资的时候不能简单地求稳, 需要根据自己目标的年化率选择合适的投资方式, 不 然可能年物价上涨的都跑不过, 导致购买力下降\n开发自己的能力潜能, 提高自己的年薪是打工人最好提升收入的方式.\n要对未来有明确的规划, 对一些专项事务, 准备目标基金, 比如孩子结婚, 购置房产.\n整理和弄清自己的财务状况, 量入为出, 尽量缩进不必要的开支.\n书摘 “假设你现在30岁，计划在55岁退休，终老年龄80岁。目前城市基本生活费和医疗保险支出的最基本消费是1500元/月，暂考虑4%的通货膨胀率，25年后，要维持目前的生活水平，需要4000元/月。25年的退休生活至少需要4000元/月×12月×25年=120万元，如果加上旅游、休闲支出按月消费最基本的1000元计算，还将增加80万元，总共200万元。200万，这只是一个人的费用，夫妻双方费用需求总和保守估计也将超过400万元”\n“养老金是国家为保障国民在丧失劳动能力时，即在残疾或晚年状态下也能享有基本生活权利的制度”\n“这15年的零用钱都是孩子们给的，拿零用钱都得看他们脸色，我哪敢再向他们开口要钱请朋友吃饭……”\n“以前常听老人说“过了40岁就该处处花钱了”，这句话果然没错。尽管收入有增加，但是支出的增长速度更快，所以人生收支变成负数的时期就是从40岁中期开始的。再加上45岁后还要面临退休的问题，收入不保的可能性大大增加”\n“想到自己以前没有做好人生的理财规划，总是漫无目标地过着安逸的生活，天真地以为“以后总有办法解决”，不禁埋怨起自己来”\n“不是有句话说，当你觉得太迟的时候，其实正是最早的一刻”\n“但是每个人必须做的就是为目标资金做准备，为此即便要放弃目前的一部分支出和财产，也要毫不犹豫予以舍弃”\n“掌握自己目前的净资产搞清自己每月收支状况推算自己的劳动时间设定自己期望的退休生活标准持续为退休生活进行投资”\n“人们觉得只要有利息产生，储蓄额上升了，资产也会随之增加，其实这只不过是人们的一种错觉，因为即使储蓄额上升，但如果物价也一同上涨，购买力还是不会发生任何变化，到最后顶多也只能保本，并没有形成增值”\n“掌握自己目前的净资产搞清自己每月收支状况推算自己的劳动时间设定自己期望的退休生活标准持续为退休生活进行投资”\n“在估算储蓄额度时，有两件事要注意。首先，要适当控制支出；其次，要不断通过努力来增加收入。此外，在估算今后生活所需的支出费用时，不仅要将现在的支出计算在内，退休后的预计支出也要包括在内。每月花多少生活费是一目了然的，但子女教育费和结婚费用，以及有可能是大额投入的医疗费也同样不能忽视”\n“企业出现赤字会影响企业稳定，家庭也是一样，只有家庭的财务结构搭建得十分扎实，才可以指望家庭经济出现增长。为此我们要审视家庭的财务状况，必要的话要进行结构调整，减少不必要的支出，将只产生费用的资产果断处理掉，只保留能够带来收益的资产。结构不佳的财务状况就好像一艘有破洞的船一样，如果钱一直流出去，那赚再多的钱也没用。但是要注意，家庭资产的结构调整不是小俊兄一人的事，必须和夫人共同商议后再做决定。”\n“像我们这样的上班族要想提高收入，首选方式是提高年薪。为了达到这个目的，光是干好本职工作是不够的，还要倾注更大的努力专注于自我潜能开发。我们不是经常见到因为英语能力不足而失去晋升机会或更好工作岗位的现实例子吗？只有拥有实力，年薪才有可能提高。上班族年薪拿到好几十万或几百万的故事离我们并不遥远，有的就发生在我们身边……据统计，大部分想成为富翁的人并不指望通过工作来致富，而是梦想着通过理财来成为富翁，这听起来是不是很滑稽？”\n“为了更有效地发挥家庭账簿的作用，一定要有个比较的标准。每月需要建立预算，并时常拿这个预算与实际支出情况作比较，此外需要注意一点，预算必须将节约目标与实际情况合理地结合在一起，没有节约目标或目标脱离现实，这样的预算就不具任何意义”\n“今后，比起资金的募集，如何更有效地通过运作让资金增值将会成为整个社会关注的焦点。储蓄的时代正在转变成为投资的时代，但问题是很多人至今没有看到社会的这种变化，仍然固守着自己亘古不变的储蓄观念。”\n“如果因为担心失败而干脆放弃投资，这样的企业不会再成长，最终逃脱不了被市场淘汰的命运。”\n“如果想通过25年的储蓄来为25年的退休生活筹集资金，考虑到物价等因素的存在，即使把现在一半的收入都存进去也还是不够。归根结底我们的一生中必须有一段时期要通过承担风险来提高收入，我们要趁自己还年轻、还有稳定收入的时候来承担风险。在自己还有固定收入的时候，如果因为投资出现亏损，我们还可以一直等待获利那一天的到来，并且还可以通过节约和储蓄来弥补亏损的部分。但是等上了年纪没有固定收入后，你身上的钱都是用来维持生计的，资金上稍微出一点问题就会给你的人生带来致命的打击。”\n“我认为基金投资的成功原则有五个，三个核心原则和两个附属原则，三个核心原则为‘挑选优良基金’、‘分散投资’和‘长期投资’，此外的两个原则是‘找到符合自己的投资取向’和‘积极听取专家的意见’。”\n“比方说按照4.5％的利率（税后为3.8%）进行一个25年期的定期储蓄，最后的结果会如何？虽然25年后能安全地获得利息，但是这不能称之为安全的投资。还记得我们之前提到过的物价因素吧，如果年平均物价上涨率超过3.8%该怎么办？因利息而带来的资产增值效果被物价的上涨所抵消，资产购买力反而减少，假设物价年平均上涨率为5%，25年后物价上涨了3.4倍，与之相反，资产增值仅为2.5倍（按复利计算），资产（金额）虽然增长，但实际购买力反而下降25%，这就等于是说存了二十多年的钱，先别指望资产增加，事实上连本金都赔了21%，这样一种投资当然不能算作安全的投资。在筹集退休生活资金时，不考虑物价上涨因素，而一味关注本金额度的保障，这么做实际上没有任何意义。”\n“我们活在这世上需要应对两个最大的危险，一个是过早死去的危险，另一个是活得太长的危险，”\n“思凡所说的要应对太早死亡的危险，指的是人寿保险吗？我也买了这种保险，是在第一个孩子出生时买的，现在已经是第6年了。”“没错。一家之主本来就对家人负有经济上的抚养义务，而且这种抚养义务不是只有在活着的时候，即便不幸身故，也应该为家人做好准备”\n“在计算费用时最好将固定支出和浮动支出分开计算。固定支出为住房贷款偿还费用、汽车分期付款、保险费、公共教育费、税金等一些固定发生的费用，这些是不可能按自己意愿进行调节的。与之相反，浮动支出则是像伙食费、课外教育费、零用钱、文化生活费、服装费等可以根据自身的选择来进行调节的费用，要想确保一定的储蓄能力靠的就是对这些费用的调节。”\n“很多人都会和钱小俊一样感受到生活的冷酷，于是乎不少人选择了逃避，干脆就不管不问自己的财务状况，但如果不想自己的晚年陷入悲惨境地，不想等到老了之后再去面对，最好还是现在正视自己的财务问题。”","title":"30年后, 你拿什么养活自己"},{"content":"人类简史 总结 人类进化历史上有三次革命 认知革命: 人类通过共同的虚拟故事(信仰,部落等)开始了大规模的合作, 认知革命让人类脱离了生物学的进化路程.\n农业革命: 人类部落人口数量开始爆发性增长, 人类第一次开始不得不相互胁迫进入更糟糕的生活, 开始了长期的农业劳作(工作时间远大于采集时期). 人口爆发增加就需要更大的虚拟故事来进行合作, 出现了城镇, 国家, 宗教.\n科学革命: 人类开始承认自己无知, 用数据和实现代替原先用神话来掩饰不知道的问题.\n虚拟故事 包括现在\u0026quot;人人平等\u0026quot; 也只是因为我们现在社会需要这种解释, 大家愿意相信这样子的虚拟故事.\n我们相信某种秩序，并非因为它是客观的现实，而是因为相信它可以让人提升合作效率、打造更美好的社会。这种由想象所建构的秩序绝非邪恶的阴谋或是无用的空谈，而是唯一能让大群人类合作的救命仙丹。但也别忘了，汉谟拉比也可以用同样的逻辑来捍卫他的阶级原则：“我知道所谓上等人、平民和奴隶在本质上其实并没有什么不同。但如果我们这么相信，就能创造出一个稳定繁荣的社会。”\n国家保证个人财产是神圣不可侵犯的, 是因为国家需要吸引外来投资和让人民有努力工作劲头.\n资本主义 在新的资本主义教条里，最神圣的开宗明义第一条就是：“生产的利润，必须再投资于提高产量。\n资本是指投入的生产的资金, 而财富是指固定不动的资金\n收获 农业革命之后人类开始违背自己的生物学进化规则, 开始长期拱背在农田里工作, 久坐办公室之前.\n十字军东征是因为欧洲贵族的信奉冲突(认知失调)导致的, 即信奉天主教,有遵守骑士精神.\n一级混沌 不会因为受到预测而发生改变(比如, 天气), 二级混沌会\n金钱是最成功的人类共同想象\n社会性的贫穷，指的是某些人掌握了机会，却不愿意释出给他人；\n完全自由的市场可能会导致资本家通过垄断或者串通打击劳工\n由于人类产能上升, 现在社会鼓吹新型的\u0026quot;消费大众\u0026quot;\n现在\u0026quot;独立\u0026quot;, \u0026ldquo;平等\u0026rdquo;, \u0026ldquo;自由\u0026quot;的思潮盛行, 让每个人都有自己的, 社群和家庭的凝聚力下降, 让我们每个人都感到更加的孤独.\n如果出现的长生不老的药物, 可能就会引起世界强烈的愤怒和焦虑, 现在让穷人自己安慰的唯一理由, 就是死亡是完全公平的.\n尼采\n只要有了活下去的理由，几乎什么都能够忍受。生活有意义，就算在困境中也能甘之如饴；生活无意义，就算在顺境中也度日如年。\n在科学角度, 人生没有意义. 意义都是我们自己赋予, 比较中世纪多做好事期待来世. 人们生活在自己的臆想之中就会过得很幸福.\n吉尔伽美什计划是旨在大幅提升人体机能，预防和治疗人类疑难疾病，从而大幅度的增长人类寿命的一项人体改造计划，最终走向可能导致超级人类的出现，有人预测在2050年左右会出现长生之人。\n书摘 在历史的路上，有三大重要革命：大约7万年前，“认知革命”（Cognitive Revolution）让历史正式启动。大约12000年前，“农业革命”（Agricultural Revolution）让历史加速发展。而到了大约不过是500年前，“科学革命”（Scientific Revolution）可以说是让历史画下句点而另创新局。\n生物学家把所有生物划分成不同的“物种”。而所谓属于同一物种，就是它们会彼此交配，能够产出下一代。\n从同一个祖先演化而来的不同物种，会属于同一个“属”（genus）。\n同一科的所有成员，都能追溯到某个最早的雄性或雌性祖先。\n在欧洲和西亚的人类成了“Homo neanderthalensis”，意为“来自尼安德谷（Neander Valley）的人”，一般简称为“尼安德特人”（Neanderthals）。比起我们这种“智人”，尼安德特人更为魁梧，肌肉也更发达，非常适应西方的欧亚大陆在冰河时期的寒冷气候。\n在欧洲和西亚的人类成了“Homo neanderthalensis”，意为“来自尼安德谷（Neander Valley）的人”，一般简称为“尼安德特人”（Neanderthals）。比起我们这种“智人”，尼安德特人更为魁梧，肌肉也更发达，非常适应西方的欧亚大陆在冰河时期的寒冷气候。至于在东方的亚洲，住的则是“Homo erectus”（直立人），一共存续了将近200万年，是目前所知存续最久的人类物种，而我们智人看来也很难打破这项纪录。\n至于在印度尼西亚的爪哇岛，则住着“Homo soloensis”（梭罗人，拉丁文意为“来自梭罗谷的人”），\n科学家把这种独特的人种称为“Homo floresiensis”（弗洛里斯人），\n因为大脑较大，远古人类付出的代价有两种：首先是得花更多时间寻找食物，其次是肌肉退化萎缩。\n这位母亲就更有机会渡过难关，未来也可能再生下更多孩子。于是，自然选择（natural selection，又译“天择”或“自然淘汰”）就让生产开始提前。\n所以，想养孩子，就需要其他家族成员和邻居持续提供协助。要养活一个小孩，得靠全部落共同的努力。\n黑猩猩要咀嚼生肉，每天得花上五个小时，但人类吃的是熟食，每天花上一小时就够。\n而且还有铁证证明他们会照顾病人和弱者。（考古学家从尼安德特人的遗骸发现，有些人有严重的身体残疾，但活了相当大的岁数，可见有亲属提供照料。）\n最近数十年来，替代理论一直是这个领域的大致共识，这项理论不只背后的考古证据更可靠，政治上也更为正确（如果说现代人类族群各有明显基因差异，几乎可说就是打开了种族主义的潘多拉盒子，而科学家可没这打算）。\n就证明混种繁衍理论至少有部分正确。但这也不是说替代理论完全错误。毕竟，尼安德特人和丹尼索瓦人的基因仍然只占了现代人基因组的一小部分，\n人类的社会本能也和黑猩猩没有什么不同，只适用于比较亲近的小团体。等到这个团体过大，社交秩序就会崩坏，使团体分裂。\n或者古老的部落，任何大规模人类合作的根基，都在于某种只存在于集体想象中的虚构故事。例如教会的根基就在于宗教故事。像是两个天主教信徒，就算从未谋面，还是能够一起参加十字军东征或是一起筹措资金盖起医院，原因就在于他们同样相信神化身为肉体、让自己被钉在十字架上救赎我们的罪。所谓的国家，也是立基于国家故事。两名互不认识的塞尔维亚人，只要都相信塞尔维亚国家主体、国土、国旗确实存在，就可能冒着生命危险拯救彼此。至于司法制度，也是立基于法律故事。从没见过对方的两位律师，还是能同心协力为另一位完全陌生的人辩护，只因为他们都相信法律、正义、人权确实存在。（当然，他们也相信付的律师费确实存在。）\n标致公司只是我们的一个集体想象，这种想象在法律上称为“法律拟制”（legal fiction）。像是公司，我们没办法明确指着它，它不是一个实体对象，而是以一种法律实体的方式存在。\n然而，所谓“想象的现实”指的是某件事人人都相信，而且只要这项共同的信念仍然存在，力量就足以影响世界。\n于是，认知革命正是历史从生物学中脱离而独立存在的起点。\n认知革命之后，我们要解释智人的发展，依赖的主要工具就不再是生物学理论，而改用历史叙事。\n我们的饮食习惯、冲突和性欲之所以是现在的样貌，正是因为我们还保留着狩猎采集者的头脑，但所处的却是工业化之后的环境，\n例如只要肯挑水或是当个生产线的工人，就能活下来，并把自己那些平庸无奇的基因传下去。 采集者不只深深了解自己周遭的动物、植物和各种物品，也很了解自己的身体和感官世界。\n例如只要肯挑水或是当个生产线的工人，就能活下来，并把自己那些平庸无奇的基因传下去。\n而等到农业和工业时代开展，人类开始能靠着别人的技能生存下来，就算是低能的人也开始有了生存空间。例如只要肯挑水或是当个生产线的工人，就能活下来，并把自己那些平庸无奇的基因传下去。\n在现代的富裕社会，平均每周的工时是40~45小时，发展中国家则是60甚至80小时；但如果是狩猎采集者，就算住在最贫瘠的地区（像是卡拉哈里沙漠），平均每周也只需要工作35~45小时。他们大概只需要每三天打猎一次，每天采集3~6小时。\n采集者之所以能够免受饥饿或营养不良的困扰，秘诀就在于多样化的饮食。相较之下，之后农民的饮食往往种类极少，而且不均衡。\n智人的第一波殖民正是整个动物界最大也最快速的一场生态浩劫。其中受创最深的是那些大型、毛茸茸的动物。\n从采集走向农业的转变，始于大约公元前9500年~公元前8500年，发源于土耳其东南部、伊朗西部和地中海东部的丘陵地带。\n即使到了今天，虽然人类有着种种先进科技，但食物热量超过90%的来源仍然是来自人类祖先在公元前9500年到公元前3500年间驯化的植物：小麦、稻米、玉米、马铃薯、小米和大麦。\n在我们远古祖先所狩猎采集的成千上万物种中，适合农牧的只有极少数几种。这几种物种只生长在特定的地方，而这些地方也正是农业革命的起源地。\n真正的主要嫌疑人，就是那极少数的植物物种，其中包括小麦、稻米和马铃薯。人类以为自己驯化了植物，但其实是植物驯化了智人。\n新的农业活动得花上大把时间，人类就只能被迫永久定居在麦田旁边。这彻底改变了人类的生活方式。其实不是我们驯化了小麦，而是小麦驯化了我们。“\n智人的身体演化目的并不是为了从事这些活动，我们适应的活动是爬爬果树、追追瞪羚，而不是弯腰清石块、努力挑水桶。于是，人类的脊椎、膝盖、脖子和脚底就得付出代价。研究古代骨骼发现，人类进到农业时代后出现了大量疾病，\n小麦的影响就十分深远。种植小麦，每单位土地就能提供\n对于个人来说，小麦根本算不上给了什么。但对于智人这个物种整体来说，小麦的影响就十分深远。种植小麦，每单位土地就能提供更多食物，于是智人的数量也呈指数成长。\n人类就像许多哺乳动物一样，自然有荷尔蒙和遗传机制来控制生育数。营养充足的时候，女性比较早进入青春期，成功怀孕的概率也比较高。而在土地贫瘠、营养不足的时候，女性进入青春期要来得晚，生育能力也下降。\n于是，种种想让生活变得轻松的努力，反而给人带来无穷的麻烦；而且这可不是史上的最后一次。就算今天，仍然如此。有多少年轻的大学毕业生投身大企业、从事各种劳心劳力的工作，发誓要努力赚钱，好在35岁就退休，去从事他们真正有兴趣的事业？但等他们到了35岁，却发现自己背着巨额贷款，要付子女的学费，要养在高级住宅区的豪宅，每家得有两部车，而且觉得生活里不能没有高级红酒和国外的假期。他们该怎么做？他们会放下一切，回去野外采果子挖树根吗？当然不可能，\n等到习惯某种奢侈品，就开始认为这是天经地义。接着就是一种依赖。最后，生活中就再也不能没有这种奢侈品了。\n然而，农业革命要成功，并不需要某个地区的所有部落都无异议通过。一切都只从“一个部落”开始。不论是在中东还是中美洲，只要有一个部落定居下来、开始耕作，走向农业的趋势就已经无法抗拒。由于农业可促成人口迅速增长，通常农业部落光靠人数就已经大胜采集部落。这时，采集部落只剩两种选择，第一是逃跑，放任自己的猎场成为农场和牧场；第二就是拿起锄头，自己加入农业的行列。无论\n然而，农业革命要成功，并不需要某个地区的所有部落都无异议通过。一切都只从“一个部落”开始。不论是在中东还是中美洲，只要有一个部落定居下来、开始耕作，走向农业的趋势就已经无法抗拒。由于农业可促成人口迅速增长，通常农业部落光靠人数就已经大胜采集部落。这时，采集部落只剩两种选择，第一是逃跑，放任自己的猎场成为农场和牧场；第二就是拿起锄头，自己加入农业的行列。无论哪种选择，都代表旧的生活方式注定将要凋零。\n我们从农业革命能学到的最重要一课，很可能就是物种演化上的成功并不代表个体的幸福。\n而在农业革命之后，“未来”的重要性被提到史上新高。农民不仅时时刻刻都得想着未来，还几乎可以说是为了未来在服务。农业经济是以生产的季节周期为基础，经过很多个月耕作，再来到相对较短的收成高峰期。\n历史只告诉了我们极少数的人在做些什么，而其他绝大多数人的生活就是不停挑水耕田。\n南斯拉夫在1991年的资源完全足以养活所有国民，但依旧解体并引发可怕的浴血战争。\n虚构的故事是怎么支撑着整个帝国？我们已经讨论过一个这样的例子：标致公司。现在我们可以来看看另外两个史上最有名的虚构故事：第一个是大约在公元前1776年的《汉谟拉比法典》，这可以说是几十万古巴比伦人的合作手册；第二个是公元1776年的美国《独立宣言》，这可以说是现代数亿美国人的合作手册。\n对我们来说，听到要把人分成“上等人”或“平民”，大概都会同意这只是一种想象。但其实，即使说的是“人人平等”，也只是虚构的概念。到底所谓人人平等是什么？除了想象中之外，有没有什么客观的事实可以说我们人人平等？人类彼此在生物学上都相等吗？从生物学的角度，\n我们相信某种秩序，并非因为它是客观的现实，而是因为相信它可以让人提升合作效率、打造更美好的社会。这种由想象所建构的秩序绝非邪恶的阴谋或是无用的空谈，而是唯一能让大群人类合作的救命仙丹。但也别忘了，汉谟拉比也可以用同样的逻辑来捍卫他的阶级原则：“我知道所谓上等人、平民和奴隶在本质上其实并没有什么不同。但如果我们这么相信，就能创造出一个稳定繁荣的社会。”\n创立犬儒学派的希腊哲学家第欧根尼（Diogenes），\n像是今天大多数西方人都相信个人主义，认为每个人都是独立的个体，有独立的价值，而不受他人看法的影响。\n浪漫主义告诉我们，为了要尽量发挥潜力，就必须尽量累积不同的经验。必须体会不同的情感，尝试不同的关系，品尝不同的美食，还必须学会欣赏不同风格的音乐。而其中最好的一种办法，就是摆脱日常生活及工作，远离熟悉的环境，前往遥远的国度，好亲身“体验”不同的文化、气味、美食和规范。\n而这也正是文字对人类历史所造成最重要的影响：它逐渐改变了人类思维和看待这个世界的方式。过去的自由连接、整体思考，已经转变为分割思考、官僚制度。\n然而历史的铁则告诉我们，每一种由想象建构出来的秩序，都绝不会承认自己出于想象和虚构，而会大谈自己是自然、必然的结果。\n大多数社会政治阶级制度其实都没有逻辑或生物学的基础，不过就是由历史的偶然事件引起，再用虚构的故事延续壮大。这正是历史值得研究的一个很好的理由。\n天生自然的生物学，可能性几乎无穷无尽。然而，文化却要求必须实现某些可能性，而又封闭了其他可能性。例如女性天生能生小孩，但在某些文化里，女性却是非生不可。\n文化总会说，它只是禁止“不自然的事”。但从生物学的角度来看，这世界上根本没有什么是不自然的。只要有可能发生的事，就是自然。真正完全“不自然”的事，是指违背了自然规律，但这种事情根本就不会存在，所以也没有禁止的必要。\n事实上，许多人认知的“自然”和“不自然”并不是生物学的概念，而是基督教神学的概念。神学上所谓的“自然”，指的是“符合创造自然的神的旨意”。基督教神学家认为，上帝创造了人的身体，并且让每个肢体和器官都有特定的目的。如果我们使用肢体和器官的方式符合上帝的设想，那就是个“自然”的活动；如果不符合上帝设想的方式，就成了“不自然”。然而，演化本来就没有唯一的目的。器官的演化没有唯一的目的，而器官的使用方式也不断在变化。\n每个文化背后虚构的故事，都有些男人应该要符合的角色（像是搞政治）、拥有的权利（像是投票权），以及负起的义务（像是服兵役）。\n学者为了把概念讲清楚，通常把生物学上的区分称为“性”（sex），而文化上的区分称为“性别”（gender）。“\n更重要的是，就人类整体来说，体力和社会权力本来就没有直接关联。\n正由于雌性需要外部帮助，所以它们更需要发展社交技巧，学习如何合作，给予彼此抚慰。于是，它们建构起了全为雌性的社会网络，帮助彼此养育后代。而这个时候，雄性动物还是继续把时间花在彼此战斗争胜，所以社交技巧和社会关系依旧低落。于是，在倭黑猩猩和大象的社会中，便是由互相合作的雌性组成强大的网络，主导全局，至于以自我为中心而又不合作的雄性，只能滚到一边去。\n现在我们已经清楚看到，父权制度其实并没有生物学上的基础，而只是基于毫无根据的虚构概念。\n农业革命之后，人类社会规模变得更大、更复杂，而维系社会秩序的虚构故事也更为细致完整。人类几乎从出生到死亡都被种种虚构的故事和概念围绕，让他们以特定的方式思考，以特定的标准行事，想要特定的东西，也遵守特定的规范。就是这样，让数百万计的陌生人能遵照着这种人造而非天生的直觉，合作无间。这种人造的直觉就是“文化”。\n如果是物理学的法则，绝不会有不一致的例外情形，但既然这些是人类自己想象创造出的秩序，内部就会有各式各样的矛盾。文化一直想弭平这些矛盾，因此就会促成改变。\n中世纪欧洲的贵族既信奉天主教，又要遵守骑士精神。\n这种价值观的矛盾从来没办法完全解决，但是欧洲的贵族、教士、平民试图处理这些问题的时候，他们的文化也就随之改变。其中一次试着处理，结果就是引发了十字军东征。对于这些骑士来说，东征既能展现武力上的长材，也能展现宗教上的虔敬，可以说是一石二鸟。同样的矛盾也带来了种种骑士修会的成立，像是圣殿骑士团（Templar）和僧侣骑士团（Hospitaller），想让基督教和骑士理想更是合为一体。中世纪艺术和文学也常谈到这种矛盾，像是亚瑟王与圣杯的传奇便是一例。\n自从法国大革命之后，全球人民逐渐同意“自由”和“平等”都是基本的价值观。然而这两者根本就互相抵触！想要确保“平等”，就得限制住那些较突出的人；而要人人都能“自由”，也就必然影响所有人的平等。\n就算到了现代美国，政治还是摆脱不了这种矛盾。民主党人希望社会更加平等，就算为了协助老弱病残必须增税也在所不惜。但这样一来，岂不是违反了民众支配收入的自由？如果我想把钱拿来供小孩读大学，为什么政府可以逼我非买健康保险不可？\n认知失调（cognitive dissonance）\n不管是贝壳还是美元，它们的价值都只存在于我们共同的想象之中。\n经济学家已经提出现成的答案。在贸易连接两个区域的时候，只要是能够运送的货品，就会受到供需力量的影响，让价格达到平衡。\n但在金钱和帝国之外，宗教正是第三种让人类统一的力量。正因为所有的社会秩序和阶级都只是想象的产物，所以它们也十分脆弱，而且社会规模越大，反而就越脆弱。\n宗教必须同时具备“普世特质”和“推广特质”。\n因应这种需求，多神教（polytheistic）信仰便应运而生。（polytheistic为希腊文，poly=多，theos=神）这些宗教认为世界是由一群神威浩荡的神灵控制，有的掌管生育，有的掌管雨水，有的掌管战争\n多神论认为主宰世界的最高权力不带有任何私心或偏见，因此对于人类各种世俗的欲望、担心和忧虑毫不在意。\n而天主教徒认为，虽然信仰是必要的，但光这样还不够。要进入天国，信徒还必须参加教堂礼拜，而且要多行善事。这点让新教徒无法接受，认为这样形同交易，对于神的爱和伟大是种贬抑。如果进不进天堂必须取决于自己的善行，岂不是放大了自己的重要性，而且暗示基督在十字架上为人类受的苦以及神对人类的爱都还不够？\n正如古罗马帝国的主神是朱庇特、阿兹特克帝国的主神是维齐洛波奇特利，每个基督宗教国家也有自己的守护圣人，协助解决困难、赢得战争。\n到了2014年，世界政治基本上仍是各行其政，但国家的独立性正在迅速消失。没有任何国家能够行使真正独立的经济政策，任意发动战争，甚至连国家内政也无法完全独立决定。\n心灵专注在“我现在是什么感受？”，而不是问：“为什么是我？”这种境界很难达到，但并非不可能。\n之：痛苦来自欲望；要从痛苦中解脱，就要放下欲望；而要放下欲望，就必须训练心智，体验事物的本质。\n此外，佛教的几个教派也随着时间发展出满天诸佛菩萨。诸佛菩萨是人也非人，他们已经能够达到涅槃、解脱痛苦，但为了解脱和帮助还在轮回中的芸芸众生，倒驾慈航重入世间。所以，佛教徒崇拜的并不是神祇，而是这些已经开悟而尚未成佛的人，除了希望他们协助达到涅槃的境界，也希望他们帮忙处理一些世俗的问题。于是，我们就看到整个东亚有许多佛菩萨得负责降雨、医病，甚至还得保佑杀敌求胜，而信众也虔心祈祷，为他们焚香，献上各色鲜花、稻米和甜品。\n人文主义对“人性”的定义，大致上分成三种对立的教派。今天最重要的人文主义学派就是自由人文主义，它认为人性就在于每个个人的自我特质，因此个人自由也就变得神圣不可侵犯。\n而“如何”和“为何”之间有何不同？描述“如何”的时候，是要重建一连串从一点导致另一点的事件顺序。至于要解释“为何”的时候，则是要找出因果关系，看看究竟为什么发生的是这一连串的事件，而不是另一连串的事件。\n但如果对某个时期只是一知半解，就很容易受到结果影响，只看到那些最后成真的可能性。于是，他们就用后见之明来解释着为什么现在的结果无法避免。\n事后看来无可避免的事，在当时看来总是毫不明显。\n特别要强调的是，那些在当代看来最不可能发生的事，常常就是最后成真的事。\n至于二级混沌系统，指的是“会受到预测的影响而改变”，因此就永远无法准确预测。\n一级混沌指的是“不会因为预测而改变”。例如天气就属于一级混沌系统。\n我们之所以研究历史，不是为了要知道未来，而是要拓展视野，要了解现在的种种绝非“自然”，也并非无可避免。未来的可能性远超过我们的想象。\n对于像是伊斯兰教、基督教、佛教、儒教这些前现代知识体系来说，它们假设世上所有重要的事情都已经为人或为神所知。这些全知者可能是某些伟大的神、某个全能的神或是某些过去的智者，通过经典或口传，将这些智慧传给后人。而对于平民百姓而言，重点就是要钻研这些古籍和传统，正确加以理解，就能获得知识。\n现代科学愿意承认自己的无知，就让它比所有先前的知识体系更具活力、更有弹性，也更有求知欲。\n收集各种实证观察（可以用感官感受到的），并以数学工具整理。\n科学家一般公认，没有任何一种理论百分之百正确。因此，用“真实”与否来为知识评分并不妥当。真正的考验就是实用性。能让我们做出新东西来的，就是知识。\n1）社会性的贫穷，指的是某些人掌握了机会，却不愿意释出给他人；（2）生物性的贫穷，指的是因为缺乏食物和住所，而使人的生存受到威胁。\n正因为资源有限，我们就必须回答像是“什么更重要”和“怎样才算花得适当”这种问题。但这些都不是科学问题。\n总之，科学研究一定得和某些宗教或意识形态联手，才有蓬勃发展的可能。\n之所以法国和美国能够很快跟上英国的脚步，是因为他们本来就和英国共享一套最重要的故事和社会结构。而中国和波斯总是追赶不及，则是因为整个关于社会的想法和组织就是不同。\n中国和波斯其实并不缺乏制作蒸汽机的科技（当时要照抄或是购买都完全不成问题），他们缺少的是西方的价值观、故事、司法系统和社会政治结构，这些在西方花了数个世纪才形成及成熟，就算想要照抄，也无法在一夕之间内化。之所以法国和美国能够很快跟上英国的脚步，是因为他们本来就和英国共享一套最重要的故事和社会结构。而中国和波斯总是追赶不及，则是因为整个关于社会的想法和组织就是不同。\n这里真正的关键因素在于，不管是想寻找植物的植物学家还是想寻找殖民地的海军军官，都有一种共同的心态。他们共同的出发点就是承认无知，都会说“我不知道那里有什么”。于是，他们都觉得有走出去、寻找新发现的必要。\n发现美洲，对于科学革命是一大奠基事件。这不但让欧洲人知道实际的观察比过去的传统更重要，而且想征服美洲的欲望也让欧洲人开始求知若渴。\n发现美洲，对于科学革命是一大奠基事件。这不但让欧洲人知道实际的观察比过去的传统更重要，而且想征服美洲的欲望也让欧洲人开始求知若渴。他们如果真想控制这片广大的新领地，就一定得收集所有相关地理、气候、植物、动物、语言、文化、历史的庞大数据。在这些时候，不管是基督教《圣经》、过时的地理书籍或是古老的口传知识，都无用武之地。\n人类发展出“信用”这种金钱概念，代表着目前还不存在、只存在于想象中的货品。正是“信用”的概念，让我们能够预支未来、打造现在。\n所谓的“进步”，是在承认我们的无知之后，认为只要投资进行研究，一切就能变得更好。这个想法很快地就应用到了经济上。只要是相信“进步”的人，就会相信各种地理发现、科技发明和组织发展，能够提升人类生产、贸易和财富的总量。\n在《国富论》的第一卷第八章，亚当·斯密提出了以下的创新论述：如果地主、织工或鞋匠赚得的利润高于养家糊口基本所需，就会雇用更多助手，好进一步提高自己的利润。利润越高，能雇的助手也越多。由此可见，民间企业的获利正是社会整体财富和繁荣的基础。\n人类全体财富的基础，就在于希望增加个人利润的自私心理。这一点可以说是人类历史上最革命性的概念，而且还不只是从经济的角度，也包括道德和政治的角度。他其实告诉我们：贪婪是好的，而且我们让自己过得好的时候，不只是自己得利，还能让他人受益。“利己”就是“利他”。\n在新的资本主义教条里，最神圣的开宗明义第一条就是：“生产的利润，必须再投资于提高产量。”\n所以，亚当·斯密不断强调的是“利润增加时，地主或织工就会雇用更多助手”，而不是说“利润增加时，守财奴就把钱全部藏得死死的，只有算钱的时候才拿出来”。现代资本主义经济的一大重点，就在于出现了一种新的道德标准：应该把利润拿出来，继续投资生产。\n资本主义之名正是由此而来。所谓的“资本主义”（Capitalism），认为“资本”（capital）与“财富”（wealth）有所不同。资本指的是投入生产的各种金钱、物品和资源。而财富指的则是那些埋在地下或是浪费在非生产性活动的金钱、物品和资源。例如，如果有位法老王，把所有的资源拿来盖了一座不具生产力的金字塔，他并不是资本主义者。某个海盗劫掠了一条西班牙运宝船，把一整箱闪闪发光的金币埋到加勒比海的某座小岛上，他也不是个资本主义者。但如果是某个辛勤工作的工厂工人，把收入的一部分拿去投资股票，他就算是个资本主义者。\n因为连他们都意识到，如果他们想让自己的钱不被抢走，而且能创造更多的财富，就最好到真正能够实行法治、尊重私有财产制的地方，例如荷兰。 就是像这样的事，让西班牙国王逐渐失去了投资者的信任，而荷兰商人则赢得了他们的信心。\n密西西比泡沫可以说是史上最惨烈的一次金融崩溃。法国王室的金融体系一直没能真正走出这场重大的打击。\n讲到国家如何为资本家服务，最恶名昭彰的例子就是中英第一次鸦片战争（\n资本和政治这两者的紧密相拥，对信贷市场有深远的影响。一个市场究竟能得到多少信贷，不能只看经济因素（例如发现新的油田、发明新的机器），而也得考虑政治事件的影响，例如政权更迭或是采取了更积极的外交政策。诺瓦里诺战役之后，英国资本家投资高风险海外交易的意愿就更高了。\n信用评级代表的是国家清偿债务的可能性。除了纯粹的经济数据外，也会考虑政治、社会甚至文化因素。就算是拥有丰富石油蕴藏量的产油国，如果政府专制、司法腐败，信用评级通常也不高。这么一来，因为难以取得必要资金开发石油资源，很可能这个国家就只能这样坐在金矿上穷困度日。与此相对的是，如果某个国家虽然缺少自然资源，却有自由的政府、和平的环境，以及公正的司法系统，它就可能得到较高的信用评级。这样一来，就能以低廉的代价取得相当的资金，撑起良好的教育体系、发展出蓬勃的全新高科技产业。\n然而，如果讲到最极端的情况，相信自由市场的概念其实就像相信圣诞老人一样天真。这世界上根本不可能有完全不受政治影响的市场。\n如果真的是完全自由的市场，没有国王或神职人员来监督，贪婪的资本家就能够通过垄断或串通来打击劳工。例如，假设某个国家只有一家制鞋厂或是所有制鞋厂都合谋同时降低工资，劳工就无法用换工作的方式来保护自己。\n更可怕的是，老板还可能用劳动偿债甚至奴隶制度来限制劳工的自由。在中世纪结束的时候，基督教欧洲几乎完全没有奴隶制度的现象。但到了现代早期，欧洲资本主义兴起，大西洋奴隶贸易也应运而生。奴隶贸易这场灾难的罪魁祸首并不是暴君或是种族主义者，而是不受限制的市场力量。\n还有一个更大的问题，就是我们不知道如何进行能量间的转换。\n因为所有能量转换只能靠人类和动物的身体，当时几乎所有人类活动靠的就是肌肉的力量。\n蒸汽机种类繁多，但有一个共同的原则：燃烧某种燃料（例如煤），再用产生的热将水煮沸，产生蒸汽。接着蒸汽推动活塞、让活塞移动，而连接到活塞的任何装置也就跟着移动。这么一来，热能便转换为动能了！\n另一项重要发明是内燃机，仅仅花了不到一个世代的时间，就彻底改革了人类的运输，也让石油变成一种液体的政治权力。\n工业革命的核心，其实就是能源转换的革命。我们已经一再看到，我们能使用的能源其实无穷无尽。讲得更精确，唯一的限制只在于我们的无知。每隔几十年，我们就能找到新的能源来源，所以人类能用的能源总量其实在不断增加。\n大西洋奴隶贸易并非出于对非洲人的仇恨，而现代畜牧业也同样不是出于对动物的仇恨。这两者背后共同的推手，就是冷漠。大多数人，在生产或是消费各种奶、蛋、肉类的时候，都很少想到提供这些食物的鸡、牛或猪。就算有些人真的想过，也常认为这些动物真的和机器没什么两样，没有感觉、没有情绪，并不会感受到痛苦。\n正是因为农业释放出了数十亿的人力，由工厂和办公室吸纳，才开始像雪崩一样有各种新产品倾泻而出。比起以前，人类生产出更多钢铁，制作出更多服装，兴建出更多建筑，还制造出令人瞠目结舌、超出想象的各种产品，像是灯泡、手机、数码相机和洗碗机。人类有史以来第一次，生产超出了需求。也是因为如此，产生了一个全新的问题：谁要来买这些产品？\n虽然智人已经越来越不受自然的摆布，但却越来越受到现代产业和政府的支配。\n有人病了，由家庭来照顾。有人老了，由家庭来赡养，而子女就是最好的退休基金。有人过世，孤儿就由大家庭其他成员照顾。\n然而，要解放个人是有代价的。现在许多人都悲叹着家庭和社群功能不再、觉得疏离，而且感觉冷漠的国家和市场对我们造成许多威胁。如果组成国家和市场的是一个又一个孤单的个人，而不是关系紧密的家庭或社群，要干预个人生活也就容易得多。现代高楼公寓，所有人各自锁在自己家里，连每户该付多少清洁费都无法达成共识，又怎么可能一起站出来抵抗国家机器？\n经过数百万年的演化，人类的生活和思考方式都预设自己属于社群。但仅仅过了两个世纪，我们就成了互相疏远的个人。这可以说是文化力量的最佳证明。\n现代所兴起的两大想象社群，就是“民族”和“消费大众”。\n因此，想要定义现代社会的特色为何，就像要问变色龙究竟是什么颜色一样。我们唯一可以确定的特色，就是它会不断改变。\n更重要的是，我们比较容易体会个人的辛酸，而不是人类整体的苦难。\n现在有的是真正的和平，而不只是没有战争。对于大多数的政体来说，都没有什么合理可信的情况会在一年之内导致全面开战。\n如果说有个最高诺贝尔和平奖，应该把奖颁给罗伯特·奥本海默以及和他一起研发出原子弹的同事。有了核武器之后，超级大国之间如果再开战，无异等于集体自杀。因此，想要武力征服全球也成了不可能的任务。\n然而，这种进步论却可能有些问题。正如我们所见，新的倾向、行为和技能不一定会让生活过得更好。像是人类在农业革命学会了农耕畜牧，提升了人类整体形塑环境的力量，但对许多个人而言，生活反而变得更为艰苦。\n一般对于快乐普遍接受的定义是“主观感到幸福”。依照这个观点，快乐是种个人内在的感受，可能是因为当下直接的快感，或是对于长期生活方式的满足。\n目前有一项耐人寻味的结论：金钱确实会带来快乐，但是有一定限度，超过限度之后的效果就不那么明显。所以，对于在经济阶层底层的人来说，确实是钱越多就越快乐。\n虽然过去两个世纪间人类在物质条件上有了大幅改善，但因为家庭崩溃、社会失调，所以两者的作用很可能互相抵消。如果真是如此，现在的人并不见得比1800年更快乐。甚至是我们现在如此看重的“自由”，也可能是让我们不那么快乐的原因。虽然我们可以自己选择另一半、选择朋友、选择邻居，但他们也可以选择离开我们。现代社会每个人都拥有了前所未有的自由，能够决定自己要走哪条路，但也让我们越来越难真正信守承诺、不离不弃。于是，社群和家庭的凝聚力下降而解体，这个世界让我们感到越来越孤独。\n如果说快乐要由期望来决定，那么我们社会的两大支柱（大众媒体和广告业）很有可能正在不知不觉地让全球越来越不开心。\n那些无力负担这些医学奇迹的人（也就是绝大多数人），一定会愤怒到无以复加。纵观历史，穷人和受压迫者之所以还能自我安慰，就是因为死亡是唯一完全公平的事。不论再富有、权力再大，人也难逃一死。光是想到自己得死，但有钱人居然能长生不老，就会让穷人怒火中烧、不可遏抑。\n这么一来，就算是长生不老也可能会导致不满。假设科学找出了能够医治所有疾疾的万灵丹，加上有效抗老疗程和再生治疗，能够让人永葆青春，那么，最可能发生的事，就是整个世界感到空前的愤怒和焦虑。\n但人体的内部生化系统似乎就是对快乐多有限制，只会维持在恒定的水平。快乐这件事不适用于自然选择的原则，如果是个快乐的孤独隐士，对上两位整天焦虑的爸妈，前者会绝种，而后者却能把基因再传下去。快乐或痛苦在演化过程里的作用，就只在于鼓励或阻挡生存和繁衍。\n举例来说，演化就把快感当成奖赏，鼓励男性和女性发生性行为、将自己的基因传下去。如果性交没有高潮，大概很多男性就不会那么热衷。但同时，演化也确保高潮得迅速退去。如果性高潮永续不退，可以想象男性会非常开心，但连觅食的动力都没了，最后死于饥饿，而且也不会有兴趣再去找下一位能够繁衍后代的女性。\n让我们用古代中国农夫和现代香港企业家为例。假设我们这位古代农夫住在没有暖气的小土屋里，旁边就是猪圈；企业家住在拥有各种最新科技的豪宅，窗口就能俯瞰南海的浩瀚海景。直觉上，我们会觉得企业家想必比农民更快乐。然而，快乐是在脑子里决定的，而大脑根本不管土屋或豪宅、猪圈或南海，只管血清素的浓度。所以，农夫盖完了他的土屋之后，大脑神经元分泌血清素，让浓度到达X。而在现代，企业家还完最后一笔豪宅房贷之后，大脑神经元也分泌出差不多数量的血清素，并且也让浓度差不多到达X。对大脑来说，它完全不知道豪宅要比土屋舒适太多，它只知道现在的血清素浓度是X。所以，这位企业家快乐的程度，并不会比那位足以当他高高高高高祖父的农夫来得高。\n背后有一项基本生物学假设：“快乐等于快感”。\n如果真要计算哪些时刻令人开心，哪些时候叫人无聊，就单纯的数字来说，养小孩可说是非常不愉快的事。很多时候，养小孩就是要换尿布、洗碗、处理他们的哭闹和脾气，这些都算是没人想做的苦差事。然而，大多数家长都说孩子是他们快乐\n让我们以养小孩为例。卡尼曼发现，如果真要计算哪些时刻令人开心，哪些时候叫人无聊，就单纯的数字来说，养小孩可说是非常不愉快的事。很多时候，养小孩就是要换尿布、洗碗、处理他们的哭闹和脾气，这些都算是没人想做的苦差事。然而，大多数家长都说孩子是他们快乐的主要来源。难道这些人都是脑子有问题吗？\n正如尼采所言，只要有了活下去的理由，几乎什么都能够忍受。生活有意义，就算在困境中也能甘之如饴；生活无意义，就算在顺境中也度日如年。\n所以，我们的中世纪祖先会感到快乐，就只是因为他们有着对来世的集体错觉，因而感觉生命充满意义吗？没错！只要没人去戳破他们的幻想，又为什么要不开心呢？从我们所知的纯粹科学角度来看，人类的生命本来就完全没有意义。\n","permalink":"https://ynikl.github.io/books/a-brief-history-of-humankind/","summary":"人类简史 总结 人类进化历史上有三次革命 认知革命: 人类通过共同的虚拟故事(信仰,部落等)开始了大规模的合作, 认知革命让人类脱离了生物学的进化路程.\n农业革命: 人类部落人口数量开始爆发性增长, 人类第一次开始不得不相互胁迫进入更糟糕的生活, 开始了长期的农业劳作(工作时间远大于采集时期). 人口爆发增加就需要更大的虚拟故事来进行合作, 出现了城镇, 国家, 宗教.\n科学革命: 人类开始承认自己无知, 用数据和实现代替原先用神话来掩饰不知道的问题.\n虚拟故事 包括现在\u0026quot;人人平等\u0026quot; 也只是因为我们现在社会需要这种解释, 大家愿意相信这样子的虚拟故事.\n我们相信某种秩序，并非因为它是客观的现实，而是因为相信它可以让人提升合作效率、打造更美好的社会。这种由想象所建构的秩序绝非邪恶的阴谋或是无用的空谈，而是唯一能让大群人类合作的救命仙丹。但也别忘了，汉谟拉比也可以用同样的逻辑来捍卫他的阶级原则：“我知道所谓上等人、平民和奴隶在本质上其实并没有什么不同。但如果我们这么相信，就能创造出一个稳定繁荣的社会。”\n国家保证个人财产是神圣不可侵犯的, 是因为国家需要吸引外来投资和让人民有努力工作劲头.\n资本主义 在新的资本主义教条里，最神圣的开宗明义第一条就是：“生产的利润，必须再投资于提高产量。\n资本是指投入的生产的资金, 而财富是指固定不动的资金\n收获 农业革命之后人类开始违背自己的生物学进化规则, 开始长期拱背在农田里工作, 久坐办公室之前.\n十字军东征是因为欧洲贵族的信奉冲突(认知失调)导致的, 即信奉天主教,有遵守骑士精神.\n一级混沌 不会因为受到预测而发生改变(比如, 天气), 二级混沌会\n金钱是最成功的人类共同想象\n社会性的贫穷，指的是某些人掌握了机会，却不愿意释出给他人；\n完全自由的市场可能会导致资本家通过垄断或者串通打击劳工\n由于人类产能上升, 现在社会鼓吹新型的\u0026quot;消费大众\u0026quot;\n现在\u0026quot;独立\u0026quot;, \u0026ldquo;平等\u0026rdquo;, \u0026ldquo;自由\u0026quot;的思潮盛行, 让每个人都有自己的, 社群和家庭的凝聚力下降, 让我们每个人都感到更加的孤独.\n如果出现的长生不老的药物, 可能就会引起世界强烈的愤怒和焦虑, 现在让穷人自己安慰的唯一理由, 就是死亡是完全公平的.\n尼采\n只要有了活下去的理由，几乎什么都能够忍受。生活有意义，就算在困境中也能甘之如饴；生活无意义，就算在顺境中也度日如年。\n在科学角度, 人生没有意义. 意义都是我们自己赋予, 比较中世纪多做好事期待来世. 人们生活在自己的臆想之中就会过得很幸福.\n吉尔伽美什计划是旨在大幅提升人体机能，预防和治疗人类疑难疾病，从而大幅度的增长人类寿命的一项人体改造计划，最终走向可能导致超级人类的出现，有人预测在2050年左右会出现长生之人。\n书摘 在历史的路上，有三大重要革命：大约7万年前，“认知革命”（Cognitive Revolution）让历史正式启动。大约12000年前，“农业革命”（Agricultural Revolution）让历史加速发展。而到了大约不过是500年前，“科学革命”（Scientific Revolution）可以说是让历史画下句点而另创新局。\n生物学家把所有生物划分成不同的“物种”。而所谓属于同一物种，就是它们会彼此交配，能够产出下一代。\n从同一个祖先演化而来的不同物种，会属于同一个“属”（genus）。\n同一科的所有成员，都能追溯到某个最早的雄性或雌性祖先。\n在欧洲和西亚的人类成了“Homo neanderthalensis”，意为“来自尼安德谷（Neander Valley）的人”，一般简称为“尼安德特人”（Neanderthals）。比起我们这种“智人”，尼安德特人更为魁梧，肌肉也更发达，非常适应西方的欧亚大陆在冰河时期的寒冷气候。","title":"人类简史"},{"content":"0314 wrap error\nAdding additional context to an error Marking an error as a specific error fmt.Errorf(\u0026quot;%w\u0026quot;, err)\n1 bar error -\u0026gt; Wrap error -\u0026gt; fmt.wrapError { bar error } 原先被包裹的 err, 仍保持可用状态 fmt.Error(\u0026quot;%v\u0026quot;,err)变成 string, 原 Err 已经无法追溯\nspew 将变量数据格式化输出\n可以批量传入参数spew.Sdump(var1, var2, var3) 可以通过 spew.NewDefaultConfig 独立一份特定参数的输出实例 也可以通过 spew.Config 修改包变量, 将配置覆盖整个包 As, Is\nAs 提供具体错误类型匹配, 对应自定义的某种错误类型结构体. 仅会对比错误错误链的第一个自定义错误类型是否匹配 Is 提供具体的某一个实例错误类型匹配. 会递归遍历是否匹配 ","permalink":"https://ynikl.github.io/weekly/2023-03-19/","summary":"0314 wrap error\nAdding additional context to an error Marking an error as a specific error fmt.Errorf(\u0026quot;%w\u0026quot;, err)\n1 bar error -\u0026gt; Wrap error -\u0026gt; fmt.wrapError { bar error } 原先被包裹的 err, 仍保持可用状态 fmt.Error(\u0026quot;%v\u0026quot;,err)变成 string, 原 Err 已经无法追溯\nspew 将变量数据格式化输出\n可以批量传入参数spew.Sdump(var1, var2, var3) 可以通过 spew.NewDefaultConfig 独立一份特定参数的输出实例 也可以通过 spew.Config 修改包变量, 将配置覆盖整个包 As, Is\nAs 提供具体错误类型匹配, 对应自定义的某种错误类型结构体. 仅会对比错误错误链的第一个自定义错误类型是否匹配 Is 提供具体的某一个实例错误类型匹配. 会递归遍历是否匹配 ","title":"2023 03 19"},{"content":"0307 mysql 创建 utf8md4 数据库\n1 CREATE DATABASE `test` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci ; mysql utf8mb4 是 utf8的超集，兼容4字节的 unicode (Emoji)\nhttps://www.jianshu.com/p/2b8629af8000\nmysql 5.7.32-log 在 varchar(255) 创建索引失败，max key length is 767 bytes. 767字节/4字节每字符 = 191 字符。 须修改为 varchar(191) https://help.aliyun.com/document_detail/41707.html\n查看已经合并的分支\n1 2 3 4 git branch --merged #删除 git branch --merged | egrep -v \u0026#34;(^\\*|master|dev|stage)\u0026#34; | xargs git branch -d vifm : za 显示隐藏文件\n1 2 3 za: Toggle showing hidden files zo: Show hidden files zm: Hide hidden files https://codeyarns.com/tech/2014-09-10-how-to-show-hidden-files-in-vifm.html#gsc.tab=0\nUnicodde 是字符集 \u0026ndash; 支持的所有字符的合集 Utf-8 是编码规则，代表 8 位一组表示 Unicode 字符的格式，使用 1 - 4 个字节来表示字符。\nWe should understand the distinction between a charset and an encoding:\nA charset, as the name suggests, is a set of characters. For example, the Unicode charset contains 2^21 characters. An encoding is the translation of a character’s list in binary. For example, UTF- 8 is an encoding standard capable of encoding all the Unicode characters in a variable number of bytes (from 1 to 4 bytes). ChatGPT 是OpenAI 研发的一种生成式聊天机器人，可以理解人类的问题并提供答案， 对搜索引擎业务有着巨大的挑战 小Lin说 ChatGPT\n感受太阳发热，其实是电磁波碰撞到物体产生的热量。 太阳如果是核聚变的化，太阳表面温度不好解释。 等离子体宇宙论，解释太阳拥有的日冕就是类似与闪电之类的东西，据说NASA太阳表面可能是27度。 老高说 太阳\n0309 查看数据库表的大小\n1 2 3 use information_schema; select concat(round(sum(data_length/1024/1024),2),\u0026#39;MB\u0026#39;) as data from tables where table_schema=\u0026#39;database_name\u0026#39; and table_name=\u0026#39;table_name\u0026#39;; https://www.51cto.com/article/641931.html\nvarchar(50) 其中 50 在Mysql 5.1 版本之后代表的是字符长度， 以前代表的是字节长度\n使用 varchat(50) 和直接使用 varchar(255) 存储的区别 空间占用基本一致\n一般情况下255和50占用的空间大小是一致的。但如果是一utf8 可能会255超过255bytes 会需要2个bytes 标记变成 性能影响越小越优 255 会消耗更大的查询中间表的空间大小。 索引长度的大小的限制， InnoDB 限制为 3072bytes， 255长度无法建立索引 过大的字符长度可能会脱离数据页存储。 https://dba.stackexchange.com/a/76470 反思总结 逃避\n当项目组的整个团队配合出问题的时候 \u0026ndash; 工作开始不顺心, 没有想着怎么去解决, 团队的 矛盾, 而是在想着换工作\n傲慢\n喝酒敬酒的时候就很随意\n","permalink":"https://ynikl.github.io/weekly/2023-03-12/","summary":"0307 mysql 创建 utf8md4 数据库\n1 CREATE DATABASE `test` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci ; mysql utf8mb4 是 utf8的超集，兼容4字节的 unicode (Emoji)\nhttps://www.jianshu.com/p/2b8629af8000\nmysql 5.7.32-log 在 varchar(255) 创建索引失败，max key length is 767 bytes. 767字节/4字节每字符 = 191 字符。 须修改为 varchar(191) https://help.aliyun.com/document_detail/41707.html\n查看已经合并的分支\n1 2 3 4 git branch --merged #删除 git branch --merged | egrep -v \u0026#34;(^\\*|master|dev|stage)\u0026#34; | xargs git branch -d vifm : za 显示隐藏文件\n1 2 3 za: Toggle showing hidden files zo: Show hidden files zm: Hide hidden files https://codeyarns.","title":"2023 03 12, 周记"},{"content":"总结 现状 国富论中的分工合作, 把每个人的工作都进行了细化, 每个人都只能聚焦到眼前的一点点事情. 提升了增体生产效率. 人们失去对增体工作流程的感知, 更加不容易感受到工作所带来的成就感. 不能感知到自己的工作给别人带去了什么.\n“一个人把金属线拉长，另一个人将它拉直，第三个人将其切断，第四个人将它削尖，第五个人将顶端切磨好跟头部相接……我曾经目睹过只雇用十位工人的这种小型生产工厂……他们一天最多能生产48 000枚大头针，但如果不采用分工合作的方式，而是由一个人来完成所有工序，那么他们每个人连20枚都完成不了。”\n改善 个人: 发现自己的工作的能给别人带来什么, 寻找自己工作的意义. 自己如何看待一份工作是自己决定的. 是工作, 还是职业, 还是使命.\n企业:\n对员工提供保障, 充分的薪资 分配工作保留充分的自主性 一个充满价值感的工作环境 文摘 “对于那些从工作中获得成就感的人，他们将工作当成事业来经营，并且沉浸其中，尽管并不总是这种状态，但毫无疑问，工作对于他们来说至关重要。对这些人来说，工作中充满挑战，而正是这种挑战性，迫使他们远离舒适和懈怠，不断磨炼和提升自我”\n“认为自己从工作中获取了某种掌控感，他们在工作中努力地锻炼自身的自主性和判断力，并借此不断提高自己的工作技能和专业水准。他们孜孜不倦地学习新东西，无论是作为员工还是作为个体的人，都能持续不断地获取自身的发展。”\n“从事工作也是出于社交的需要。工作中个体常常作为团队成员一起完成任务，即使是独立工作或工作闲暇时，仍然有许多与他人打交道的社交机会。”\n“有时是因为个人从事的工作非常有意义。他们的工作可能正在改变着世界，让他人的生活变得更加美好，更加有意义”\n“事实上，当我们谈论一个人是因为钱而工作时，我们并不仅仅是在客观描述，而是夹杂了批判的情感在内”\n“流程化的工作方式意味着除了钱之外，他们真的找不到促使其工作的其他理由”\n“工作助力个人的成长和发展、工作中被上级和同事欣赏和褒扬、工作中他人尊重和赞同自己的意见和看法、感觉自己所做的工作意义重大、在工作中可以结交好友。所有这些回答都是调查中收集到的反馈。然而，对于绝大多数的职场人士来说，工作更像是无奈之举，他们也并没有积极向上的工作动力。为什么会出现这种情况”\n“长期以来我们一直信奉着一项经济准则，而这项准则也被诸多心理学理论所支持，那就是如果你想让他人替你做事，无论是员工、学生、政府官员，还是你自己的孩子，你都得让他们“有所得”，因为人们做事情是因为“有利可图”\n国富论\n“想过尽可能舒适的生活是每个人的天性，如果一个人从事某项繁重工作和他不做所获得的报酬没有任何差别的话，那么他就会粗心马虎地应付差事，而政府也默认这种行事原则。”\n“一个人把金属线拉长，另一个人将它拉直，第三个人将其切断，第四个人将它削尖，第五个人将顶端切磨好跟头部相接……我曾经目睹过只雇用十位工人的这种小型生产工厂……他们一天最多能生产48 000枚大头针，但如果不采用分工合作的方式，而是由一个人来完成所有工序，那么他们每个人连20枚都完成不了。”\n“你或许会问为什么会有人愿意在亚当·斯密所描写的大头针工厂中年复一年日复一日地做着将针头和针组合在一起这种简单重复的工作。对此，亚当·斯密给出的回答是：“人们当然并不享受大头针工厂中的这种工作，但他们同样也不愿意在其他任何地方工作。”\n“人们愿意工作的唯一原因是工作所带来的报酬。只要能够获得令人满意的报酬，工作内容便无关紧要。”\n良好的工作环境是可以影响在其中的员工的心态\n“说人类是未完成进化的动物。他指的是所谓人类的天性，很大一部分是周围社会环境的产物，这本身便是人类的天性。这部分人类天性更多是被“创造”出来的，而不是被“发现”的”\n流水线的工作导致了员工的自主权利被削减\n“流水线分工所带来的一个重要但常被人忽略的后果便是将工作的掌控权从员工的手中转移到了那些管理流水线的主管们手中”\n“一种观点认为，我们大多数人相信只有某些种类的工作才会让人觉得充满挑战具有意义，能提供不断学习和成长的机会。如果我们坚守这种观点的话，那么这类好工作可能只属于少数人，如律师、医生、银行家、教师、软件开发人员、公司首席执行官等。对于其他人来说，工作就是“饭碗”。情况就是如此，对你我亦然”\n“另一种观点则认为，每一种工作都有可能让人获得满足感。但问题在于常规化、流水线式的工作更容易带来稳定的生产效率”\n工作 -\u0026gt; 职业 -\u0026gt; 使命\n“正如劳动心理学研究专家皮特所指出的那样，为了让我们对自己的工作满意，我们有必要给自己从事的工作赋予意义” “当人们将自己做的事情仅仅当成一份养家糊口的“工作”来看待的时候，人们很难从工作中获得自主性，也很难从中获取成就感。当人们将工作仅仅看作为了生存必须要做的事情时，人们只在乎报酬，如果其他工作能提供更高的报酬，那么他们随时可能换工作。他们迫不及待地想要退休，也并不鼓励和希望他们的朋友或孩子像他们那样，重蹈他们的覆辙。这种现象也正是亚当·斯密关于工作的观点的具体体现” “当人们将从事的工作视为“使命”时，他们的满意度和成就感是最高的。对这些人来说，工作是生命中最重要的一部分，他们愿意将自己奉献给工作，工作彰显了他们生存的意义，他们深信自己的工作能让世界变得更加美好”\n员工的使命感\n“如果工作中缺少自主性、意义和满意度，工作具有的“使命感”就会减少，从事这项工作的满意度也会下降，员工也不会把这份工作做得很好”\n“其实，你不一定非要在一个救死扶伤的组织内工作，以寻求工作的意义和目标。你只需要找一份能提高人们生活质量的工作就行。”\n工作的成就感\n“仅仅因为目睹了他们的努力给他人带来的幸福，他们的工作效率便提高了两倍。这就是赋予工作的意义后产生的巨大能量。”\n“亚当·斯密描述的那些在大头针工厂中工作的工人也应该试图在内心告诉自己，自己做的事情是有意义和有追求的。也就是说，并不需要耗费太多，就能将几乎任何一份工作变得富有意义。这样做不仅对职工有好处，对服务的客户和员工所在的组织都是有益处的。”\n提供完善的工作保障，这些有助于提高员工的忠诚度和信任度。 团队自我管理，分散决策权，给予员工很高的自主权和自我管理权。这同样也能提高员工对组织的信任，同时也减少了管理监督员工的人力成本。 提供给员工高于行业标准的薪酬，让员工觉得自己很有价值。但他们并不怎么依靠个人激励机制去诱导员工努力工作。当公司盈利时，所有的员工都参与利润分成。员工和公司是一个完整的“利益团体”。 完善的培训体系。无论是新员工，还是老员工，都经过系统专业的培训。这种对员工的培训是公司的一种投资形式，同样有利于培养员工的忠诚和信任。长期系统的培训也让员工不断面临新的挑战，不断提高自己的技能。普费弗还对各国的培训时长进行了对比，同样是汽车行业，日本对刚入职的新员工的平均培训时长为364个小时，欧洲是178个小时，而美国只有21个小时。 评估职工的表现，但不过度评估。公司相信员工会努力工作，也相信员工在接受足够的培训后都会成功。 极力强调公司的目标和愿景，并非首席执行官一时兴起的想法，而是将公司的使命渗透至公司上上下下的具体实践中。” “正如普费弗教授所描述的，应对竞争压力的下意识反应——裁员、加强对员工的管理和监视、催促员工加快进度等举措只会不断降低工作效率和员工的工作满意度，让情况变得更加糟糕”\n“她的核心观点是当人们处于一种积极向上的情绪状态中时，他们更富有想象力和创造力，他们具有弗雷德里克松所称的“更加宽广和具有建设性的与世界互动的方式”。相反，当人们处于一种消极负面的情绪状态中时，他们更容易变得保守，想坐享其成，时时担心出错或把事情弄砸。危险让我们的视野变得更加狭窄”\n现行的比较盛行的措施\n“有两套规范的理论用于管理那些对工作不感兴趣的员工，一个是物质激励（工资），另一个是对流水线工作的严密监视，正所谓胡萝卜加大棒。令人惊奇的是，杰弗里·普费弗认为这两种方法对员工工作满意度都有负面效应。但是这两种方法是企业最先采用的，它们不仅让后勤工作人员和流水线上的工人无法拥有令他们满意的工作，同时由于这两种方法不断受到公司高层人员的青睐，因而在这两种方法的管理下，任何工作都有可能被毁掉，成为糟糕的工作。”\n如果原先是通过道德进行约束(接送儿童迟到), 变成了通过罚款约束, 就上升到了金钱的交易的层面, 交了罚款就理所应当地迟到了. 但是, 这个也要看对象的素质程度 \u0026ndash; 修养以及金钱能力.\n“但是当日托护理中心的家长们又多一个理由（罚款）准时接人的时候，这第二项理由反而削弱了第一项理由（准时接人是理所当然的事情）。当受访的瑞士民众面临是否将核废料垃圾站设立在所在社区这个问题时，仅有一个理由（公民的义务）的情况下，他们同意的比例竟然远高于有两个理由的时候（公民的义务和高额的补偿金）。由此可见，动机并不是多多益善，有时候动机越多，反而会相互削弱。”\n“你的[[金钱答谢]]会潜意识地提醒人们他们正在进行的是一笔买卖，而非社会互助行为。酬谢金的出现，会让他们不自觉地衡量自己就此所付出的时间和劳力是否“物有所值”，而当别人只是希望他们帮一下忙时，他们是从来不会考虑值不值这个问题的。因此，在这里，社会动机和经济动机是对抗性而非互补性的”\n在行动条论只制定更加详细的条例.\n“详细的条例和规则或许将有助于合同更加“完善”，但如果循着这个方向发展，必然有损于医生、律师、教师甚至护理人员提供的服务质量”\n“因此工作的单调无聊是无法用薪酬来弥补的。其实更有可能的是，员工们已经安于并顺从这种生活现状了，工作对于他们来说毫无意义，只是一项苦差事而已”\n“正如经济学家弗雷德·赫希四十年前所说：“写在合同中的越多，你能期望的就越少；写下得越多，你能期望的信任就越少。”\n“科学的实质便是一场关于理论与实践的持久对话”\n“至少在社会科学中，提出理论并不受限于事实，而是通过加强理论来重塑现实。你可以先铺设好人行小道，然后通过围禁草地来强制人们必须经由人行小道行走。”\n“对发现和发明进行区分是至关重要的，并不仅仅因为它影响人们从中赚多少钱。无论是科学家还是其他人，当人们有所发现时，我们并不会问这项发现是否应该存在。换句话说，尽管发现的内容有时会涉及道德层面，但发现本身并不存在道德维度”\n思想观点对我的影响也是巨大的\n“当提及科学的现代影响时，大多数人自然想到的是诸如智能手机和核磁共振扫描这样的技术。但是除了创造“物”的技术外，科学也创造“观点”——关于我们如何理解世界、如何在世界生存的观点，而这些观点将会对我们的思想和行为产生巨大的影响”\n“由此可见，我们或许认为自己与众不同，不俗气，会关心钱之外的其他事情，但是反过来，我们却很容易认为其他人工作完全是出于金钱的考虑”\n你说我是个恶人, 那我便干脆做一个恶人罢了\n“实际上，“自我实现预言”是对一种情境的错误定义，在这种情境下，一种新的行为表现的出现使得原来错误的观点变成正确的”\n“皮格马利翁效应”。简而言之，罗森塔尔和雅各布森认为，给某些学生贴上“更有前途”这样类似的标签会导致老师改变对这些孩子的教育方式，进而促进预言的实现。这一发现对心理学和教育学都产生了深远的影响”\n“意识形态对人们行为的影响很大程度上取决于这套意识形态渗入人们所处文化中的深度、广度和显著度”\n“如果我们设计的工作环境能够让员工从中找到意义，那么我们就能培育出注重工作意义的人性来。”\n“我们曾经错失良机，很大程度上是因为意识形态告诉我们，人们都是不愿意工作的”\n“我之所以关注工作的结构以及工作环境，是因为我相信在一个认为工作毫无意义的极端环境中，个体无法真正发挥出自己的聪明才智”\n","permalink":"https://ynikl.github.io/books/why-we-work/","summary":"总结 现状 国富论中的分工合作, 把每个人的工作都进行了细化, 每个人都只能聚焦到眼前的一点点事情. 提升了增体生产效率. 人们失去对增体工作流程的感知, 更加不容易感受到工作所带来的成就感. 不能感知到自己的工作给别人带去了什么.\n“一个人把金属线拉长，另一个人将它拉直，第三个人将其切断，第四个人将它削尖，第五个人将顶端切磨好跟头部相接……我曾经目睹过只雇用十位工人的这种小型生产工厂……他们一天最多能生产48 000枚大头针，但如果不采用分工合作的方式，而是由一个人来完成所有工序，那么他们每个人连20枚都完成不了。”\n改善 个人: 发现自己的工作的能给别人带来什么, 寻找自己工作的意义. 自己如何看待一份工作是自己决定的. 是工作, 还是职业, 还是使命.\n企业:\n对员工提供保障, 充分的薪资 分配工作保留充分的自主性 一个充满价值感的工作环境 文摘 “对于那些从工作中获得成就感的人，他们将工作当成事业来经营，并且沉浸其中，尽管并不总是这种状态，但毫无疑问，工作对于他们来说至关重要。对这些人来说，工作中充满挑战，而正是这种挑战性，迫使他们远离舒适和懈怠，不断磨炼和提升自我”\n“认为自己从工作中获取了某种掌控感，他们在工作中努力地锻炼自身的自主性和判断力，并借此不断提高自己的工作技能和专业水准。他们孜孜不倦地学习新东西，无论是作为员工还是作为个体的人，都能持续不断地获取自身的发展。”\n“从事工作也是出于社交的需要。工作中个体常常作为团队成员一起完成任务，即使是独立工作或工作闲暇时，仍然有许多与他人打交道的社交机会。”\n“有时是因为个人从事的工作非常有意义。他们的工作可能正在改变着世界，让他人的生活变得更加美好，更加有意义”\n“事实上，当我们谈论一个人是因为钱而工作时，我们并不仅仅是在客观描述，而是夹杂了批判的情感在内”\n“流程化的工作方式意味着除了钱之外，他们真的找不到促使其工作的其他理由”\n“工作助力个人的成长和发展、工作中被上级和同事欣赏和褒扬、工作中他人尊重和赞同自己的意见和看法、感觉自己所做的工作意义重大、在工作中可以结交好友。所有这些回答都是调查中收集到的反馈。然而，对于绝大多数的职场人士来说，工作更像是无奈之举，他们也并没有积极向上的工作动力。为什么会出现这种情况”\n“长期以来我们一直信奉着一项经济准则，而这项准则也被诸多心理学理论所支持，那就是如果你想让他人替你做事，无论是员工、学生、政府官员，还是你自己的孩子，你都得让他们“有所得”，因为人们做事情是因为“有利可图”\n国富论\n“想过尽可能舒适的生活是每个人的天性，如果一个人从事某项繁重工作和他不做所获得的报酬没有任何差别的话，那么他就会粗心马虎地应付差事，而政府也默认这种行事原则。”\n“一个人把金属线拉长，另一个人将它拉直，第三个人将其切断，第四个人将它削尖，第五个人将顶端切磨好跟头部相接……我曾经目睹过只雇用十位工人的这种小型生产工厂……他们一天最多能生产48 000枚大头针，但如果不采用分工合作的方式，而是由一个人来完成所有工序，那么他们每个人连20枚都完成不了。”\n“你或许会问为什么会有人愿意在亚当·斯密所描写的大头针工厂中年复一年日复一日地做着将针头和针组合在一起这种简单重复的工作。对此，亚当·斯密给出的回答是：“人们当然并不享受大头针工厂中的这种工作，但他们同样也不愿意在其他任何地方工作。”\n“人们愿意工作的唯一原因是工作所带来的报酬。只要能够获得令人满意的报酬，工作内容便无关紧要。”\n良好的工作环境是可以影响在其中的员工的心态\n“说人类是未完成进化的动物。他指的是所谓人类的天性，很大一部分是周围社会环境的产物，这本身便是人类的天性。这部分人类天性更多是被“创造”出来的，而不是被“发现”的”\n流水线的工作导致了员工的自主权利被削减\n“流水线分工所带来的一个重要但常被人忽略的后果便是将工作的掌控权从员工的手中转移到了那些管理流水线的主管们手中”\n“一种观点认为，我们大多数人相信只有某些种类的工作才会让人觉得充满挑战具有意义，能提供不断学习和成长的机会。如果我们坚守这种观点的话，那么这类好工作可能只属于少数人，如律师、医生、银行家、教师、软件开发人员、公司首席执行官等。对于其他人来说，工作就是“饭碗”。情况就是如此，对你我亦然”\n“另一种观点则认为，每一种工作都有可能让人获得满足感。但问题在于常规化、流水线式的工作更容易带来稳定的生产效率”\n工作 -\u0026gt; 职业 -\u0026gt; 使命\n“正如劳动心理学研究专家皮特所指出的那样，为了让我们对自己的工作满意，我们有必要给自己从事的工作赋予意义” “当人们将自己做的事情仅仅当成一份养家糊口的“工作”来看待的时候，人们很难从工作中获得自主性，也很难从中获取成就感。当人们将工作仅仅看作为了生存必须要做的事情时，人们只在乎报酬，如果其他工作能提供更高的报酬，那么他们随时可能换工作。他们迫不及待地想要退休，也并不鼓励和希望他们的朋友或孩子像他们那样，重蹈他们的覆辙。这种现象也正是亚当·斯密关于工作的观点的具体体现” “当人们将从事的工作视为“使命”时，他们的满意度和成就感是最高的。对这些人来说，工作是生命中最重要的一部分，他们愿意将自己奉献给工作，工作彰显了他们生存的意义，他们深信自己的工作能让世界变得更加美好”\n员工的使命感\n“如果工作中缺少自主性、意义和满意度，工作具有的“使命感”就会减少，从事这项工作的满意度也会下降，员工也不会把这份工作做得很好”\n“其实，你不一定非要在一个救死扶伤的组织内工作，以寻求工作的意义和目标。你只需要找一份能提高人们生活质量的工作就行。”\n工作的成就感\n“仅仅因为目睹了他们的努力给他人带来的幸福，他们的工作效率便提高了两倍。这就是赋予工作的意义后产生的巨大能量。”\n“亚当·斯密描述的那些在大头针工厂中工作的工人也应该试图在内心告诉自己，自己做的事情是有意义和有追求的。也就是说，并不需要耗费太多，就能将几乎任何一份工作变得富有意义。这样做不仅对职工有好处，对服务的客户和员工所在的组织都是有益处的。”\n提供完善的工作保障，这些有助于提高员工的忠诚度和信任度。 团队自我管理，分散决策权，给予员工很高的自主权和自我管理权。这同样也能提高员工对组织的信任，同时也减少了管理监督员工的人力成本。 提供给员工高于行业标准的薪酬，让员工觉得自己很有价值。但他们并不怎么依靠个人激励机制去诱导员工努力工作。当公司盈利时，所有的员工都参与利润分成。员工和公司是一个完整的“利益团体”。 完善的培训体系。无论是新员工，还是老员工，都经过系统专业的培训。这种对员工的培训是公司的一种投资形式，同样有利于培养员工的忠诚和信任。长期系统的培训也让员工不断面临新的挑战，不断提高自己的技能。普费弗还对各国的培训时长进行了对比，同样是汽车行业，日本对刚入职的新员工的平均培训时长为364个小时，欧洲是178个小时，而美国只有21个小时。 评估职工的表现，但不过度评估。公司相信员工会努力工作，也相信员工在接受足够的培训后都会成功。 极力强调公司的目标和愿景，并非首席执行官一时兴起的想法，而是将公司的使命渗透至公司上上下下的具体实践中。” “正如普费弗教授所描述的，应对竞争压力的下意识反应——裁员、加强对员工的管理和监视、催促员工加快进度等举措只会不断降低工作效率和员工的工作满意度，让情况变得更加糟糕”\n“她的核心观点是当人们处于一种积极向上的情绪状态中时，他们更富有想象力和创造力，他们具有弗雷德里克松所称的“更加宽广和具有建设性的与世界互动的方式”。相反，当人们处于一种消极负面的情绪状态中时，他们更容易变得保守，想坐享其成，时时担心出错或把事情弄砸。危险让我们的视野变得更加狭窄”\n现行的比较盛行的措施\n“有两套规范的理论用于管理那些对工作不感兴趣的员工，一个是物质激励（工资），另一个是对流水线工作的严密监视，正所谓胡萝卜加大棒。令人惊奇的是，杰弗里·普费弗认为这两种方法对员工工作满意度都有负面效应。但是这两种方法是企业最先采用的，它们不仅让后勤工作人员和流水线上的工人无法拥有令他们满意的工作，同时由于这两种方法不断受到公司高层人员的青睐，因而在这两种方法的管理下，任何工作都有可能被毁掉，成为糟糕的工作。”\n如果原先是通过道德进行约束(接送儿童迟到), 变成了通过罚款约束, 就上升到了金钱的交易的层面, 交了罚款就理所应当地迟到了.","title":"你为什么而工作"},{"content":"承担责任 承担责任, 把目光聚焦于未来, 解决问题\n与承担责任截然相反的是，把某人或某件事作为导致你所面临的问题的责备对象。当 然，总会有某人或某事是应当受责备的，但真正的领导者只会花时间来解决问题，而不是责 备别人。\n“当你横加责备时，你的注意力集中在过去。如果你承担了责任，你才会将眼光投向未 来。杰夫，无论如何，只有在你承担了所有的责任之后，你才能做好计划来达到自己的目标。\n“我想让你明白的第一个道理是，你应当控制自己来应对环境。如果你不再责备——甚 至避免这个词从你的口中说出来，你就会积极做出某些改变了。”\n和 [[books/ShowYourWork]] 这中表达的意思一样, 思想和计划需要落到文字\n“你到家后把这些都写在这个笔记本上。”托尼向我建议，“记住，当你把这些都写下来 时，你便做出了实施的承诺。如果你只是口头上告诉我你想做什么，就不会对你构成约束。”\n明确团队的使命 明确团队的目标, 我们是一个怎么样的团队, 我们要做完成什么事情. 确保大家对目标的理解是一致的, 大家都清楚自己职责事情的优先级. 也需要让上级知道当前团队的目标. 上下一致, 齐心协力.\n我建议你花时间你管理下属一样来管理一下你的老板。搞清楚她对你有什么样的期 望，告诉你对她有什么样的期望。你知道她的要事是什么吗?她知道你的要事是什么吗?也 许你们应该谈一谈，要想完成你的首要事务，就要弄清楚你们双方应当如何彼此协助\n如果员工有离职的意向, 就要反思是不是自己出了问题, 团队出了问题\n下属们一般不会因为这些原因而离职。他们 之所以离开，是因为上司不能令他们满意。在炒公司鱿鱼之前，他们已经先炒了上司的鱿鱼。 我不是说这是你们公司中的实际情况，我的意思是说，在多数情况下，老板是员工离职的主 要原因。\n避免管理黑洞 逃离信息差, 与下属保持联系.\n管理黑洞, 让团队感到困惑的事情\n让团队感到迷惑的某些事情， 成了令许多经理掉下去的陷阱，”他说，“我把它称为‘管理黑洞’，这里的事与表面看上去 的有所不同。此外，有时人们总免不了要陷入管理黑洞。\n团队的组成\n大多数团队包含三种类型的雇员。有些是超级明星——富有经 验和学识，想在岗位上发挥最佳作用的人。有些是中层星——他们也许还不具备超级明星所 拥有的经验，或者也许以前他们是超级明星，由于某些原因，现在失去了争第一的动力;最 后一种我称之为流星:他们尽量逃避责任，希望担子越轻越好。 “在典型的团队中，有 30%的超级明星，50%的中层星，20%的流星。\n坚持正确 制定原则 \u0026ndash; 正确的事情, 当你对问题感到困惑的时候, 就参考你原则, 你就知道你应该怎么做.\n如果现在你没有一套行为准则或业绩标准的话，就很难知道怎样做才是对的。就目前 情况看这个不成问题\u0026hellip;\u0026hellip;至少从你的话来判断，这不是什么问题。 “当你陷入危机时——就像你现在的境况似的——就很难判断什么是‘对的’。我发现 最佳决策一般都是在发生危机之前做出的。你可以想清楚些，权衡一下两者的利弊\n忽视问题是在拿自己正直的口碑冒险。如果你不再正直，你就不能建立以及保持别人 对你的信任——这是人际关系的根本所在\n就像想树立一个正确的企业文化, 如果坚定想要建立[[企业文化]], 那么任何违反企业文化的人都应该被开除 (不管这是一位多么优秀的员工)\n雇佣合适的员工 寻找合适的员工, \u0026ldquo;合适\u0026rdquo; 可以有很多种定义, 不同处事风格, 不同的个性的团队成员, 都会给团队带来不一样的色彩\n公司中最重大的问题是，团队由不合适的员工组成。事实上，比起团队中都是不合适 的员工来说，竞争者对你造成的危害要小多了。 “作为领导者，重要的任务是要雇佣合适的员工。如果都是没有的、效率不高的员工， 你就不可能有强大的、有效率的团队。 “杰夫，现在你有个大好的机会。由于三个职位空缺，你可以借机改变团队的风格。通 过挑选合适的员工，你可以增加员工的多样性、想出新的主意、增添团队的活力。”\n所以, 人不好招是没有错的. 但是, 还是不能因为人不好招, 而过度放低门槛.\n你要做的决策要不就是精挑细选、管理起来很轻松，要不就是轻松招聘、管理起来很 困难的。我可以保证，你是最佳选择是把时间花在前一种方案上，这样招聘到了合适的员工 后，管理就会变成一种享受。\n面试中，还有人会犯感情用事的错误。空缺的职位让你费时费力，你想快点填补。带 着这种感情，你会速战速决地选择并非很合适的人。我建议你让金或人力资源部的其他人帮 帮忙——他们不会怀有你这样的感情。\n提升效率 端正对待自己时间的态度\n安排时间是你自 己的责任。如果你没时间做重要的事情，只有你自己才能解决这相问题你的团队要靠你来统 筹规划，包括解决你的个人问题\n关于充分利用时间，我知道的办法只有两种:或者少做事，或者加快工作节奏，除此 之外别无选择。\n记录自己的时间花费, 减少被干扰的次数, 避免无意义会议, 集中处理某部分\u0026quot;杂事\u0026quot; .\n首先你要搞清楚，现在你的时间都花在什么地方。如果想改进，就要知道哪里需要改进。\n提升团队满意度 需要明确自己的对某一位团队成员的期待.\n在解雇更多的人之前，我需要明确自己的期望，还要完善对员工的培训\n团队的力量大于你个人的力量. 团队更加重要\n1.作为领导者，我的业绩是团队共同努力的结果。员工们需要你——你是重要人物。然 而，你的成功是下属的功劳，并非完全源于你自身的努力。 2.你对团队的需要甚于团队对你的需要。有要误会了我的意思——你与员工彼此都离不 开彼此都离不开对方，但团队中 17 位员工的贡献加在一起，比你一个人的贡献更大。\n提升团队成员的满意\n薪资, 简单且快速的方法, 但是很容易褪去 明确团队成员的目标, 提升工作的满意度 反馈和知道成员. 让成员知道你在意他们, 重视他们. 团队的凝聚力, 大家成为团队的一员. 保持学习 我们的天性, 就是喜欢舒服的过日子\n他们早上一睁眼，就开始重复前一天的生活 ——因为他们因此而觉得舒适——直到退休为止\n保持学习\n“你要想出人头地，就不能放任自己躺在舒适地带上自鸣得意。你要追求进步。为了发 挥潜力，你要迈出舒适在带，走入‘学习地带’\n学习的三个阶段: 阅读, 倾听(向他人学习), 分享\n学习地带中有三个‘房间’。第一个房间是阅览室 第二个房间是倾听室。你知道吗?经理们失败的主要原因在于他们骄傲自大、过于自 负、麻木不仁 学习中的第三个房间是给予室。我深深感到，如果不回报，就不会成功。”托尼接着 说道，\n制定明确的目标, 并落成文字 人们为什么没有制定目标\n第一，因为人闪不知道订立目标的重要性。我所知道的每项伟大的成就都开始于一纸 目标。 第二，大部分人不知道该如何制定目标, 书写会让你对目标更为明确。 第三，有时人们因为害怕失败而不敢订立目标。 第四，为了达到目标，人们必须脱离舒适地带。许多人不敢这样做。因为这意味着需 要学习新技术。\n乐观地面对生活\n生活中有很多事情都与生活态度，如何面对生活 带来的苦恼有关。生活是美好的——即使境况恶化时也依然如此。要保持乐观自信。这会有 助于你创造崭新的生活。\n","permalink":"https://ynikl.github.io/books/monday-morning-mentoring/","summary":"承担责任 承担责任, 把目光聚焦于未来, 解决问题\n与承担责任截然相反的是，把某人或某件事作为导致你所面临的问题的责备对象。当 然，总会有某人或某事是应当受责备的，但真正的领导者只会花时间来解决问题，而不是责 备别人。\n“当你横加责备时，你的注意力集中在过去。如果你承担了责任，你才会将眼光投向未 来。杰夫，无论如何，只有在你承担了所有的责任之后，你才能做好计划来达到自己的目标。\n“我想让你明白的第一个道理是，你应当控制自己来应对环境。如果你不再责备——甚 至避免这个词从你的口中说出来，你就会积极做出某些改变了。”\n和 [[books/ShowYourWork]] 这中表达的意思一样, 思想和计划需要落到文字\n“你到家后把这些都写在这个笔记本上。”托尼向我建议，“记住，当你把这些都写下来 时，你便做出了实施的承诺。如果你只是口头上告诉我你想做什么，就不会对你构成约束。”\n明确团队的使命 明确团队的目标, 我们是一个怎么样的团队, 我们要做完成什么事情. 确保大家对目标的理解是一致的, 大家都清楚自己职责事情的优先级. 也需要让上级知道当前团队的目标. 上下一致, 齐心协力.\n我建议你花时间你管理下属一样来管理一下你的老板。搞清楚她对你有什么样的期 望，告诉你对她有什么样的期望。你知道她的要事是什么吗?她知道你的要事是什么吗?也 许你们应该谈一谈，要想完成你的首要事务，就要弄清楚你们双方应当如何彼此协助\n如果员工有离职的意向, 就要反思是不是自己出了问题, 团队出了问题\n下属们一般不会因为这些原因而离职。他们 之所以离开，是因为上司不能令他们满意。在炒公司鱿鱼之前，他们已经先炒了上司的鱿鱼。 我不是说这是你们公司中的实际情况，我的意思是说，在多数情况下，老板是员工离职的主 要原因。\n避免管理黑洞 逃离信息差, 与下属保持联系.\n管理黑洞, 让团队感到困惑的事情\n让团队感到迷惑的某些事情， 成了令许多经理掉下去的陷阱，”他说，“我把它称为‘管理黑洞’，这里的事与表面看上去 的有所不同。此外，有时人们总免不了要陷入管理黑洞。\n团队的组成\n大多数团队包含三种类型的雇员。有些是超级明星——富有经 验和学识，想在岗位上发挥最佳作用的人。有些是中层星——他们也许还不具备超级明星所 拥有的经验，或者也许以前他们是超级明星，由于某些原因，现在失去了争第一的动力;最 后一种我称之为流星:他们尽量逃避责任，希望担子越轻越好。 “在典型的团队中，有 30%的超级明星，50%的中层星，20%的流星。\n坚持正确 制定原则 \u0026ndash; 正确的事情, 当你对问题感到困惑的时候, 就参考你原则, 你就知道你应该怎么做.\n如果现在你没有一套行为准则或业绩标准的话，就很难知道怎样做才是对的。就目前 情况看这个不成问题\u0026hellip;\u0026hellip;至少从你的话来判断，这不是什么问题。 “当你陷入危机时——就像你现在的境况似的——就很难判断什么是‘对的’。我发现 最佳决策一般都是在发生危机之前做出的。你可以想清楚些，权衡一下两者的利弊\n忽视问题是在拿自己正直的口碑冒险。如果你不再正直，你就不能建立以及保持别人 对你的信任——这是人际关系的根本所在\n就像想树立一个正确的企业文化, 如果坚定想要建立[[企业文化]], 那么任何违反企业文化的人都应该被开除 (不管这是一位多么优秀的员工)\n雇佣合适的员工 寻找合适的员工, \u0026ldquo;合适\u0026rdquo; 可以有很多种定义, 不同处事风格, 不同的个性的团队成员, 都会给团队带来不一样的色彩","title":"周一清晨的领导课"},{"content":"习惯的力量 什么是习惯 习惯是我们可以不假思索就会完成的一系列动作, 是我们在生物进化过程的中的产物. 由 暗示, 行为, 奖励 三步组成. 我们接受到某种暗示, 潜意识开始渴望获得奖励, 不由自主地开始了习惯行为, 并内心渴望着得到奖励.\n“科学家说习惯之所以出现，是因为大脑一直在寻找可以省力的方式”\n“第一步，存在着一个暗示，能让大脑进入某种自动行为模式，并决定使用哪种习惯。第二步，存在一个惯常行为，这可以是身体、思维或情感方面的。第三步则是奖赏，这让你的大脑辨别出是否应该记下这个回路，以备将来之用”\n“习惯从来都不会消失，它们已经被嵌入了大脑的结构中，而这对我们来说是莫大的优势，因为如果我们每次放完假后都要重新学习如何开车，那可就太糟糕了”\n“这种心理的基础是两条基本规律： 第一，找出一种简单又明显的暗示。 第二，清楚地说明有哪些奖赏。”\n用 白速得 牙膏的广告, 展示了利用人们习惯的影响, 让大家渴望得到一口漂亮的牙齿, 养成刷牙的习惯.\n“看看“白速得”吧。他发现了一种暗示——垢膜，以及一个奖赏——漂亮的牙齿，这使千百万人开始了每天的固定活动——刷牙”\n“这解释了为什么习惯如此强大：它们能够创造出神经渴求。在大部分时间里，这些渴求是逐渐产生的，而我们确实没有意识到它们的存在，所以往往看不到它们的影响”\n大家如果把手机的震动关闭了, 那可能就不会再有去查看手机的冲动了.\n“换言之，如果有人关了震动，也就是消除了暗示，那么大家可能就会一直工作，而不会想去查看未读消息）。”\n对奖励的渴望 “92%的参与者说他们习惯性锻炼是因为这让他们“感觉很好”，他们变得越来越期盼并渴求运动时产生的内啡肽和其他神经化学物质。在另一组人中，67%的人说锻炼让他们有一种“成就感”，他们从追踪自己的运动表现中渴求一种经常出现的胜利感。这种自我奖赏足够让体育活动变成一种习惯。”\n“暗示加上奖赏本身并不足以让新习惯长期持续。只有你的大脑开始预期奖赏，渴求内啡肽的分泌或成就感时，你才会自觉地在每天早上绑好跑鞋鞋带。而暗示除了能够触发惯常行为，还必须能够触发人对即将到来的奖赏的渴求”\n“他们创造了渴求感，让消费者产生了所有东西在有亮闪闪的外观的同时，也有好闻的味道的欲望，这让纺必适在市场上大卖”\n“消费者需要一些信号告诉他们这种产品是有效的，我们可以随意调整牙膏的口感，可以是蓝莓味、绿茶味，而只要有那种凉丝丝的刺激感，大家就觉得牙齿刷干净了。这种刺激感并不会让牙膏的效果更好，但可以说服大家牙膏有效。”\n“是渴求在驱动着习惯。找到触发渴求的方式让创造新习惯变得更容易。现在是这样，100年之前也是如此。每天晚上，数百万人在刷牙，就是为了获得那种刺激感。每天早上，数百万人穿上跑鞋，就是想获得他们渴求的大量内啡肽。等他们回到家，打扫了厨房或卧室后，有些人又会喷点儿纺必适来满足自己对那种气味的渴求”\n习惯是可以改变的 “习惯是一种分为三个步骤的回路，由暗示、惯常行为和奖赏组成，邓吉想做的只是调整中间那个步骤，即惯常行为。根据经验，他知道如果新行为模式的开头和结尾存在一个人熟悉的东西，那么就更容易说服这个人接受新的行为模式。”\n习惯是可以替代的.\n“这就是黄金法则；如果你用同样的暗示，提供同样的奖赏，你就可以换掉惯常行为，改变自己的习惯。如果暗示和奖赏不变，几乎所有的习惯都是可以被改变的。”\n匿名戒酒会通过自我反省和倾诉, 寻找自己形成习惯的内心的渴求的真正因素\n这个项目要找的是哪些渴求感在驱使着你的习惯回路。通常来说，喝醉本身并不属于渴求。酗酒者之所以想喝酒，是因为酒让他们能逃避现实，放松心情，又有人陪伴，而且缓解焦虑，情感也得到释放。或许他们想喝杯鸡尾酒来忘记烦心事，但并不一定想“买醉”。酒精的物理作用往往是嗜酒成瘾这个习惯回路中最次要的奖赏之一。\n暗示和奖赏不变, 替换掉中间的行为, 我们就可以改变习惯\n“旧的暗示和对奖赏的渴求仍在那里，随时准备反击。只有当酗酒者养成了利用以前的暗示和让他们感到熟悉进而有宽慰感的新的惯常行为时，他们才能永久戒酒。”\n“这种让病人描述引发他们习惯性行为的暗示的做法，叫做意识训练，正如匿名戒酒互助社坚持让酗酒者找出酗酒的暗示，这是相反习惯训练的第一步”\n更深层次的信仰达成, 也是说是一种精神上的奖励\n“研究人员发现，起作用的并不是上帝，而是信仰本身。一旦人们学会信仰某种东西，这种信仰就会扩展到生活的其他方面，直到他们开始相信自己能改变。信仰是将改造过的习惯回路变成永久性行为的要素。”\n在做之前, 我们要对自己有信心\n“但我们的确知道，为了永久改变习惯，人们必须相信改变是可能的”\n如果只是一刀斩断习惯, 那么过程将会是痛苦的\n“如果你想减肥，就应了解自己的习惯，看看为什么每天休息时，自己都会离开办公桌去吃点心？然后，每到休息时，就找朋友去散步，或到他们办公桌那里闲聊，而不是去咖啡厅，或者加入一个跟踪减肥过程的小组，还可以找一个跟你一样，想在手边放一些苹果而不是薯片的伙伴” “事实一目了然：如果你想改变一个习惯，你必须找另一个惯常行为替代”\n企业习惯 在商业上, 一家公司的习惯, 就可以说是这家公司的核心价值观, 就是企业文化. 真正的企业价值是需要所有人都有着一致的认可才行, 当我们在工作上遇到一些有疑惑的事情, 我们可以不假思索地参考我们的企业习惯去处理事情, 这种才能说明, 我们的企业文化有真正的落地.\n“一些习惯比起其他习惯在重塑商业和生活方式上更有影响力，它们就是“核心习惯”，影响着人们的工作、饮食、玩乐、消费和沟通方式。核心习惯能启动一个进程，久而久之将改变一切。”\n“个人有习惯；组织则有惯例”\n当早上起来我们把被子折好之后, 看着整齐的床铺, 我们会得到 \u0026ldquo;今天将是美好的一天的暗示\u0026rdquo;\n“当人们开始养成运动的习惯时，即使是一周一次的运动，他们也会不知不觉改变其他与之无关的行为模式” “每天早上整理床铺，与更高的工作效率、更强的幸福感以及控制预算能力有关”\n“小成功是关键习惯引起广泛变化这个过程的一部分。大量的研究表明，小成功在实现胜利过程中，有着巨大的影响力”\n“这就是核心习惯推动广泛变化的最后一种方法：建立能融入新价值观的文化。核心习惯会让艰难的抉择变得容易，比如说开除高层人员这种抉择，因为破坏企业文化的人就得离开。”\n“核心习惯之所以能改变我们，是因为它能创造出各种文化，让我们清楚地看到那些在抉择困难或者感到茫然的时候很可能被忘记的价值”\n“，“大部分企业行为可以被理解为企业过去的一般习惯和战略方向的外在反映”\n意志力 意志力是一种能量, 会被消耗殆尽的\n“由于之前消耗了一些意志力去抵御饼干的诱惑，那些人就成了容易退出的阵营当中的一员。”姆拉文向我解释道，“从那次试验之后，我们又作了超过200次的研究，结论都是相同的。意志力不是一种技能，而是一种力量，就如同你手臂和大腿中肌肉的力量，用力过猛会感到疲累，肌肉剩余的力量就不足以供给其他活动。”\n意志力是一种能量, 也是可以通过训练得到提高.\n“他们限制垃圾食品的摄入，在工作学习的时候也更有效率。这就像体育锻炼研究中所说的，如果人们在生活的某一方面加强了自己的意志力量，比如体育运动和理财项目，那么这种力量会进入到他们的饮食习惯和工作中。一旦意志力得到加强，它就会延伸到生活的方方面面。” “来自达特茅斯学院的致力于意志力研究的学者托德·希瑟顿说：“当你学会强迫自己参与体育锻炼，或者开始做家庭作业，只吃沙拉不吃汉堡的时候，你的思维正在改变。当学会控制自己的冲动时，人们就在进步。他们将学会如何在诱惑面前分散注意力。而且一旦你形成了意志力锻炼的习惯，你的大脑就会驾轻就熟地帮助你专注于你的目标。”\n当我们觉得做一件事情, 我们没有认同感, 我们就更加需要使用意志力去强迫我们自己去做这件事.\n“，“当被要求去做一些需要自我克制的事情时，如果参与者认为这是个选择或者因为可以帮助别人而让自己开心，那用到的意志力就会少很多。如果他们感到自己没有自主权，只是单纯地接受命令，他们意志力消耗的速度就会加快。”在这个例子中，学生都忽视了饼干，但当这些学生感觉自己被当成工具对待时，他们的意志力消耗得就会更快。”\n抓住逆境, 调整习惯 一家医院因为遇到了发生了重大医疗事故, 大家就需要做出妥协, 有利于企业调整企业的习惯\n“有时候人们需要逆境的鞭策，而医院的这些负面影响就是巨大的逆境，它给了我们一个机会来重新审视这一切。”\n“医生和护士们不愿意拍摄自己的手术过程，也不愿意其他医院的医护人员指指点点。但是一旦危机笼罩了整所医院，每个人都愿意做出一些改变”\n“优秀的领导者会抓住危机来重塑组织习惯”\n“但明智的领导者会寻求危机甚至创造危机感，并让大家都有需要改变的感觉，直到最后所有人都作好准备来彻底改变他们以往习惯的行为模式”\n消费者的习惯 “有时候，顾客就像是一种被消费习惯支配的生物，他们会自动重复过去的行为，很少考虑到当前的目标”\n利用[[大数据]], 来构建消费的人群画像, 分析消费者的习惯, 促进消费的进一步消费\n“波尔告诉我：“我们将这种分析称为‘为客人画像’，我们对某位顾客了解得越多，就越能猜测出他的购买模式”\n“当消费者遭遇到人生的重大事件时，他们的消费习惯更容易发生改变”\n习惯影响社会运动 “运动的持续在于运动领袖让参与者形成了新的习惯，树立了新的认同感和主人翁感。”\n“社会学家认为，通常来说，物以类聚，人以群分。我们的好朋友当中会有一些比较有钱，一些比较贫穷，还有一些是来自其他种族，但总体上说，与我们关系最深厚的朋友，往往是那些性情与我们相近、收入与我们相当，并且与我们有共同背景的人。”\n“如果你忽视邻里间的义务感，如果你对社群的既定模式不屑一顾，你很可能失去你的社会地位。你会危及自己获得很多社群福利的资格，比如你没法参加乡村俱乐部、校友会或者教会，而这些正是你社群福利的前提。”\n人与人之间联系, 可以分为强联系和弱联系\n“这种习惯来自朋友的期望和普通熟人的同伴压力。所以，不管他们有过怎样的犹豫，最终他们还是会登上去密西西比的班车”\n“社区中弱联系的力量将所有人联合了起来。在这种环境下，如果你不加入抵制，那你就是异类”\n“通过引导人们的社会习惯来传教，比如民权运动就是一个很好的模仿对象。麦加兰夫在他的一本书中写道：“固定的目标是让整个社会，也就是所有人皈依基督教，或者让大部分人皈依，这样才可以使个人的社会生活不会受到破坏。”\n“运动并不是因为大家突然作了同样的决定而出现的。他们依靠的社会习惯模式一开始是作为友谊的习惯存在的，在社群习惯中成长，并由改变参与者自我感的新习惯维系”\n改变自己 “不过，要想改变习惯，那就必须有决心去改。你必须有意识地去努力寻找驱动着你的习惯每天发生的暗示和奖赏，并且找到它们的替代品。”\n“如果你相信你可以改变，如果你将其变成一种习惯，那么改变就是真实可行的。这就是习惯的真正力量：你的选择决定了你的习惯。一旦做出选择，并且成了自发行为，”\n习惯记录笔记\n“你在哪？（坐在我的办工桌前） 现在几点？（下午3点36分） 你的情绪怎样？（觉得无聊） 周围有谁？（空无一人） 在买饼干的冲动之前，你做了什么？（我回复了一封电子邮件）”\n","permalink":"https://ynikl.github.io/books/the-power-of-habit/","summary":"习惯的力量 什么是习惯 习惯是我们可以不假思索就会完成的一系列动作, 是我们在生物进化过程的中的产物. 由 暗示, 行为, 奖励 三步组成. 我们接受到某种暗示, 潜意识开始渴望获得奖励, 不由自主地开始了习惯行为, 并内心渴望着得到奖励.\n“科学家说习惯之所以出现，是因为大脑一直在寻找可以省力的方式”\n“第一步，存在着一个暗示，能让大脑进入某种自动行为模式，并决定使用哪种习惯。第二步，存在一个惯常行为，这可以是身体、思维或情感方面的。第三步则是奖赏，这让你的大脑辨别出是否应该记下这个回路，以备将来之用”\n“习惯从来都不会消失，它们已经被嵌入了大脑的结构中，而这对我们来说是莫大的优势，因为如果我们每次放完假后都要重新学习如何开车，那可就太糟糕了”\n“这种心理的基础是两条基本规律： 第一，找出一种简单又明显的暗示。 第二，清楚地说明有哪些奖赏。”\n用 白速得 牙膏的广告, 展示了利用人们习惯的影响, 让大家渴望得到一口漂亮的牙齿, 养成刷牙的习惯.\n“看看“白速得”吧。他发现了一种暗示——垢膜，以及一个奖赏——漂亮的牙齿，这使千百万人开始了每天的固定活动——刷牙”\n“这解释了为什么习惯如此强大：它们能够创造出神经渴求。在大部分时间里，这些渴求是逐渐产生的，而我们确实没有意识到它们的存在，所以往往看不到它们的影响”\n大家如果把手机的震动关闭了, 那可能就不会再有去查看手机的冲动了.\n“换言之，如果有人关了震动，也就是消除了暗示，那么大家可能就会一直工作，而不会想去查看未读消息）。”\n对奖励的渴望 “92%的参与者说他们习惯性锻炼是因为这让他们“感觉很好”，他们变得越来越期盼并渴求运动时产生的内啡肽和其他神经化学物质。在另一组人中，67%的人说锻炼让他们有一种“成就感”，他们从追踪自己的运动表现中渴求一种经常出现的胜利感。这种自我奖赏足够让体育活动变成一种习惯。”\n“暗示加上奖赏本身并不足以让新习惯长期持续。只有你的大脑开始预期奖赏，渴求内啡肽的分泌或成就感时，你才会自觉地在每天早上绑好跑鞋鞋带。而暗示除了能够触发惯常行为，还必须能够触发人对即将到来的奖赏的渴求”\n“他们创造了渴求感，让消费者产生了所有东西在有亮闪闪的外观的同时，也有好闻的味道的欲望，这让纺必适在市场上大卖”\n“消费者需要一些信号告诉他们这种产品是有效的，我们可以随意调整牙膏的口感，可以是蓝莓味、绿茶味，而只要有那种凉丝丝的刺激感，大家就觉得牙齿刷干净了。这种刺激感并不会让牙膏的效果更好，但可以说服大家牙膏有效。”\n“是渴求在驱动着习惯。找到触发渴求的方式让创造新习惯变得更容易。现在是这样，100年之前也是如此。每天晚上，数百万人在刷牙，就是为了获得那种刺激感。每天早上，数百万人穿上跑鞋，就是想获得他们渴求的大量内啡肽。等他们回到家，打扫了厨房或卧室后，有些人又会喷点儿纺必适来满足自己对那种气味的渴求”\n习惯是可以改变的 “习惯是一种分为三个步骤的回路，由暗示、惯常行为和奖赏组成，邓吉想做的只是调整中间那个步骤，即惯常行为。根据经验，他知道如果新行为模式的开头和结尾存在一个人熟悉的东西，那么就更容易说服这个人接受新的行为模式。”\n习惯是可以替代的.\n“这就是黄金法则；如果你用同样的暗示，提供同样的奖赏，你就可以换掉惯常行为，改变自己的习惯。如果暗示和奖赏不变，几乎所有的习惯都是可以被改变的。”\n匿名戒酒会通过自我反省和倾诉, 寻找自己形成习惯的内心的渴求的真正因素\n这个项目要找的是哪些渴求感在驱使着你的习惯回路。通常来说，喝醉本身并不属于渴求。酗酒者之所以想喝酒，是因为酒让他们能逃避现实，放松心情，又有人陪伴，而且缓解焦虑，情感也得到释放。或许他们想喝杯鸡尾酒来忘记烦心事，但并不一定想“买醉”。酒精的物理作用往往是嗜酒成瘾这个习惯回路中最次要的奖赏之一。\n暗示和奖赏不变, 替换掉中间的行为, 我们就可以改变习惯\n“旧的暗示和对奖赏的渴求仍在那里，随时准备反击。只有当酗酒者养成了利用以前的暗示和让他们感到熟悉进而有宽慰感的新的惯常行为时，他们才能永久戒酒。”\n“这种让病人描述引发他们习惯性行为的暗示的做法，叫做意识训练，正如匿名戒酒互助社坚持让酗酒者找出酗酒的暗示，这是相反习惯训练的第一步”\n更深层次的信仰达成, 也是说是一种精神上的奖励\n“研究人员发现，起作用的并不是上帝，而是信仰本身。一旦人们学会信仰某种东西，这种信仰就会扩展到生活的其他方面，直到他们开始相信自己能改变。信仰是将改造过的习惯回路变成永久性行为的要素。”\n在做之前, 我们要对自己有信心\n“但我们的确知道，为了永久改变习惯，人们必须相信改变是可能的”\n如果只是一刀斩断习惯, 那么过程将会是痛苦的\n“如果你想减肥，就应了解自己的习惯，看看为什么每天休息时，自己都会离开办公桌去吃点心？然后，每到休息时，就找朋友去散步，或到他们办公桌那里闲聊，而不是去咖啡厅，或者加入一个跟踪减肥过程的小组，还可以找一个跟你一样，想在手边放一些苹果而不是薯片的伙伴” “事实一目了然：如果你想改变一个习惯，你必须找另一个惯常行为替代”\n企业习惯 在商业上, 一家公司的习惯, 就可以说是这家公司的核心价值观, 就是企业文化. 真正的企业价值是需要所有人都有着一致的认可才行, 当我们在工作上遇到一些有疑惑的事情, 我们可以不假思索地参考我们的企业习惯去处理事情, 这种才能说明, 我们的企业文化有真正的落地.\n“一些习惯比起其他习惯在重塑商业和生活方式上更有影响力，它们就是“核心习惯”，影响着人们的工作、饮食、玩乐、消费和沟通方式。核心习惯能启动一个进程，久而久之将改变一切。”\n“个人有习惯；组织则有惯例”","title":"The Power of Habit"},{"content":"2023 OKR 在生活上, 让时间过得更加有计划性, 持续增加自己的知识储备. 在精神上, 塑造更加坚毅的内心, 输出更多的自我表达. 在工作上, 抓住机遇, 开始打造自己的技术护城河, 争取到一次涨薪. 2023 年加油.\n深化打造技术护城河\n音视频处理入门 精通 Golang 语言 扩展自己知识认知, 提升自我象形.\n每个月 4-5 本书籍的阅读量. 35 cm 的臂维, 肚子没有赘肉. 迈出自己的圈子\n完成20次开心的朋友聚会. 达成两场旅游. 9.04 修改\n铺广技术栈, 为成为独立开发者做努力, 以广度为主\nPython 数据分析, AI 工具, 快速开发的能力 前端开发能力, 能够掌握当前主流开发 了解大数据的工作原理 January O: 加深 Golang 技术\ngolang 100 Mistake go gorm 学习 go gin 学习 go context go 泛型 O: 算法与数据结构入门\n算法数据结构资料汇总, 以及学习计划安排 算法4 完成5章精读 总结:\n中间调整目标转向学习视频的编码技术, 下次配合更新OKR目标\n聚会次数完成 +=2\n阅读 5\nFebruary O: 加深 Golang 技术\ngolang 100 Mistake go 单元测试技能 O: 视频技能入门\n业务上完成视频产品接入\n一本相关技术书籍完成\nAdjust1: 业务发展调整, 功能承接失败, 但是以视频开发方向暂时不变\nC++ Prime Plus 1/2 大数据相关基础知识入门 Adjust2: AI 排班问题暴露, 需要加强关注\n~~ AI 排班代码完成通读 ~~\n人工智能入门 O: 算法与数据结构入门\n算法数据结构资料汇总, 以及学习计划安排 March 反思原先各有OKR制定目标比较分散, 任务较多不贴合实际. 缩减一下任务量, 本月以收缩 golang 相关技能为主\nO: 加深 Golang 技术\nGolang 100 Mistake Go 单元测试技能 gorm 学习 golang 100 Mistake interface 设计思路 O: 拓展技能\n大数据相关基础知识入门 O: 算法与数据结构入门\n算法数据结构资料汇总, 制定学习计划 May 追求内心与工作的平衡\nO: 加深 Golang 技术\nGolang 100 Mistake Go 单元测试技能 gorm 学习 golang 100 Mistake interface 设计思路 O: 走出去\n骑行1000km O: 思考副业计划\n列出3个初步发副业方案计划 September 铺广技术道路\nMongoDB 工作原理 Python 自动化工具 ","permalink":"https://ynikl.github.io/neo/okr-2023/","summary":"2023 OKR 在生活上, 让时间过得更加有计划性, 持续增加自己的知识储备. 在精神上, 塑造更加坚毅的内心, 输出更多的自我表达. 在工作上, 抓住机遇, 开始打造自己的技术护城河, 争取到一次涨薪. 2023 年加油.\n深化打造技术护城河\n音视频处理入门 精通 Golang 语言 扩展自己知识认知, 提升自我象形.\n每个月 4-5 本书籍的阅读量. 35 cm 的臂维, 肚子没有赘肉. 迈出自己的圈子\n完成20次开心的朋友聚会. 达成两场旅游. 9.04 修改\n铺广技术栈, 为成为独立开发者做努力, 以广度为主\nPython 数据分析, AI 工具, 快速开发的能力 前端开发能力, 能够掌握当前主流开发 了解大数据的工作原理 January O: 加深 Golang 技术\ngolang 100 Mistake go gorm 学习 go gin 学习 go context go 泛型 O: 算法与数据结构入门\n算法数据结构资料汇总, 以及学习计划安排 算法4 完成5章精读 总结:\n中间调整目标转向学习视频的编码技术, 下次配合更新OKR目标","title":"Okr 2023"},{"content":" \u0026ldquo;与其担心宏观经济，不如关注自己。你对自己生活的影响，往往比宏观经济对你的影响大得多。\u0026rdquo;\n不要 过度 自己是否会被裁员, 而是要聚焦自己目标的, 提升自己的能力, 抵抗宏观经济问题.\n阮一峰网络日志\n世界最大对冲基金\u0026quot;桥水基金\u0026quot;创始人达里奥，说过一句话，可以用在这里：\u0026ldquo;如果你忧心忡忡，那是不必要的；如果你毫不担心，那么你需要担心。\u0026rdquo;\n要保持担忧, 但更要聚焦于自己\n","permalink":"https://ynikl.github.io/notes/202301/","summary":"\u0026ldquo;与其担心宏观经济，不如关注自己。你对自己生活的影响，往往比宏观经济对你的影响大得多。\u0026rdquo;\n不要 过度 自己是否会被裁员, 而是要聚焦自己目标的, 提升自己的能力, 抵抗宏观经济问题.\n阮一峰网络日志\n世界最大对冲基金\u0026quot;桥水基金\u0026quot;创始人达里奥，说过一句话，可以用在这里：\u0026ldquo;如果你忧心忡忡，那是不必要的；如果你毫不担心，那么你需要担心。\u0026rdquo;\n要保持担忧, 但更要聚焦于自己","title":"202301"},{"content":"Golang Gin 框架的使用和理解 框架代码地址\n中间的几个关键对象 Engine RouterGroup HandlerFunc Context Engine gin 的框架实例, 包含路由地址, 中间件, 框架配置. 通过New()或者Default()创建\nNew 不带任何中间件 Default 会带 logger 和 recover 通过 Engine.Use() 添加中间件到Engine的RouterGroup\nEngine.Run 启动, 并绑定到参数的地址\nRouterGroup 1 2 3 4 5 6 type RouterGroup struct { Handlers HandlersChain basePath string engine *Engine root bool } 用于存储中间件的处理方法 \u0026ndash; 存储再 HandlersChain 里面, 即[]HandlerFunc\n真正的路由地址存储在engine.trees \u0026ndash; 路由树, 检索请求地址和对应处理方法.\nEngine 包含 RouterGroup, RouterGroup 也会存储 Engine 的地址. 目的是为了, 加点api地址时, 根据当前具体配置的中间件, 再添加engine的路由树. 也就是说, 过程中修改了中间件, 不会影响到已经配置的路由的中间件.\n1 2 3 4 5 6 func (group *RouterGroup) handle(httpMethod, relativePath string, handlers HandlersChain) IRoutes { absolutePath := group.calculateAbsolutePath(relativePath) handlers = group.combineHandlers(handlers) group.engine.addRoute(httpMethod, absolutePath, handlers) return group.returnObj() } 注册路由之前, 先将当前的 http 处理方法, 与当前中间件配置合并, 再添加到engine.\nRouterGroup RouterGroup.Group\t创建一个新的 RouterGroup\n1 2 3 4 5 6 7 func (group *RouterGroup) Group(relativePath string, handlers ...HandlerFunc) *RouterGroup { return \u0026amp;RouterGroup{ Handlers: group.combineHandlers(handlers), basePath: group.calculateAbsolutePath(relativePath), engine: group.engine, } } 创建新的 Group 时候,也会继承旧的 Group, 原先已经设置的 middleware. gin 框架不支持移除中间件的操作，所以在上层设置的中间件的时候一定要确保是公共 common 的\n相似的路由捆绑在一块, 路由组写法, 可以做绑定相同中间件处理.\n1 2 3 4 5 6 7 // Simple group: v1 v1 := router.Group(\u0026#34;/v1\u0026#34;) { v1.POST(\u0026#34;/login\u0026#34;, loginEndpoint) v1.POST(\u0026#34;/submit\u0026#34;, submitEndpoint) v1.POST(\u0026#34;/read\u0026#34;, readEndpoint) } 中间的花括号只起美化代码作用, 非必需\nHandlerFunc 中间件和请求处理方法的函数签名\n1 type HandlerFunc func(*Context) 处理请求的时候, HandlerFunc 执行完毕 \u0026ndash; 代表该请求处理结束\nContext gin 自己实现的 Context 结构\n在中间件中传递参数 控制调用流程 获取参数 返回结果 Context 结构的重要组成部分介绍\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 type Context struct { // 存储URL 参数 Params Params // 写入请求的结果 Writer ResponseWriter // 请求的所有处理方法集合 handlers HandlersChain // 当前执行到第几个方法 index int8 // 存储流转于中间件的参数式 Keys map[string]any } 在中间件中传递参数 context.Get context.Set 两个方法在中间件中传递参数 流程控制 context.Next() 1 2 3 4 5 6 7 func (c *Context) Next() { c.index++ for c.index \u0026lt; int8(len(c.handlers)) { c.handlers[c.index](c) c.index++ } } 将当前代码执行点移交到下一个 HandlerFunc 具体流程看, Middleware\n获取参数 context.Param() 获取 Query Param 的字符串参数 context.Query() context.QueryMap() 或者 context.PostFormMap 获取 map 的参数 context.Bind 将参数包含query参数和body参数解析之后, 反序列化到传入的结构体. tag binding:\u0026quot;required\u0026quot; 如果没有对应参数会报错 调用结束 conetxt.JSON 以json的形式, 返回结果 举个例子: 如果是json的的化就是 jsonBinding 进行反序列化 报错 500 context.AbortWithStatus() Cookie 操作 context.Cookie() context.SetCookie() Middleware 符合 HandlerFunc 签名的函数. 就可以Engine.Use注册层路由. 路由设置 的处理函数, 在本质上可以称为中间件.\ngin 会按照 routegroup Use 中间件的先后顺序存储到路由表中 接收请求, 依次执行注册时设置的所有中间件函数. Next 调用流程图:\n1 2 3 4 5 6 7 8 9 10 11 12 13 middleware 1 | - doing m1 work | - call Context.Next() | - call middleware 2 | - doing m2 work | - call Context.Next() | - call middleware 3 | - - done m3 | - continue m2 work | - - done m2 work | - coninue m1 work | - done finish 当调研 Context.Next() 时会调用下一个中间函数, 当下一个函数执行完成之后, 执行 代码会返回到原先调用 Context.Next()的地方 \u0026ndash; 递归\nAbort 中间处理时可以调用 Context.Abort()\n1 2 3 func (c *Context) Abort() { c.index = abortIndex } 会将函数调用链的index指向一个超大整数 \u0026ndash; 放弃后面所有的处理函数, 但是 调用Abort后, 同一个函数接下的代码还会继续执行\n小demo demo\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 func main() { eg := gin.New() eg.Use(m1, m2) eg.GET(\u0026#34;/greet\u0026#34;, m3, greet) eg.GET(\u0026#34;/abort\u0026#34;, abort, m3, greet) eg.Run(\u0026#34;:8080\u0026#34;) } func m1(c *gin.Context) { fmt.Println(\u0026#34;before m1 next\u0026#34;) c.Next() fmt.Println(\u0026#34;after m1 next\u0026#34;) } func m2(c *gin.Context) { fmt.Println(\u0026#34;\\tbefore m2 next\u0026#34;) c.Next() fmt.Println(\u0026#34;\\tafter m2 next\u0026#34;) } func m3(c *gin.Context) { fmt.Println(\u0026#34;\\t\\tbefore m3 next\u0026#34;) c.Next() fmt.Println(\u0026#34;\\t\\tafter m3 next\u0026#34;) } func abort(c *gin.Context) { fmt.Println(\u0026#34;\\t\\t\\tbefore abort\u0026#34;) c.Abort() fmt.Println(\u0026#34;\\t\\t\\tafter abort\u0026#34;) } func greet(c *gin.Context) { fmt.Println(\u0026#34;\\t\\t\\t\\thow are you doing?\u0026#34;) c.JSON(200, \u0026#34;great\u0026#34;) } 接口 /greet 的输出\n1 2 3 4 5 6 7 before m1 next before m2 next before m3 next how are you doing? after m3 next after m2 next after m1 next 接口 /abort 的数据\n1 2 3 4 5 6 before m1 next before m2 next before abort after abort after m2 next after m1 next 其他 gin.H\n1 2 type gin.H map[string]interface{} // 常用于 engine.JSON() 时返回 json 数据 几个问题 Gin 的 context 有什么作用和怎么用? context 是 Gin 代码请求流转的核心, 存储处理请求的所有必须参数\n基本的使用方法:\n需要知道如何获取参数 \u0026ndash; Bind 或者 Param 方法 控制处理函数流程 \u0026ndash; Next 或者 Abort 方法 返回结果 \u0026ndash; JSON Gin 的整体框架流程是怎么样的? 从接受到一个请求再到返回请求中间的流程? 请求的注册入口, Engine.ServeHTTP\n整体流程\n存储路由路径和注册的处理函数到\u0026quot;路由树\u0026quot; \u0026ndash; nodetree 接收请求 根据接收到的请求地址, 从路由树中取出注册的函数, 组成HandlerChain 函数处理链 把函数处理链赋值到gin.Context中 由gin.Context开始依次调用注册处理函数, 所以函数遍历完成, 处理结束 通过gin.Context.Writer写入http请求结果 请求结束 ","permalink":"https://ynikl.github.io/blog/golang-gin/","summary":"Golang Gin 框架的使用和理解 框架代码地址\n中间的几个关键对象 Engine RouterGroup HandlerFunc Context Engine gin 的框架实例, 包含路由地址, 中间件, 框架配置. 通过New()或者Default()创建\nNew 不带任何中间件 Default 会带 logger 和 recover 通过 Engine.Use() 添加中间件到Engine的RouterGroup\nEngine.Run 启动, 并绑定到参数的地址\nRouterGroup 1 2 3 4 5 6 type RouterGroup struct { Handlers HandlersChain basePath string engine *Engine root bool } 用于存储中间件的处理方法 \u0026ndash; 存储再 HandlersChain 里面, 即[]HandlerFunc\n真正的路由地址存储在engine.trees \u0026ndash; 路由树, 检索请求地址和对应处理方法.\nEngine 包含 RouterGroup, RouterGroup 也会存储 Engine 的地址. 目的是为了, 加点api地址时, 根据当前具体配置的中间件, 再添加engine的路由树. 也就是说, 过程中修改了中间件, 不会影响到已经配置的路由的中间件.","title":"Golang Gin"},{"content":"工程师能力阶梯\n自我能力分析\n","permalink":"https://ynikl.github.io/posts/my-engineeringladders/","summary":"工程师能力阶梯\n自我能力分析","title":"工程能力阶梯分析"},{"content":" 1 2 CREATE TABLE dbto.table_name like dbfrom.table_name; insert into dbto.table_name select * from dbfrom.table_name; 原文\n","permalink":"https://ynikl.github.io/blog/mysql-quick-backup-data/","summary":"1 2 CREATE TABLE dbto.table_name like dbfrom.table_name; insert into dbto.table_name select * from dbfrom.table_name; 原文","title":"Mysql 快速备份数据"},{"content":"背景 在改动旧代码的时候把, 一个使用全局 http.Client 的代码弄成了每一个请求会新 New 一个 http.Client 导致下游的 nginx 的连接数暴涨.\n问题 处理多个请求的时候, 是否需要为每个请求 New 一个 Client\n探索 在 StackOverflow 发现的相关答案\nHow to release http.Client in Go?\n给的答案是建议复用 Client\nThe Client\u0026rsquo;s Transport typically has internal state (cached TCP connections), so Clients should be reused instead of created as needed. Clients are safe for concurrent use by multiple goroutines.\nhttp.Client 的结构体\n1 2 3 4 5 6 7 8 9 10 type Client struct { Transport RoundTripper CheckRedirect func(req *Request, via []*Request) error Jar CookieJar Timeout time.Duration } 在 RoundTripper 中实现了连接复用的逻辑\n1 2 3 type RoundTripper interface { RoundTrip(*Request) (*Response, error) } 中定义了 RoundTrip 方法, 提供客户端请求的时候调用.\n调用地址\n查看一下 Golang Transport 的基本实现\n1 2 3 4 5 6 7 8 9 10 11 12 13 type Transport struct { idleMu sync.Mutex closeIdle bool // user has requested to close all idle conns idleConn map[connectMethodKey][]*persistConn // most recently used at end idleConnWait map[connectMethodKey]wantConnQueue // waiting getConns idleLRU connLRU connsPerHostMu sync.Mutex connsPerHost map[connectMethodKey]int connsPerHostWait map[connectMethodKey]wantConnQueue // waiting getConns // 还有其他字段略 } 结构体中间有很多连接存储相关的字段.\n在 http 请求调用 Transport 中间有一个关键方法 getConn 获取一个连接\n方法声明一个想要的连接地址, wantConn 推入到 queueForDial\nQueueForDial 方法会判断时候connsPerHost 中间是否有当前的请求的缓存连接\n如果有直接拿来重复使用 如果没有, 就需要重新进行拨号 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 w.beforeDial() if t.MaxConnsPerHost \u0026lt;= 0 { go t.dialConnFor(w) return } t.connsPerHostMu.Lock() defer t.connsPerHostMu.Unlock() if n := t.connsPerHost[w.key]; n \u0026lt; t.MaxConnsPerHost { if t.connsPerHost == nil { t.connsPerHost = make(map[connectMethodKey]int) } t.connsPerHost[w.key] = n + 1 go t.dialConnFor(w) return } if t.connsPerHostWait == nil { t.connsPerHostWait = make(map[connectMethodKey]wantConnQueue) } q := t.connsPerHostWait[w.key] q.cleanFront() q.pushBack(w) t.connsPerHostWait[w.key] = q 结论 重复使用 http.Client 可以达到 TCP 连接复用的效果\n","permalink":"https://ynikl.github.io/blog/golang-client-reuse/","summary":"背景 在改动旧代码的时候把, 一个使用全局 http.Client 的代码弄成了每一个请求会新 New 一个 http.Client 导致下游的 nginx 的连接数暴涨.\n问题 处理多个请求的时候, 是否需要为每个请求 New 一个 Client\n探索 在 StackOverflow 发现的相关答案\nHow to release http.Client in Go?\n给的答案是建议复用 Client\nThe Client\u0026rsquo;s Transport typically has internal state (cached TCP connections), so Clients should be reused instead of created as needed. Clients are safe for concurrent use by multiple goroutines.\nhttp.Client 的结构体\n1 2 3 4 5 6 7 8 9 10 type Client struct { Transport RoundTripper CheckRedirect func(req *Request, via []*Request) error Jar CookieJar Timeout time.","title":"Golang 是否需要为每个请求 New 一个 Client"},{"content":"查看负载 系统平均负载\n1 uptime 那么什么是系统平均负载呢？ 系统平均负载是指在特定时间间隔内运行队列中的平均进程数。 如果每个CPU内核的当前活动进程数不大于3的话，那么系统的性能是良好的。如果每个CPU内核的任务数大于5，那么这台机器的性能有严重问题。\n查看内存信息 1 free -h 查看 cpu 型号\n1 cat /proc/cpuinfo | grep \u0026#39;physical id\u0026#39; | sort | uniq | wc -l 核数\n1 cat /proc/cpuinfo |grep \u0026#34;cores\u0026#34;|uniq|awk \u0026#39;{print $4}\u0026#39; 参考文章 https://www.eet-china.com/mp/a87720.html https://colobu.com/2019/02/22/how-to-find-cpu-cores-in-linux/ https://wangchujiang.com/linux-command/c/uptime.html ","permalink":"https://ynikl.github.io/blog/linux-server-device-info/","summary":"查看负载 系统平均负载\n1 uptime 那么什么是系统平均负载呢？ 系统平均负载是指在特定时间间隔内运行队列中的平均进程数。 如果每个CPU内核的当前活动进程数不大于3的话，那么系统的性能是良好的。如果每个CPU内核的任务数大于5，那么这台机器的性能有严重问题。\n查看内存信息 1 free -h 查看 cpu 型号\n1 cat /proc/cpuinfo | grep \u0026#39;physical id\u0026#39; | sort | uniq | wc -l 核数\n1 cat /proc/cpuinfo |grep \u0026#34;cores\u0026#34;|uniq|awk \u0026#39;{print $4}\u0026#39; 参考文章 https://www.eet-china.com/mp/a87720.html https://colobu.com/2019/02/22/how-to-find-cpu-cores-in-linux/ https://wangchujiang.com/linux-command/c/uptime.html ","title":"查看 Linux 的负载情况"},{"content":"查看一个文件指定范围内的所有修改记录\n1 git log -p -2 -L1081,+5:\u0026#39;hello/world.go\u0026#39; -p -2 或者 --patch -2\n往前展示两个 commit 的 diff . 在 git 中 commit 和 patch 是同一个意思参考下文.\ngit commands patching\nA few commands in Git are centered around the concept of thinking of commits in terms of the changes they introduce, as though the commit series is a series of patches.\n-L 语法 -L\u0026lt;start\u0026gt;,\u0026lt;end\u0026gt;:\u0026lt;file\u0026gt;, -L:\u0026lt;funcname\u0026gt;:\u0026lt;file\u0026gt;\n限制指定查看范围.\n","permalink":"https://ynikl.github.io/blog/git-view-change-log-in-specifie-line/","summary":"查看一个文件指定范围内的所有修改记录\n1 git log -p -2 -L1081,+5:\u0026#39;hello/world.go\u0026#39; -p -2 或者 --patch -2\n往前展示两个 commit 的 diff . 在 git 中 commit 和 patch 是同一个意思参考下文.\ngit commands patching\nA few commands in Git are centered around the concept of thinking of commits in terms of the changes they introduce, as though the commit series is a series of patches.\n-L 语法 -L\u0026lt;start\u0026gt;,\u0026lt;end\u0026gt;:\u0026lt;file\u0026gt;, -L:\u0026lt;funcname\u0026gt;:\u0026lt;file\u0026gt;\n限制指定查看范围.","title":"Git 查看文件指定范围的修改记录"},{"content":"5 代码整洁结构 内部不应该依赖外部, 业务逻辑的实现, 不应该依赖于框架\n20 1917\nDown to Gehenna or up to the Throne, He travels the fastest who travles alone\n小狗钱钱\n真正的勇敢是在感到最恐惧的时候, 你依然在往前走.\n曹大博客\n政府/企业对事故的管理一般有一套“事前-事中-事后”的分析框架，可以作为我们处理事故的很好的参考。在开始分析之前，要先简单了解一下这个框架： 所谓事前，就是做事情之前应该有统筹的规划，考虑可能出现的问题和困难，最好提前做实验验证下，以保证在真实现场不出问题，或者即使出现问题也有应对方案，不至于手忙脚乱、大动干戈。 所谓事中，就是做事情的过程中对事前规划的事情进行执行，以及记录过程中出现的问题；整个事中起着承前启后的作用，上对事前的规划进行验证，下对事后的总结反思进行铺垫。 所谓事后，就是做事情结束后对整个事情进行总结反思、问题分类和根因分析等。追踪并确认所有的问题有效进行了解决和应对，以确保下次不会再犯之前同样的错误。\n22 工程师能力阶梯\nEleanor Roosevelt\nGreat minds discuss ideas（伟人谈论想法）\nAverage minds discuss events （ 普通人谈论事件）\nSmall minds discuss people（ 庸人谈论他人）\n","permalink":"https://ynikl.github.io/notes/202212/","summary":"5 代码整洁结构 内部不应该依赖外部, 业务逻辑的实现, 不应该依赖于框架\n20 1917\nDown to Gehenna or up to the Throne, He travels the fastest who travles alone\n小狗钱钱\n真正的勇敢是在感到最恐惧的时候, 你依然在往前走.\n曹大博客\n政府/企业对事故的管理一般有一套“事前-事中-事后”的分析框架，可以作为我们处理事故的很好的参考。在开始分析之前，要先简单了解一下这个框架： 所谓事前，就是做事情之前应该有统筹的规划，考虑可能出现的问题和困难，最好提前做实验验证下，以保证在真实现场不出问题，或者即使出现问题也有应对方案，不至于手忙脚乱、大动干戈。 所谓事中，就是做事情的过程中对事前规划的事情进行执行，以及记录过程中出现的问题；整个事中起着承前启后的作用，上对事前的规划进行验证，下对事后的总结反思进行铺垫。 所谓事后，就是做事情结束后对整个事情进行总结反思、问题分类和根因分析等。追踪并确认所有的问题有效进行了解决和应对，以确保下次不会再犯之前同样的错误。\n22 工程师能力阶梯\nEleanor Roosevelt\nGreat minds discuss ideas（伟人谈论想法）\nAverage minds discuss events （ 普通人谈论事件）\nSmall minds discuss people（ 庸人谈论他人）","title":"202212"},{"content":"代码整洁架构\n核心思想 最重要的是依赖顺序需要内收 \u0026ndash; 业务逻辑不能依赖框架\n分层 简单分层四层\nEntities Use Cases Interface Adapters Framework and Drivers Entity 实体抽象层 我的理解应该是在公司业务, 或者项目领域上对于业务模型的抽象. 不容易改变 (除非公司 业务, 或者项目方向改变). 应该是与 领域驱动设计 不谋而合\nUse Cases 使用场景层 业务使用场景, 应该是存放相关不同业务场景的具体实现流程\nInterface Adapters 接口转化器层 负责 Use Cases 数据 与外部使用数据转换器实现.\n比较特别的例子, 将 Use Cases 产生的数据与外部的 UI 表现层所需要的数据格式做转化.\nFramework and Divers 数据库和框架层, 外部工具包接口依赖之类的.\n依赖倒置 当遇到跨层依赖的时候, 内层需要引用到外层逻辑时: 比如, Use Case 要呈现 UI 数据结构 (Interface Adapters 层) 时, 不能直接引用 UI 层的数据模型.\n而是, 通过依赖倒置. 将 UI 层的处理逻辑, 注入 Use Case 层进行处理, 实现目标.\ngolang 整洁模板 引用自 golang clean template\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 ├─cmd 应用入口 │ └─app ├─config ├─docs // 存放文档 ├─internal │ ├─app │ ├─controller // 控制器 │ │ ├─amqp_rpc │ │ └─http │ │ └─v1 │ ├─entity // 实体层 │ ├─middleware // 中间件 │ └─usecase │ ├─repo // 数据库操作 │ └─webapi // RESTful API ├─migrations ├─pkg //以被外部程序安全导入的包 │ ├─crypto │ ├─httpresponse │ ├─httpserver │ ├─logger │ ├─mysql │ ├─postgres │ ├─rabbitmq │ └─redis 参考文章 结构架构介绍 the clean architecture goang clean template ","permalink":"https://ynikl.github.io/blog/clean-architectrue/","summary":"代码整洁架构\n核心思想 最重要的是依赖顺序需要内收 \u0026ndash; 业务逻辑不能依赖框架\n分层 简单分层四层\nEntities Use Cases Interface Adapters Framework and Drivers Entity 实体抽象层 我的理解应该是在公司业务, 或者项目领域上对于业务模型的抽象. 不容易改变 (除非公司 业务, 或者项目方向改变). 应该是与 领域驱动设计 不谋而合\nUse Cases 使用场景层 业务使用场景, 应该是存放相关不同业务场景的具体实现流程\nInterface Adapters 接口转化器层 负责 Use Cases 数据 与外部使用数据转换器实现.\n比较特别的例子, 将 Use Cases 产生的数据与外部的 UI 表现层所需要的数据格式做转化.\nFramework and Divers 数据库和框架层, 外部工具包接口依赖之类的.\n依赖倒置 当遇到跨层依赖的时候, 内层需要引用到外层逻辑时: 比如, Use Case 要呈现 UI 数据结构 (Interface Adapters 层) 时, 不能直接引用 UI 层的数据模型.\n而是, 通过依赖倒置. 将 UI 层的处理逻辑, 注入 Use Case 层进行处理, 实现目标.","title":"代码整洁架构"},{"content":"我为什么要读这本书? 检讨自己, 学习理财的相关知识\n曾经读完了 穷爸爸富爸爸 在那一段时间内有开始理财的想法, 后续又随的物欲的上涨, 开始过度超前消费, 让自己陷入了债务危机\n这本书怎样影响了我? 开始编写梦想日记和成功日记 理解了\u0026quot;鹅\u0026quot;的故事, 开始做储蓄, 划分支出 作为一个陷入\u0026quot;债务危机\u0026quot;的人的自救 72 小时定律: 决定做一件事情要在72个小时内完成 72 公式: 投资 / 年利率 = 本金翻一倍需要的年数; 通货膨胀价值减半需要的年数 书中的三句精华句子? “：“吉娅，你真的认真找过工作了吗？我是说，你有没有用一整个下午的时间来考虑如何挣到钱的问题呢？” \u0026ndash; 很多时候你觉得你思考过了, 但是你真的花费了足够的时间思考了吗? “他用一种恳切的目光望着我，说：“我生命中出现了最美好的东西，是因为我做了原本不敢做的事。” \u0026ndash; 确实如此, 要去尝试自己所不敢做的事情 总结本书 通俗易懂, 醍醐灌顶 陷入债务危机的人的自救方法\n销毁信用支付: 信用支付会比现金消费花的钱更多 尽可能少偿还贷款: 避免再次借贷, 弥补空缺 偿还消费贷款时: 也要保持着存款, 剩余可支配一半用于储蓄,一半用于消费. 书摘 “可是，这正是许多没有钱的人爱犯的错误。他们总是有那么多紧急的事情要做，以至于没有时间来关注重要的事情。”\n“钱钱对我点了点头，说：“困难总是在不断地出现。尽管如此，你每天还是要不间断地去做对你的未来意义重大的事情。你为此花费的时间不会超过10分钟，但是就是这10分钟会让一切变得不同。大多数人总是在现有的水平上停滞不前，就是因为他们没有拿出这10分钟”\n理解重要不紧急的事情\n“很简单。当你决定做一件事情的时候，你必须在72小时之内完成，否则你很可能永远不会再做了。” ”\n陷入债务危机的人的自救方法\n销毁信用支付: 信用支付会比现金消费花的钱更多 尽可能少偿还贷款: 避免再次借贷, 弥补空缺 偿还消费贷款时: 也要保持着存款, 剩余可支配一半用于储蓄,一半用于消费. “鹅代表你的钱。如果你存钱，你就会得到利息。利息就相当于金蛋。”\n“我叹道：“要在‘鹅’和愿望之间作取舍真难！” “你根本不用放弃任何一个。两件事可以同时进行。”金先生微笑着说，“比如你挣了10马克，那么你可以分配一下这笔钱，把其中的大部分存入银行，然后把一部分放入你的梦想储蓄罐，剩下的当作零花钱。”\n“所有人都希望自己变得富有一些，只是有些人的这一愿望更为强烈，而有些人却假装自己满足于现在的生活。事实上，大多数人都希望自己更幸福、更成功，也想拥有更多的钱”\n“可是假如我们缺钱的话，钱就会变得格外重要。你回想一下那次我们差点淹死在河里的情形，当时我们想的只是必须从河里爬上来，其他的一切都变得无关紧要了”\n“中国的智者老子说过：‘天下难事，必作于易；天下大事，必作于细”\n“第一，我建议你拿一本相册作为你的梦想相册。收集一些与自己的愿望有关的照片，把它们贴在相册里。我们要通过图片来思考。”\n“没有想象力的人是很难成就大事的。我们对一件事投入的精力越多，成功的可能性也越大。可是大多数人把精力放在自己并不喜欢的事情上，而不去想象自己希望得到的东西”\n“但如果你的零花钱是现在的10倍的话，你的问题只会变得更加严重。因为我们的支出永远是随着我们的收入而增长的。”\n“第一，为别人解决一个难题，那么你就能赚到许多钱；第二，把精力集中在你知道的、能做的和拥有的东西上。”\n“：“吉娅，你真的认真找过工作了吗？我是说，你有没有用一整个下午的时间来考虑如何挣到钱的问题呢？”\n“情况顺利的时候，人人都能挣到钱。只有在逆境中，一切才能见分晓。”\n“可是有的时候，疯狂的念头确实比普通的小目标更容易实现。当你定下大目标的时候，就意味着你必须付出比别人多得多的努力。”\n“假如我总是花光我的钱，那我就永远也得不到我的‘鹅’，所以我就总得为了赚钱而工作。而一旦我有了一只‘鹅’，我的钱就会自动为我工作了。”\n“没有人能强迫你做你不愿意做的事情。只有你自己才能强迫自己去做。”\n“他用一种恳切的目光望着我，说：“我生命中出现了最美好的东西，是因为我做了原本不敢做的事。”\n“你就永远不会知道，给自己一些压力之后，你能够做到些什么。一个人觉得最引以为自豪的事情，往往是那些做起来最艰难的事情。这一点你千万不要忘记”\n挑选基金\n1．基金应该至少有10年历史。假如它在这么长时间内一直有丰厚的利润，那我们可以认为，未来它也会运作良好。 2．应该选择大型的跨国股票基金。这种基金在世界各地购买股票，以此分散风险，所以十分安全。 3．对基金的走势图进行比较。我们应该观察在过去10年间哪些基金的年终利润最好。\n“它的名字叫72公式。”老太太讲解说，“你们直接用72除以你们投资的年利润百分比，得出的数字就是这笔钱翻一倍所要的年数”\n“银行存折肯定不是保存钱的最合适的地方，金先生总是把银行存折叫作“吞钱机器”。”\n","permalink":"https://ynikl.github.io/books/ein-hund-namens-money/","summary":"我为什么要读这本书? 检讨自己, 学习理财的相关知识\n曾经读完了 穷爸爸富爸爸 在那一段时间内有开始理财的想法, 后续又随的物欲的上涨, 开始过度超前消费, 让自己陷入了债务危机\n这本书怎样影响了我? 开始编写梦想日记和成功日记 理解了\u0026quot;鹅\u0026quot;的故事, 开始做储蓄, 划分支出 作为一个陷入\u0026quot;债务危机\u0026quot;的人的自救 72 小时定律: 决定做一件事情要在72个小时内完成 72 公式: 投资 / 年利率 = 本金翻一倍需要的年数; 通货膨胀价值减半需要的年数 书中的三句精华句子? “：“吉娅，你真的认真找过工作了吗？我是说，你有没有用一整个下午的时间来考虑如何挣到钱的问题呢？” \u0026ndash; 很多时候你觉得你思考过了, 但是你真的花费了足够的时间思考了吗? “他用一种恳切的目光望着我，说：“我生命中出现了最美好的东西，是因为我做了原本不敢做的事。” \u0026ndash; 确实如此, 要去尝试自己所不敢做的事情 总结本书 通俗易懂, 醍醐灌顶 陷入债务危机的人的自救方法\n销毁信用支付: 信用支付会比现金消费花的钱更多 尽可能少偿还贷款: 避免再次借贷, 弥补空缺 偿还消费贷款时: 也要保持着存款, 剩余可支配一半用于储蓄,一半用于消费. 书摘 “可是，这正是许多没有钱的人爱犯的错误。他们总是有那么多紧急的事情要做，以至于没有时间来关注重要的事情。”\n“钱钱对我点了点头，说：“困难总是在不断地出现。尽管如此，你每天还是要不间断地去做对你的未来意义重大的事情。你为此花费的时间不会超过10分钟，但是就是这10分钟会让一切变得不同。大多数人总是在现有的水平上停滞不前，就是因为他们没有拿出这10分钟”\n理解重要不紧急的事情\n“很简单。当你决定做一件事情的时候，你必须在72小时之内完成，否则你很可能永远不会再做了。” ”\n陷入债务危机的人的自救方法\n销毁信用支付: 信用支付会比现金消费花的钱更多 尽可能少偿还贷款: 避免再次借贷, 弥补空缺 偿还消费贷款时: 也要保持着存款, 剩余可支配一半用于储蓄,一半用于消费. “鹅代表你的钱。如果你存钱，你就会得到利息。利息就相当于金蛋。”\n“我叹道：“要在‘鹅’和愿望之间作取舍真难！” “你根本不用放弃任何一个。两件事可以同时进行。”金先生微笑着说，“比如你挣了10马克，那么你可以分配一下这笔钱，把其中的大部分存入银行，然后把一部分放入你的梦想储蓄罐，剩下的当作零花钱。”\n“所有人都希望自己变得富有一些，只是有些人的这一愿望更为强烈，而有些人却假装自己满足于现在的生活。事实上，大多数人都希望自己更幸福、更成功，也想拥有更多的钱”\n“可是假如我们缺钱的话，钱就会变得格外重要。你回想一下那次我们差点淹死在河里的情形，当时我们想的只是必须从河里爬上来，其他的一切都变得无关紧要了”\n“中国的智者老子说过：‘天下难事，必作于易；天下大事，必作于细”\n“第一，我建议你拿一本相册作为你的梦想相册。收集一些与自己的愿望有关的照片，把它们贴在相册里。我们要通过图片来思考。”\n“没有想象力的人是很难成就大事的。我们对一件事投入的精力越多，成功的可能性也越大。可是大多数人把精力放在自己并不喜欢的事情上，而不去想象自己希望得到的东西”","title":"小狗钱钱"},{"content":"使用场景 写个demo, 想查看一下程序内部的内存占用情况.\n使用方法 主角 runtime 包\n对象 MemStats 方法 ReadMemStats demo 展示\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 // PrintMemUsage outputs the current, total and OS memory being used. As well as the number // of garage collection cycles completed. func PrintMemUsage() { bToMb := func(b uint64) uint64 { return b / 1024 / 1024 } var m runtime.MemStats runtime.ReadMemStats(\u0026amp;m) // For info on each, see: https://golang.org/pkg/runtime/#MemStats fmt.Printf(\u0026#34;Alloc = %v MiB\u0026#34;, bToMb(m.Alloc)) fmt.Printf(\u0026#34;\\tTotalAlloc = %v MiB\u0026#34;, bToMb(m.TotalAlloc)) fmt.Printf(\u0026#34;\\tSys = %v MiB\u0026#34;, bToMb(m.Sys)) fmt.Printf(\u0026#34;\\tNumGC = %v\\n\u0026#34;, m.NumGC) } 代码出处\n解释 ReadMemStats runtime.ReadMemStats 方法会读取到内存分配器的当前时刻最新的内存分配数据, 并将 其填充到传入参数的MemStats 的变量中.\n可以充当一个内存快照, 用于进行对比.\nMemStats 字段 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 type MemStats struct { // 当前堆上对象的内存分配大小, 同HeapAlloc字段, 单位 bytes Alloc uint64 // 历史总的累计分配内存大小 TotalAlloc uint64 // 从操作系统分配的内存大小 Sys uint64 // 记录指针索引性能, go 语言内部使用 Lookups uint64 // 堆上分配的对象数量 Mallocs uint64 // 堆上剩余的内存大小 Frees uint64 HeapAlloc uint64 // 从操作系统分配的 堆 内存大小 HeapSys uint64 // 未使用的空闲内存分片大小 spans HeapIdle uint64 // 使用中的内存分片大小 HeapInuse uint64 // 回退的内存大小 HeapReleased uint64 // 堆上分配的对象数量 HeapObjects uint64 // 栈上使用的内存片大小 StackInuse uint64 // 从操作系统分配的栈的内存大小 StackSys uint64 // MSpanInuse is bytes of allocated mspan structures. MSpanInuse uint64 // MSpanSys is bytes of memory obtained from the OS for mspan // structures. MSpanSys uint64 // MCacheInuse is bytes of allocated mcache structures. MCacheInuse uint64 // MCacheSys is bytes of memory obtained from the OS for // mcache structures. MCacheSys uint64 // BuckHashSys is bytes of memory in profiling bucket hash tables. BuckHashSys uint64 // GCSys is bytes of memory in garbage collection metadata. GCSys uint64 // OtherSys is bytes of memory in miscellaneous off-heap // runtime allocations. OtherSys uint64 // 在多大的堆内存时, 触发GC NextGC uint64 // 上次GC 时间 LastGC uint64 // PauseTotalNs is the cumulative nanoseconds in GC // stop-the-world pauses since the program started. // // During a stop-the-world pause, all goroutines are paused // and only the garbage collector can run. PauseTotalNs uint64 // PauseNs is a circular buffer of recent GC stop-the-world // pause times in nanoseconds. // // The most recent pause is at PauseNs[(NumGC+255)%256]. In // general, PauseNs[N%256] records the time paused in the most // recent N%256th GC cycle. There may be multiple pauses per // GC cycle; this is the sum of all pauses during a cycle. PauseNs [256]uint64 // PauseEnd is a circular buffer of recent GC pause end times, // as nanoseconds since 1970 (the UNIX epoch). // // This buffer is filled the same way as PauseNs. There may be // multiple pauses per GC cycle; this records the end of the // last pause in a cycle. PauseEnd [256]uint64 // GC 次数 NumGC uint32 // 手动调用 GC 的次数 NumForcedGC uint32 // GC 使用的 CPU 时间 GCCPUFraction float64 // 可以GC,一直是true EnableGC bool // BySize reports per-size class allocation statistics. // // BySize[N] gives statistics for allocations of size S where // BySize[N-1].Size \u0026lt; S ≤ BySize[N].Size. // // This does not report allocations larger than BySize[60].Size. BySize [61]struct { // Size is the maximum byte size of an object in this // size class. Size uint32 // Mallocs is the cumulative count of heap objects // allocated in this size class. The cumulative bytes // of allocation is Size*Mallocs. The number of live // objects in this size class is Mallocs - Frees. Mallocs uint64 // Frees is the cumulative count of heap objects freed // in this size class. Frees uint64 } } 源码出处\n我用于分析 map 的 delete 操作占用内存 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;runtime\u0026#34; ) func main() { m := make(map[string][]int) m[\u0026#34;a\u0026#34;] = make([]int, 1*1024*1024*1024) PrintMemUsage() delete(m, \u0026#34;a\u0026#34;) runtime.GC() PrintMemUsage() fmt.Println(\u0026#34;make storage value\u0026#34;) mint := make(map[int]int, 1\u0026lt;\u0026lt;30) for i := 0; i \u0026lt; 1*1024*2; i++ { mint[i] = 1024 } PrintMemUsage() runtime.GC() PrintMemUsage() // 注意: 需要引用, 避免被提前回收 fmt.Println(len(m), len(mint)) // go run main.go // Outpu: // // Alloc = 8192 MiB\tTotalAlloc = 8192 MiB\tSys = 8464 MiB\tNumGC = 0 // Alloc = 0 MiB\tTotalAlloc = 8192 MiB\tSys = 8465 MiB\tNumGC = 2 // make storage value // Alloc = 39168 MiB\tTotalAlloc = 47360 MiB\tSys = 48898 MiB\tNumGC = 3 // Alloc = 39168 MiB\tTotalAlloc = 47360 MiB\tSys = 48898 MiB\tNumGC = 4 // 0 2048 } func PrintMemUsage() { bToMb := func(b uint64) uint64 { return b / 1024 / 1024 } var m runtime.MemStats runtime.ReadMemStats(\u0026amp;m) // For info on each, see: https://golang.org/pkg/runtime/#MemStats fmt.Printf(\u0026#34;Alloc = %v MiB\u0026#34;, bToMb(m.Alloc)) fmt.Printf(\u0026#34;\\tTotalAlloc = %v MiB\u0026#34;, bToMb(m.TotalAlloc)) fmt.Printf(\u0026#34;\\tSys = %v MiB\u0026#34;, bToMb(m.Sys)) fmt.Printf(\u0026#34;\\tNumGC = %v\\n\u0026#34;, m.NumGC) } 分析结果得出, 如果在 map 中存储的 value, 如果是引用值的话, 占用的内存是被 GC 回收 的. 但是, 如果是值类型如简单的int是不会被回收的.\n","permalink":"https://ynikl.github.io/blog/golang-memory-analyze-with-runtime/","summary":"使用场景 写个demo, 想查看一下程序内部的内存占用情况.\n使用方法 主角 runtime 包\n对象 MemStats 方法 ReadMemStats demo 展示\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 // PrintMemUsage outputs the current, total and OS memory being used. As well as the number // of garage collection cycles completed. func PrintMemUsage() { bToMb := func(b uint64) uint64 { return b / 1024 / 1024 } var m runtime.MemStats runtime.ReadMemStats(\u0026amp;m) // For info on each, see: https://golang.","title":"go 使用 runtime 包进行内存占用分析"},{"content":"概括 我为什么要读这本书? 养成一个批判性的看待问题方式.\n这本书怎样影响了我? 了解了一些常见的经典辩证错误, 比如: 人身攻击, 虚假两难, 完美解决方案 看待一个问题之前, 要想想这个问题, 关我什么事. 对于一些问题的论述会更加注意和小心 书中的三句精华句子? 一寸光阴一寸金，在决定花大把光阴去客观评估一个问题之前，最好先问一下自己：“这个问题关我什么事？” 结论是一个个观点，需要其他观点来进行支撑。因此，如果有人断言某件事是正确的，或者某件事应该去做，却没有提供相应陈述来支撑他的这一断言，这一断言就不能称为结论，因为提出此断言的人并没有提供这个看法得以建立的任何基础。相应地，我们把没有证据支撑的断言称为纯观点（mere opinion）。 常见的谬论\n人身攻击谬误（ad hominem fallacy）: 人身攻击谬误指针对个人的人身攻击或侮辱，而不是直接反驳其提供的理由。 滑坡谬误: 指假设采取提议的行动会引发一系列不可控的不利事件，而事实上却有现成的程序来防止这类连锁事件发生。 追求完美解决方案谬误: 指假设因为尝试某种解决方案后还有遗留问题未解决，那么这种解决方案根本就不应该采用。 偷换概念谬误:一旦你看到一个关键词或短语在论证中不止一次出现，检查一下看看其意思有没有发生改变，如果意思发生改变，就要警惕偷换概念谬误。 权威谬误: 除非我们知道这些权威对这一论题拥有特别的专门知识，否则我们就要将这个理由视为谬误。这种类型的谬误叫做诉诸可疑权威谬误（appeal to questionable authority fallacy）。 虚假的两难选择: 世界上只有两种人——一种人表演，另一种人观看。” 要让这样的陈述成立，我们必须假设只有这两种选择，是不是这样呢？当然不是！作者创造了一种虚假的两难选择（false dilemma）。 乱扣帽子谬误: 当有人宣称他们发现了导致某个行为的原因，而实际上他们所做的不过是为这种行为起了个名字而已，我们要对这种乱扣帽子谬误[7]（explaining by naming fallacy）保持警惕。 循环论证谬误[1]（begging the question fauacy）。 错误类比谬误指有人提出一个类比，其中却存在重要而又相关的不同点。 过度简化因果关系谬误: 如果持论者不能考虑到各种原因的复杂性，他们就犯了过度简化因果关系谬误[1]（causal oversimplication fallacy）。 事后归因谬误[1]（全称为\u0026quot;post hoc, ergo propter hoc fallacy\u0026quot;，拉丁文的意思是“在这之后，所以是因为这个的谬误”。） 三句话总结本书 书摘 一寸光阴一寸金，在决定花大把光阴去客观评估一个问题之前，最好先问一下自己：“这个问题关我什么事？”\n小贴士：价值观指的是人们认为较有价值而没有明说出来的观点。它们树立了一定的行为准则，据此我们来衡量人类行为的品质高下。\n一厢情愿的思维之所以常常挥之不去，是因为我们否认一切的思维方式常常出现。\n描述性论题是指对过去、现在或将来的各种描述的精确与否提出的问题。\n我们将这些问题称为规定性论题（prescriptive issues）。社会论争通常都属于规定性论题。\n问一问“作者是在对什么事件进行回应”常常能帮你找出一篇文章的中心论题。\n但是，当论题并没有直截了当地说出来时，最有效的方法就是先找准结论。很多情况下，在你能确认论题之前都得先找出结论来。\n结论是一个个观点，需要其他观点来进行支撑。因此，如果有人断言某件事是正确的，或者某件事应该去做，却没有提供相应陈述来支撑他的这一断言，这一断言就不能称为结论，因为提出此断言的人并没有提供这个看法得以建立的任何基础。相应地，我们把没有证据支撑的断言称为纯观点（mere opinion）。\n结论是作者或演说者希望你选择的目的地和终点站。接下来你所关心的是：基于支撑这一论断的所有材料，我该不该接受这个结论？\n有没有一个清楚明确的论题，通常是区别作家成熟不成熟的一个重要标志。\n如果你写作或者演说的目的是为了传达某个特定的结论，你的读者或听众就会尽力去寻找这一结论。老老实实地把结论说出来，而且说得清楚明白，其实也就是在帮助你的读者或听众。\n请记住：只有当你找到支撑结论的理由时你才能判定一个结论的价值。\n·论证必有其目的。\n最后一点需要进一步加以强调和说明。心急火燎地去推进批判性思维并没有什么意义。\n在规定性论证中，理由常常不是一般性的规定性陈述就是描述性的看法或原则。\n相反，一个关心批判性思维的作者会考虑到可能存在的种种理由并掂量它们的分量，然后才会做出结论。\n如果你的论题是利用当前时事来探究政治或社会问题，比如公立教育改革或反恐战争，那就应当从主要的新闻出版物着手。\n我们在读书或听讲的时候，一定要强迫自己去寻找那些意思不明确的词或短语，否则你就会抓不住要领。\n事实上，很多文献，如美国宪法，都是有意要显得模棱两可，这样这份文献才能与时俱进，其中的关键词如“自由”、“携带武器”的不同含义才能适应不断发展的现实需求。诚然，\n因为有人要你接受他的结论，所以你只需要去寻找那些影响你接受其结论的词或短语。这样说来，你应该在理由和结论中寻找这些词或短语。\n一个词或短语越抽象，人们越有可能对其做出多重解读。\n第一个障碍是你自认为和作者表达的是同一个意思。\n意义通常表现为下列三种方式：同义替换、举例说明以及我们通称的“具体标准定义”（\n还有一种方法可以帮你发现这个词可能存在的其他含义，那就是尽量在脑海中想象这个词所代表的具体景象，如果你想象不出来，那你很可能就找到了一处重要的歧义。\n那些激发强烈情感反应的术语被称为附加感情色彩的术语（loaded terms）。它们感动我们的能力大大超越了它们本身的描述性含义。\n作为一个积极主动的学生，你有责任提出各种问题来消除歧义。但你的责任到此为止。作者和演说者才是努力要说服你接受某些观点的人。身为说客，他有责任回答你对可能存在的歧义的各种关心。 你没有义务来评价那些不明确的想法或选择。\n我们把这些没有明说出来的想法称为假设（assumptions）。\n人的价值观会影响他列举出的种种理由，因而也影响到他的结论。实际上，只有把这些价值观假设添加到推理中，他们的理由才能从逻辑上证实其结论。\n当作者对于社会论争采取了一种立场，他们通常都会选择一种价值观而排斥另一种价值观，他们有价值优先或者价值倾向。\n找到价值观假设一个比较好的起点就是检查一下作者的背景。\n因此，要判断一个人的价值观假设，一个重要手段就是要注意他用来证实结论的各种理由，然后判断哪些价值取向会导致作者认为这些理由比其他理由更可取，\n遇到有争议的主题，以这种方式说明价值观假设可以不断提醒自己作者放弃了什么，又得到了什么。\n遇到有争议的主题，以这种方式说明价值观假设可以不断提醒自己作者放弃了什么，又得到了什么。尽量抵制住诱惑，不要一找到作者或演说者的价值观就过早地停止分析的过程。\n任何一个想要进行论证的人都有必要提供一些解释，说明为什么你应该接受那个论证中暗含的特定的价值观假设。\n价值取向需要有一定的正当理由，这样批判性思考的人才能加以考虑。一个价值取向需要有证实它的理由，正如任何一个结论都需要理由一样。\n描述性假设（descriptive assumption）就是对这个世界过去、现在或未来是什么样的想法，而你应该记得，规定性的或者说价值观假设是关于这个世界应该是什么样的那些想法。\n不断思考结论和理由之间存在的鸿沟。你为什么一开始就要寻找这些假设呢？因为你想让自己能判断理由在多大程度上证实结论。\n批判性阅读和聆听的主要目标就在于判定结论的可接受程度或者价值大小。\n所谓谬误，就是推理中的欺骗手段，作者有可能利用这个欺骗手段来说服你采纳其结论。\n人身攻击谬误（ad hominem fallacy）: 人身攻击谬误指针对个人的人身攻击或侮辱，而不是直接反驳其提供的理由。 滑坡谬误: 指假设采取提议的行动会引发一系列不可控的不利事件，而事实上却有现成的程序来防止这类连锁事件发生。 追求完美解决方案谬误: 指假设因为尝试某种解决方案后还有遗留问题未解决，那么这种解决方案根本就不应该采用。 偷换概念谬误:一旦你看到一个关键词或短语在论证中不止一次出现，检查一下看看其意思有没有发生改变，如果意思发生改变，就要警惕偷换概念谬误。 权威谬误: 除非我们知道这些权威对这一论题拥有特别的专门知识，否则我们就要将这个理由视为谬误。这种类型的谬误叫做诉诸可疑权威谬误（appeal to questionable authority fallacy）。 虚假的两难选择: 世界上只有两种人——一种人表演，另一种人观看。” 要让这样的陈述成立，我们必须假设只有这两种选择，是不是这样呢？当然不是！作者创造了一种虚假的两难选择（false dilemma）。 乱扣帽子谬误: 当有人宣称他们发现了导致某个行为的原因，而实际上他们所做的不过是为这种行为起了个名字而已，我们要对这种乱扣帽子谬误[7]（explaining by naming fallacy）保持警惕。 循环论证谬误[1]（begging the question fauacy）。 错误类比谬误指有人提出一个类比，其中却存在重要而又相关的不同点。 过度简化因果关系谬误: 如果持论者不能考虑到各种原因的复杂性，他们就犯了过度简化因果关系谬误[1]（causal oversimplication fallacy）。 事后归因谬误[1]（全称为\u0026quot;post hoc, ergo propter hoc fallacy\u0026quot;，拉丁文的意思是“在这之后，所以是因为这个的谬误”。） 当我们被要求解释为什么特定的行为会发生时，我们常常受到诱惑，想要隐藏我们对很多复杂因果关系的无知，干脆给那种行为贴上个标签或者套上个名字，然后我们错误地假设因为我们知道那个标签或名字，我们就知道事情的起因。\n如果需要证据，但又没有看到证据，那么这个断言就是孤立论断（mere assertion），意思是它是一个没有用任何方式来加以证实的断言。\n与其问一问它们是不是真的，我们宁愿问问它们是不是可靠。其实，我们想问的是：“我们可以依靠这样的看法吗？”\n因为单一的个人经历，甚至是个人经历的总和，根本不足以构成一个有代表性的经历样本，个人经历常常会导致我们犯下以偏概全谬误[1]（hasty generalization fallacy）。\n典型案例常常很有说服力，因为它们是那样具体生动而又细致感人，很容易就在我们的脑海里浮现出来。\n引用具体当事人的这些说法都被称为当事人证词（personal testimonials）。\n我们常常说眼见为实，这里则倒过来，相信什么就看得见什么！\n引用另一家通讯社（如美联社）。这些引证给人一种支撑证据的幻象但是却绕过了一个最基本的问题：那个原始专家的断言到底有多大可信度？\n观察者，不像特定的镜子，并不能给我们提供“纯粹”的观察。我们所“见”所说的都是经过一系列的价值观、偏见、态度和期望值过滤后剩下来的东西。\n最后，调查本身所包含的很多偏见让它们变得更加可疑。其中两个最重要的偏见是措辞偏见（biased wording）和语境偏见（biased context）。\n当我们因为朋友的极力推荐而选择买下一张CD，我们也是在以相同的方式进行推理。我们这样推理是因为我们彼此之间非常相像，喜欢或不喜欢的东西有很多都是相同的，\n当类比用于设定谈话的语气时，识别它们就变得尤其重要。\n过度情绪化的类比遮蔽了论证中的真正论题，而且阻碍了实质性的对话。尽量识别包含了重要的情感内涵意义的那些比较，这样做才能避免受这些类比的欺骗。\n在寻找替代原因时，我们必须要记住，我们找出的任何一个单独的原因都极有可能是引起事件发生的其中一个原因，而不是其唯一的原因。\n将因果关系和相关关系二者混淆起来，既可以理解，同时又异常危险。虽然原因确实先于结果出现，但先于结果出现的还有很多种其他因素，而其中很多不是引发结果的原因。\n有一种常见的偏见就是基本归因错误（fundamental attribution error），在这种错误里，我们在解释他人的行为时普遍高估了个人倾向的重要性而低估了环境因素的作用。也就是说，我们喜欢把别人行为的动因看成是来自其内部因素的作用（他们个人的性格特点），而不是来自外部因素的作用（环境的力量）。\n你应该时时刻刻向读者证明你并没有忽略其他可选的解释。也许随着你的研究的展开，你发现貌似言之成理的解释实际上并不能被证据所证明。\n第一个策略就是尽量找到足够多的关于这些数据是如何采集的信息。\n作者谈论的是平均数、中位数还是众数，将会产生很大的区别。\n另一个重要的有可能缺失掉的信息类型是相对比较（relevant comparisons）。\n因此，真正的自主思考需要我们坚持不懈地寻找作者到底隐瞒了什么信息，不论其是无心省略还是有意隐瞒。\n我们从理由当中得出不同的结论是因为我们的背景各不相同，目标千差万别，这样我们在决定将理由和结论连起来的时候必然会被不同的假设所吸引。\n","permalink":"https://ynikl.github.io/books/asking-the-right-questions/","summary":"概括 我为什么要读这本书? 养成一个批判性的看待问题方式.\n这本书怎样影响了我? 了解了一些常见的经典辩证错误, 比如: 人身攻击, 虚假两难, 完美解决方案 看待一个问题之前, 要想想这个问题, 关我什么事. 对于一些问题的论述会更加注意和小心 书中的三句精华句子? 一寸光阴一寸金，在决定花大把光阴去客观评估一个问题之前，最好先问一下自己：“这个问题关我什么事？” 结论是一个个观点，需要其他观点来进行支撑。因此，如果有人断言某件事是正确的，或者某件事应该去做，却没有提供相应陈述来支撑他的这一断言，这一断言就不能称为结论，因为提出此断言的人并没有提供这个看法得以建立的任何基础。相应地，我们把没有证据支撑的断言称为纯观点（mere opinion）。 常见的谬论\n人身攻击谬误（ad hominem fallacy）: 人身攻击谬误指针对个人的人身攻击或侮辱，而不是直接反驳其提供的理由。 滑坡谬误: 指假设采取提议的行动会引发一系列不可控的不利事件，而事实上却有现成的程序来防止这类连锁事件发生。 追求完美解决方案谬误: 指假设因为尝试某种解决方案后还有遗留问题未解决，那么这种解决方案根本就不应该采用。 偷换概念谬误:一旦你看到一个关键词或短语在论证中不止一次出现，检查一下看看其意思有没有发生改变，如果意思发生改变，就要警惕偷换概念谬误。 权威谬误: 除非我们知道这些权威对这一论题拥有特别的专门知识，否则我们就要将这个理由视为谬误。这种类型的谬误叫做诉诸可疑权威谬误（appeal to questionable authority fallacy）。 虚假的两难选择: 世界上只有两种人——一种人表演，另一种人观看。” 要让这样的陈述成立，我们必须假设只有这两种选择，是不是这样呢？当然不是！作者创造了一种虚假的两难选择（false dilemma）。 乱扣帽子谬误: 当有人宣称他们发现了导致某个行为的原因，而实际上他们所做的不过是为这种行为起了个名字而已，我们要对这种乱扣帽子谬误[7]（explaining by naming fallacy）保持警惕。 循环论证谬误[1]（begging the question fauacy）。 错误类比谬误指有人提出一个类比，其中却存在重要而又相关的不同点。 过度简化因果关系谬误: 如果持论者不能考虑到各种原因的复杂性，他们就犯了过度简化因果关系谬误[1]（causal oversimplication fallacy）。 事后归因谬误[1]（全称为\u0026quot;post hoc, ergo propter hoc fallacy\u0026quot;，拉丁文的意思是“在这之后，所以是因为这个的谬误”。） 三句话总结本书 书摘 一寸光阴一寸金，在决定花大把光阴去客观评估一个问题之前，最好先问一下自己：“这个问题关我什么事？”\n小贴士：价值观指的是人们认为较有价值而没有明说出来的观点。它们树立了一定的行为准则，据此我们来衡量人类行为的品质高下。\n一厢情愿的思维之所以常常挥之不去，是因为我们否认一切的思维方式常常出现。\n描述性论题是指对过去、现在或将来的各种描述的精确与否提出的问题。\n我们将这些问题称为规定性论题（prescriptive issues）。社会论争通常都属于规定性论题。\n问一问“作者是在对什么事件进行回应”常常能帮你找出一篇文章的中心论题。\n但是，当论题并没有直截了当地说出来时，最有效的方法就是先找准结论。很多情况下，在你能确认论题之前都得先找出结论来。\n结论是一个个观点，需要其他观点来进行支撑。因此，如果有人断言某件事是正确的，或者某件事应该去做，却没有提供相应陈述来支撑他的这一断言，这一断言就不能称为结论，因为提出此断言的人并没有提供这个看法得以建立的任何基础。相应地，我们把没有证据支撑的断言称为纯观点（mere opinion）。\n结论是作者或演说者希望你选择的目的地和终点站。接下来你所关心的是：基于支撑这一论断的所有材料，我该不该接受这个结论？","title":"Asking the Right Questions"},{"content":"我现在需要努力的方向\n对于工作项目有帮助的技术, 提升技术的广度 深入学习计算机的基础, 比如: 计算机网络, 算法, 数据结构 保持一个健康的身体 (目前状态不错, 不需要担心) 我希望自己 技术能力\n深度 广度 普世价值\n极简主义 内心强大 文采斐然 身体健康\n40的臂维 6 块腹肌 职业规划 定一个目标, 做程序员至少要干到 35 岁. 也就是还有7年的时间 \u0026ndash; 不许想失业问题, 努力 钻研技术.\n既然, 还有7年的程序员职业生涯, 那么就还是要好好努力到底.\n提升技术水平, 提高基础薪资水平 发展个人项目 再探索\u0026hellip; 2023 目标 努力挣更多的钱 深挖程序员的深度, 成为 以Golang为基础的编程专家\n输出10篇高质量的技术文章 完成数据结构与算法的系统学习 掌握一门基础的前端页面开发技术 培养个人艺术情操 完成3次中远距离出游计划 完成50本书籍阅读 (22年完成49本) 撰写10篇非技术性文章 ","permalink":"https://ynikl.github.io/neo/life/","summary":"我现在需要努力的方向\n对于工作项目有帮助的技术, 提升技术的广度 深入学习计算机的基础, 比如: 计算机网络, 算法, 数据结构 保持一个健康的身体 (目前状态不错, 不需要担心) 我希望自己 技术能力\n深度 广度 普世价值\n极简主义 内心强大 文采斐然 身体健康\n40的臂维 6 块腹肌 职业规划 定一个目标, 做程序员至少要干到 35 岁. 也就是还有7年的时间 \u0026ndash; 不许想失业问题, 努力 钻研技术.\n既然, 还有7年的程序员职业生涯, 那么就还是要好好努力到底.\n提升技术水平, 提高基础薪资水平 发展个人项目 再探索\u0026hellip; 2023 目标 努力挣更多的钱 深挖程序员的深度, 成为 以Golang为基础的编程专家\n输出10篇高质量的技术文章 完成数据结构与算法的系统学习 掌握一门基础的前端页面开发技术 培养个人艺术情操 完成3次中远距离出游计划 完成50本书籍阅读 (22年完成49本) 撰写10篇非技术性文章 ","title":"我的人生规划"},{"content":" 吾本乘兴而行，兴尽而返，何必见戴\n\u0026ndash; 世说新语·任诞\n我本来是乘着一时高兴而来，现在兴尽就返回家，为什么非得见到戴逵呢？\n","permalink":"https://ynikl.github.io/notes/202211/","summary":"吾本乘兴而行，兴尽而返，何必见戴\n\u0026ndash; 世说新语·任诞\n我本来是乘着一时高兴而来，现在兴尽就返回家，为什么非得见到戴逵呢？","title":"202211"},{"content":"文件系统原理 BIOS：启动主动运行的韧体，会认识第一个可启动的装置 MBR：第一个可启动装置的第一个磁区内的主要启动记录区块，内含启动管理程序； 启动管理程序(boot loader)：一支可读取核心文件来运行的软件； 相关命令 查看磁盘信息 1 fdisk -l macOS\n1 diskutil list 查看磁盘用量\n1 df -h 查看文件大小\n1 du -h 新磁盘的安装流程 对磁盘进行分割，以创建可用的 partition ； 对该 partition 进行格式化( format )，以创建系统可用的 filesystem； 在 Linux 系统上，需要创建挂载点 ( 亦即是目录 )，并将他挂载上来； 操作磁盘分区, fdisk 后面跟具体的物理磁盘\n1 fdisk /dev/hdc 创建一个ext4文件系统\n1 mkfs -t ext4 /dev/vdb1 挂载磁盘分区\n1 2 mkdir /mnt/hdc6 mount /dev/hdc6 /mnt/hdc6 参考 Linux 磁盘与文件系统管理\n","permalink":"https://ynikl.github.io/blog/linux-filesystem/","summary":"文件系统原理 BIOS：启动主动运行的韧体，会认识第一个可启动的装置 MBR：第一个可启动装置的第一个磁区内的主要启动记录区块，内含启动管理程序； 启动管理程序(boot loader)：一支可读取核心文件来运行的软件； 相关命令 查看磁盘信息 1 fdisk -l macOS\n1 diskutil list 查看磁盘用量\n1 df -h 查看文件大小\n1 du -h 新磁盘的安装流程 对磁盘进行分割，以创建可用的 partition ； 对该 partition 进行格式化( format )，以创建系统可用的 filesystem； 在 Linux 系统上，需要创建挂载点 ( 亦即是目录 )，并将他挂载上来； 操作磁盘分区, fdisk 后面跟具体的物理磁盘\n1 fdisk /dev/hdc 创建一个ext4文件系统\n1 mkfs -t ext4 /dev/vdb1 挂载磁盘分区\n1 2 mkdir /mnt/hdc6 mount /dev/hdc6 /mnt/hdc6 参考 Linux 磁盘与文件系统管理","title":"Linux 文件系统简单操作流程"},{"content":"原文: Minimal Version Selection\n意识流翻译, 只是简单的把自己的理解转化成中文. 仅供参考.\n翻译: Go 构建相关的命令需要决定模块版本. 把这些模块和版本号称之为编译列表(build list). 为了稳定的开发, 今天的编译列表必须和明天的编译列表是一致的. 但是开发者也必须支持 编译列表的改变: 升级所有的模块, 升级单个模块, 降级单个模块.\n版本选择的问题定位为: 给定一个算法支持对编译列表进行下面四种操作:\n构建当前的编译列表 升级所有模块到各自对应的最新版本 升级一个模块到对应的版本 降级一个模块到对应的版本 最后两种操作是在一个具体的模块进行升级和降级. 在满足依赖需求的前提下, 尽量少的进 行升级, 降级, 添加或者移除模块.\n这篇博文展示了最小版本选择算法, 一个新的, 简单的版本选择方案. 最小版本选择是容易 理解和能简单推测出他的运行行为的. 而且还能高稳定构建的, 表名一个用户所使用的依赖 是非常接近开发者所使用的依赖. 能够高效实现, 没有使用什么复杂的递归图算法. 仅仅只 用了几行 go 的代码就是实现了.\n最小选择算法假设所有的模块都声明了它自己对于其他模块的依赖清单. 且所有的模块都遵 守语义化版本: 向前兼容的版本使用小版本号, 不向前兼容的版本使用大版本号.\n对应的四种列表操作:\n构建当前模块的编译列表: 将当前模块引用的依赖列表加在一起, 重复的仅保持一份. 升级所有模块版本: 所有最新引用的依赖, 重新构建一份列表 升级某一具体模块版本: 构建没有升级的列表, 再将升级的模块新的引用列表加入, 加入 时如果如果已经存在, 就是仅保存最新的版本 降级一个模块到对应的版本: 反解开所有依赖降级的模块, 每一个依赖都需降级到目标 模块版本之下 这些操作简单, 高效, 且容易实现\n剩余内容 略\n","permalink":"https://ynikl.github.io/blog/golang-minimal-version-selection/","summary":"原文: Minimal Version Selection\n意识流翻译, 只是简单的把自己的理解转化成中文. 仅供参考.\n翻译: Go 构建相关的命令需要决定模块版本. 把这些模块和版本号称之为编译列表(build list). 为了稳定的开发, 今天的编译列表必须和明天的编译列表是一致的. 但是开发者也必须支持 编译列表的改变: 升级所有的模块, 升级单个模块, 降级单个模块.\n版本选择的问题定位为: 给定一个算法支持对编译列表进行下面四种操作:\n构建当前的编译列表 升级所有模块到各自对应的最新版本 升级一个模块到对应的版本 降级一个模块到对应的版本 最后两种操作是在一个具体的模块进行升级和降级. 在满足依赖需求的前提下, 尽量少的进 行升级, 降级, 添加或者移除模块.\n这篇博文展示了最小版本选择算法, 一个新的, 简单的版本选择方案. 最小版本选择是容易 理解和能简单推测出他的运行行为的. 而且还能高稳定构建的, 表名一个用户所使用的依赖 是非常接近开发者所使用的依赖. 能够高效实现, 没有使用什么复杂的递归图算法. 仅仅只 用了几行 go 的代码就是实现了.\n最小选择算法假设所有的模块都声明了它自己对于其他模块的依赖清单. 且所有的模块都遵 守语义化版本: 向前兼容的版本使用小版本号, 不向前兼容的版本使用大版本号.\n对应的四种列表操作:\n构建当前模块的编译列表: 将当前模块引用的依赖列表加在一起, 重复的仅保持一份. 升级所有模块版本: 所有最新引用的依赖, 重新构建一份列表 升级某一具体模块版本: 构建没有升级的列表, 再将升级的模块新的引用列表加入, 加入 时如果如果已经存在, 就是仅保存最新的版本 降级一个模块到对应的版本: 反解开所有依赖降级的模块, 每一个依赖都需降级到目标 模块版本之下 这些操作简单, 高效, 且容易实现","title":"Golang Minimal Version Selection 意识流翻译(仅开头)"},{"content":"遇到了 grpc 不遵循语义版本, 导致不同版本包之间的冲突.\n更新了目标的版本模块之后, 编译一下就发现原先项目引用的 gozero 框架报错了. 搜索一下 相关的关键词,就可以定位到问题是 grpc 搞的鬼.\n再找到对应的兼容版本, 升级到对应的版本就可以了.\ngo 依赖版本选择 [golang 的最小版本选择]https://ynikl.github.io/blog/golang-minimal-version-selection/\n大体意思:\n会选择当前编译需要依赖包的最高版本(使用语义化版本)\n寻找依赖的原因 go mod why\n寻找自己项目引用某个包的 最短引用路径, 导致会引用目标包的\n1 go mod why google.golang.org/grpc 输出目标包的引用依赖层级\n1 2 3 4 5 6 ❯ go mod why google.golang.org/grpc # google.golang.org/grpc hello/world/test git.test.cn/company-open/rpc-pkgs google.golang.org/grpc go mod graph\n可以打印出, 模块的依赖图\n1 2 3 4 5 6 example.com/main example.com/a@v1.1.0 example.com/main example.com/b@v1.2.0 example.com/a@v1.1.0 example.com/b@v1.1.1 example.com/a@v1.1.0 example.com/c@v1.3.0 example.com/b@v1.1.0 example.com/c@v1.1.0 example.com/b@v1.2.0 example.com/c@v1.2.0 ","permalink":"https://ynikl.github.io/blog/golang-find-module-conflict/","summary":"遇到了 grpc 不遵循语义版本, 导致不同版本包之间的冲突.\n更新了目标的版本模块之后, 编译一下就发现原先项目引用的 gozero 框架报错了. 搜索一下 相关的关键词,就可以定位到问题是 grpc 搞的鬼.\n再找到对应的兼容版本, 升级到对应的版本就可以了.\ngo 依赖版本选择 [golang 的最小版本选择]https://ynikl.github.io/blog/golang-minimal-version-selection/\n大体意思:\n会选择当前编译需要依赖包的最高版本(使用语义化版本)\n寻找依赖的原因 go mod why\n寻找自己项目引用某个包的 最短引用路径, 导致会引用目标包的\n1 go mod why google.golang.org/grpc 输出目标包的引用依赖层级\n1 2 3 4 5 6 ❯ go mod why google.golang.org/grpc # google.golang.org/grpc hello/world/test git.test.cn/company-open/rpc-pkgs google.golang.org/grpc go mod graph\n可以打印出, 模块的依赖图\n1 2 3 4 5 6 example.com/main example.com/a@v1.1.0 example.com/main example.com/b@v1.2.0 example.com/a@v1.1.0 example.com/b@v1.1.1 example.com/a@v1.1.0 example.com/c@v1.3.0 example.com/b@v1.1.0 example.com/c@v1.1.0 example.","title":"Golang 解决依赖包版本冲突"},{"content":"学习路径 数据结构 流程控制 代码组织 工程化 数据结构 strings int list tuple dictionary 如何查看一个基本的类型对象拥有的方法\n1 2 3 name = \u0026#34;ada\u0026#34; dir(name) dir 获取对象的属性\n字符串 1 name = \u0026#34;ada lovelace\u0026#34; 拼接, 用+\n1 2 3 first_name = \u0026#34;ada\u0026#34; last_name = \u0026#34;lovelace\u0026#34; full_name = first_name + \u0026#34; \u0026#34; + last_name 声明字符串中 '单引号和\u0026quot; 双引号没有区别, 可以用来相互替换 多行字串使用'''连续三个单引号或双引号声明 字符串格式化\nformat\n1 2 3 \u0026gt;\u0026gt;\u0026gt; \u0026#39;Hey {name}, there is a 0x{errno:x} error!\u0026#39;.format( ... name=name, errno=errno) \u0026#39;Hey Bob, there is a 0xbadc0ffee error!\u0026#39; \u0026lsquo;f\u0026rsquo;string 模版\n1 2 \u0026gt;\u0026gt;\u0026gt; f\u0026#39;Hello, {name}!\u0026#39; \u0026#39;Hello, Bob!\u0026#39; 数字 整数 : 不带小数点 浮点数 : 带小数点, 存在精度问题 操作符\n+ - * \\ % 与字符串的转换:\nstr() 数字转化成字符串 int() 字符串转化成整数 float() 字符串转化成浮点数 逻辑 布尔值\nTrue False 与或非\nand or not 比较\n== != \u0026lt;= =\n\u0026lt; 转化\nbool(1) // True bool(\u0026quot;\u0026quot;) // False 列表 创建 声明\n1 people = [\u0026#39;alice\u0026#39;, \u0026#39;fred\u0026#39;, \u0026#39;ian\u0026#39;] range\n1 2 3 4 5 for i in range(1, 5): print(i) // 直接创建一个数组 intList = list(range(1, 5) 列表解析\n1 squares = [ value * 2 for value in range(1, 11)] 切片\n1 newPeoples = people[:3] 操作 遍历\n1 2 for person in people: print(person) 元组 创建\n使用小括号创建, 创建之后内部值无法修改\n1 aTuple = (1, 3, 5) 遍历\n1 2 for a in aTuple: print(a) 字典 声明\n1 peopleCity = { \u0026#34;ian\u0026#34;:\u0026#34;xiamen\u0026#34;, \u0026#34;jinx\u0026#34;:\u0026#34;beijing\u0026#34;} 取值\n1 print(peopleCity[\u0026#34;ian\u0026#34;]) 存在修改, 不存在添加\n1 peopleCity[\u0026#34;newguy\u0026#34;] = \u0026#34;newcity\u0026#34; 删除\n1 del peopleCity[\u0026#34;ian\u0026#34;] 遍历\n1 2 3 for person, city in peopleCity.items(): print(person) print(city) 流程控制 if if\u0026hellip;else\u0026hellip;\n1 2 3 4 5 6 if True : print(\u0026#34;\u0026#34;) elif True: print(\u0026#34;if if \u0026#34;) else: print(\u0026#34;\u0026#34;) 判断是否在列表\n1 if person in people: 判断列表是否为空\n1 2 if people : print(\u0026#34;not empty\u0026#34;) 以下略:\nwhile break continue 代码组织 函数 定义 1 2 def func_name(): print(\u0026#34;function bdoy\u0026#34;) 普通形参 1 2 def greating(name, words): ... 关键字参数 1 greating(naem=\u0026#39;ian\u0026#39;, words=\u0026#39;hello\u0026#39;) 默认值 1 2 def greating(name, words=\u0026#39;hello\u0026#39;): ... 返回值 1 2 def getMeFive(): return 5 可变参数 1 2 def make_pizza(*toppings): ... 使用*表示可变参数, 内部生成一个元组传递到函数内部\n模块 模块为文件, 使用import导入模块, 假设有hello.py文件, 里有greating函数\n导入模块 1 2 3 import hello hello.greating() 不用写前缀\n1 from hello import * 导入函数 1 2 3 from hello import greating greating() 别名 函数\n1 from hello import greating as gt 模块\n1 import hello as ho 类 面向对象\n声明 1 2 3 4 5 6 7 8 9 10 class Dog(): def __init__(self, name, age): \u0026#34;\u0026#34;\u0026#34;初始化属性name和age\u0026#34;\u0026#34;\u0026#34; self.name = name self.age = age 6 def sit(self): \u0026#34;\u0026#34;\u0026#34;模拟小狗被命令时蹲下\u0026#34;\u0026#34;\u0026#34; print(self.name.title() + \u0026#34; is now sitting.\u0026#34;) 初始化函数 __init___\n指向自身引用 self\n实例化 1 2 3 4 5 my_dog = Dog(\u0026#34;kiki\u0026#34;, 3) my_dog.site() // 访问属性 print(my_dog.name) 访问不存在的属性, 会出错\n继承 1 2 3 class Car(): def __init__(self): 继承\n1 2 3 4 class ElectricCar(Car): def __init__(self): super().init() 从模块导入 与导入方法一致\n1 from dog import Dog 工程化 文件 1 wiht open(filename) as file_obj: json 转存和加载\njson.dump json.load 异常 捕获异常\n1 2 3 4 5 6 try: print(5/0) except ZeroDivisionError: pass else: ... 单元测试 继承 unittest\n1 2 3 4 5 6 7 8 9 ipmort unittest calss NameTestCase(unittest.TestCase): def test_func_name(self): // self.assertEqual() ... unittest.main() ","permalink":"https://ynikl.github.io/blog/python-basic-quick/","summary":"学习路径 数据结构 流程控制 代码组织 工程化 数据结构 strings int list tuple dictionary 如何查看一个基本的类型对象拥有的方法\n1 2 3 name = \u0026#34;ada\u0026#34; dir(name) dir 获取对象的属性\n字符串 1 name = \u0026#34;ada lovelace\u0026#34; 拼接, 用+\n1 2 3 first_name = \u0026#34;ada\u0026#34; last_name = \u0026#34;lovelace\u0026#34; full_name = first_name + \u0026#34; \u0026#34; + last_name 声明字符串中 '单引号和\u0026quot; 双引号没有区别, 可以用来相互替换 多行字串使用'''连续三个单引号或双引号声明 字符串格式化\nformat\n1 2 3 \u0026gt;\u0026gt;\u0026gt; \u0026#39;Hey {name}, there is a 0x{errno:x} error!\u0026#39;.format( ... name=name, errno=errno) \u0026#39;Hey Bob, there is a 0xbadc0ffee error!","title":"Python 基本语法快速学习"},{"content":"乐观锁和悲观锁 首先, 乐观锁和悲观锁和本身并不是一种具体锁.\n而是一种编程的并发控制思想. 原名应该叫做乐观并发控制(Optimistic concurrency control) 简称 OCC 和 悲观并发控制(Pessimistic Concurrency Control) 简称 PCC\n什么是锁 维基百科对锁的定义\nIn computer science, a lock or mutex (from mutual exclusion) is a synchronization primitive: a mechanism that enforces limits on access to a resource when there are many threads of execution. A lock is designed to enforce a mutual exclusion concurrency control policy, and with a variety of possible methods there exists multiple unique implementations for different applications.\n简单表述一下: 锁是一个同步原语, 是一种控制访问资源的线程的手段\n乐观锁 乐观锁是对于要锁定的的访问资源或变量, 持有乐观的态度 \u0026ndash; 即在自己访问该变量的时候, 不会有其他线程来访问该变量.\n主要思想是在写入数据的时候, 对比一下, 当前变量的值是不是与自己取出来的时候是一致, 如果一致即表示着 数据没有被其他线程修改过\n有两种具体的策略\n版本号 CAS 版本号 在每一次对加锁数据进行修改时候的, 对版本号进行增加操作. 当回写的数据时候判断版本号 是否一致.\n如果保持一致, 才会继续进行操作.\nCAS 利用CPU硬件层面支持 \u0026ndash; 比较和写入两步为原子性. 直接对当前值进行判断, 是与取出的数 据一致. 一致才继续进行操作.\n利用CAS, 自增完成数字自增的伪代码\n1 2 3 4 5 6 7 8 function add(p: pointer to int, a: int) returns int done ← false while not done value ← *p // Even this operation doesn\u0026#39;t need to be atomic. done ← cas(p, value, value + a) return value + a 如果一直失败的话, cpu就会保持自旋 \u0026ndash; 对cpu算力消耗较大, 直至成功.\nABA 问题 在乐观锁中, 如果值没有变化, 它的背后含义代表该值没有对其他线程修改过.\n但是存在着这种情况.\n线程1, 取值 A 线程2, 取值 A 线程2, 修改 B 值 \u0026ndash; 成功 线程2, 取值 B, 再修改成 A \u0026ndash; 成功 线程1, 对比 A值, 一致 修改的对象值已经被其他对象修改过, 但又被修改成旧的值. 对于 ABA 问题有没有危害,要 看具体的业务场景\n如果使用版本号, 每一次修改值, 都增加版本号, 就可以避免该问题.\n悲观锁 悲观锁, 认为自己取值之后, 一定会有其他线程过来修改自己取值的对象. 采取保守策略 \u0026ndash; 直接对该数据进行锁定.\n按对数据的锁定类型, 可以分成两种锁:\n互斥锁 读写锁 互斥锁 对数据锁定期间, 不允许其他线程的访问 \u0026ndash; 读取也不允许. 其他线程只能等待当前的线程 执行完毕\n常见的即是各种语言自带的互斥锁.\n读写锁 数据锁定期间, 其他线程可以读取数据, 但是不能写入数据.\n常见的也是各种语言的读写锁.\n参考 乐观锁、悲观锁，这一篇就够了！ ABA问题 锁的定义 ","permalink":"https://ynikl.github.io/blog/cs-optimitic-concurrency-control/","summary":"乐观锁和悲观锁 首先, 乐观锁和悲观锁和本身并不是一种具体锁.\n而是一种编程的并发控制思想. 原名应该叫做乐观并发控制(Optimistic concurrency control) 简称 OCC 和 悲观并发控制(Pessimistic Concurrency Control) 简称 PCC\n什么是锁 维基百科对锁的定义\nIn computer science, a lock or mutex (from mutual exclusion) is a synchronization primitive: a mechanism that enforces limits on access to a resource when there are many threads of execution. A lock is designed to enforce a mutual exclusion concurrency control policy, and with a variety of possible methods there exists multiple unique implementations for different applications.","title":"乐观锁和悲观锁"},{"content":"我的总结 对于功能, 业务, 代码逻辑, 不要只停留在表面, 要进一步地去思考为什么 保持开放的心态, 尊重他人的意见, 勇于承认自己的\u0026quot;不知道\u0026quot;. 去思考他人为什么这么想 保持学习, 拥抱变化 有时间观念, 把控项目进度. 控制有规律的开发节奏, 不要让自己经常加班. 每天下班都能完成一天的任务. 让真正的软件用户做决策, 保持定期沟通, 让用户一直确认自己想要的东西 让工具替代人力, 实现自动化 控制代码质量, 简单, 清晰, 内聚 团队内部保持沟通 \u0026ndash; 站会, 及时反映变化. 遇到问题及时求救, 保持向上反馈. 不要辜负人家的预期 深入思考, 保持开发, 拥抱变化, 保持沟通, 注重质量, 保持学习, 自动化.\n书本原文 深度思考问题\n“拙劣的代码工人会这样不假思索地改完代码，然后快速转向下一个问题。 优秀的程序员会挖掘更深一层，尽力去理解为什么这里必须要加1，更重要的是，他会想明白会产生什么其他影响。”\n“在一本流行的管理图书《第五项修炼》中，作者建议，在理解一个问题的时候，需要渐次地问5个以上的“为什么”。这听起来就像退回到了4岁，那时对一切都充满着好奇。它是很好的方式，进一步挖掘简单直白的答案，通过这个路线，设想就会更加接近事实真相。”\n当你问“为什么”的时候，也许你会被反问：“为什么你问这个问题？”在提问之前，想好你提问的理由，这会有助于你问出恰当的问题。\n保持开发, 承认自己的不知道\n“这个，我不知道”是一个好的起点，应该由此进行更进一步的调查，而不应在此戛然结束。”\n“如果你对答案不满意，那么看看你是否可以改变问题。”\n“作为第1步的理解代码，往往是最难的。如果别人给你的代码很容易理解，接下来的工作就省心多了”\n尊重他人的意见\n“孤立非常危险，不要让开发人员完全孤立地编写代码（见第155页，习惯40）。如果团队成员花些时间阅读其他同事写的代码，他们就能确保代码是可读和可理解的，并且不会随意加入这些“+1或-1”的代码。阅读代码的频率越高越好。实行代码复审 ，不仅有助于代码更好理解，而且是发现bug最有效的方法之一。”\n“用Les Brown的一句话说就是：“你不需要很出色才能起步，但是你必须起步才能变得很出色。”\n“如果你是一个有远见的人，就一定要特别尊重别人的意见。你是一个掌舵者，一定要把握方向，深思熟虑，吸取各方的意见。”\n保持学习\n“谁会帮助你保持步伐前进呢？在一个企业化的社会中，只有一个人会为你负责——你自己。是否能跟上变化，完全取决于你自己”\n“跟踪技术变化 。你不需要精通所有技术，但需要清楚知道行业的动向，从而规划你的项目和职业生涯”\n拥抱变化, 交付用户想要的软件\n“敏捷的根本之一就是拥抱变化。既然变化是永恒的，你有可能一直使用相同的技术和工具吗？”\n“真正的敌人是变化。软件开发如战争，形势的变化快速而又剧烈。固守昨天的计划而无视环境的变化会带来灾难。”\n“不要在前期做大量的设计”并不是说不要设计。只是说在没有经过真正的代码验证之前，不要陷入太多的设计任务。当对设计一无所知的时候，投入编码也是一件危险的事”\n时间观念\n“许多的敏捷技巧来源于时间盒——设定一个短时的期限，为任务设定不能延长的最终期限。你可以选择放弃其他方面的任务，但是最终期限是不变的。你可能不知道完成所有的任务需要多少个时间盒，但每个时间盒必须是短期的、有限的，并且要完成具体的目标”\n“如果在你工作的时候没有一个固定的最终期限（例如一天的结束），就应该好好想想了。它会让你的工作有一个节奏，在每天下班的时候，提交所有的工作，开心地收工。这样，明天就能开始新的内容，解决下一系列难题”\n“有人说，上帝发明了时间，就是为了防止所有事情同时发生。因此我们需要更具远见，保持不同的开发节奏，这样敏捷项目的所有事情就不会突然同时发生，也不会随机发生，时间也不会不可预知。”\n让真正的用户做决策\n“记录客户做出的决定，并注明原因。好记性不如烂笔头”\n“不要随意假设低级别的问题不会影响他们的业务。如果能影响他们的业务，就是有价值的问题。”\n“因而，你只有一个选择：要么现在就让用户做决定，要么现在就开始开发，迟些让用户决定，不过要付出较高的成本。如果你在开发阶段回避这些问题，就增加了风险，但是你要能越早解决这些问题，就越有可能避免繁重的重新设计和编码。甚至在接近项目最终期限的时候，也能避免与日俱增的时间压力。”\n“开发者（及项目经理）能做的一个最重要的决定就是：判断哪些是自己决定不了的，应该让企业主做决定。你不需要自己给业务上的关键问题做决定。毕竟，那不是你的事情。如果遇到了一个问题，会影响到系统的行为或者如何使用系统，把这个问题告诉业务负责人”\n“没有人的思想和观点可以及时冻结，特别是项目的客户。就算是他们已经告诉你想要的东西了，他们的期望和想法还是在不停地进化——特别是当他们在使用新系统的部分功能时，他们才开始意识到它的影响和可能发生的问题。这就是人的本性。”\n“你生产出了他们曾经要求过的软件，但却不是他们现在真正想要的。那最后的结果就是：惊讶、震惊和失望，而不是满意。 ”\n分析技术的利弊\n“每一门技术都会有优点和缺点，无论它是开源的还是商业产品、框架、工具或者语言，一定要清楚它的利弊。”\n控制迭代\n“迭代开发是，在小且重复的周期里，你完成各种开发任务：分析、设计、实现、测试和获得反馈，所以叫作迭代”\n“每个工作日，每个团队成员会重新评估完成一个任务还需要多少小时。不管怎么样，只要所有任务的评估总和超过了一个迭代剩余的时间，那么任务就必须移到下一个迭代中开发”\n单元测试, 控制代码质量\n“单元测试能及时提供反馈 。你的代码会重复得到锻炼。但若修改或者重写了代码，测试用例就会检查你是否破坏了已有的功能。你可以快速得到反馈，并很容易地修复它们。\n单元测试让你的代码更加健壮 。测试帮助你全面思考代码的行为，帮你练习正面、反面以及异常情况。\n单元测试是有用的设计工具 。正如我们在实践20中谈论到的，单元测试有助于实现简单的、注重实效的设计。\n单元测试是让你自信的后台 。你测试代码，了解它在各种不同条件下的行为。这会让你在面对新的任务、时间紧迫的巨大压力之下，找到自信。\n单元测试是解决问题时的探测器 。单元测试就像是测试印制电路板的示波镜。当问题出现的时候，你可以快速地给代码发送一个脉冲信号。这为你提供[…]”\n“如果不是真正需要它的时候，你就不应该实现这个功能。基于这一点，现在还没有足够的理由表示你需要Player 这个类”\n“开发人员在完成任务时，可能会难以抵挡诱惑为节省时间而走“捷径”。然而，这些“捷径”往往只会推迟问题的爆发时间，而不是把它彻底解决掉”\n“项目是以增量式方式进行开发的，写程序时也应该进行增量式编程\n“源代码可以被读懂，不是因为其中的注释，而应该是由于它本身优雅而清晰——变量名运用正确、空格使用得当、逻辑分离清晰，以及表达式非常简洁。”\n“这时要扪心自问，是不是真的需要用它，以及它将如何帮你解决眼前的问题。问问自己，是不是特定的问题强迫你使用这个解决方案。不要让自己被迫进行过分设计，也不要将代码过分复杂化。”\n“内聚性用来评估一个组件（包、模块或配件）中成员的功能相关性。内聚程度高，表明各个成员共同完成了一个功能特性或是一组功能特性”\n成为自己产品的用户\n“很多成功的公司都是靠着“吃自己的狗食”活着。也就是说，如果要让你的产品尽可能地好，自己先要积极地使用它。”\n度量项目进度\n“所以，我们不应该去计算工作量完成的百分比，而应该测定还剩下多少工作量没有完成。如果你最初估计这个任务需要40个小时，在开发了35个小时之后，你认为还需要另外30个小时的工作。那就得到了很重要的度量结果（这里诚实非常重要，隐瞒真相毫无意义）。”\n“奇怪的是，它花费的时间很可能要比最初估计时间长。没有关系，我们希望这能作为下一次的参考。在为下一个任务估计工作量时，可以根据这次经验调整评估。如果你低估了一个任务，评估是2天，它最后花费了6天，那么系数就是3。除非是异常情况，否则你应该对下次估计乘以系数3。你的评估会波动一段时间，有时候过低估计，有时候过高估计。但随着时间的推移，你的评估会与事实接近，你也会对任务所花费的时间有更清楚的认识。”\n团队合作\n“既然整个团队都是项目工作的一部分，我们希望实行代码集体所有制 （见第155页），以保证任何团队成员的缺席不会对项目造成影响”\n“对于初学者来说，准备好后再共享代码才是有礼貌的做法（见第162页），这样才不会用未完成的工作来给团队成员造成麻烦。当准备好之后，我们应该与其他团队成员一起做代码复查\n“坐着开的会议通常会持续更久，大部分人不喜欢站着进行长时间的谈话。”\n“通常，立会都是在每个工作日的早些时候，且大家都在上班时举行。但是不要把它安排为上班后的第一件事。要让大家有机会从刚才混乱的交通状况中恢复状态，喝点咖啡，删除一些垃圾邮件什么的。要保证会议结束后有足够的时间，让大家在午餐之前做不少工作，同时也不要开始得过早，让每个人都巴不得赶紧结束会议，去喝点东西。一般来说，在大家到公司之后的半个小时到一个小时之内举行，是个不错的选择。”\n“如果觉得立会是在浪费时间，那可能是大家还没有形成真正的团队意识。这并不是坏事，有利于针对问题进行改进。”\n“当多人同时开发时，代码会被频繁地检查、重构以及维护。如果需要修复bug，任何一名开发人员都可以完成这项工作。同时有两个或两个以上的人，可以处理应用中不同部分的代码，可以让项目的日程安排也变得更为容易。”\n“另一方面，知道别人将会接过自己的代码，就意味着自己要更守规矩。当知道别人在注意时，一定会更加小心。”\n费曼学习法\n“通过详细解释自己知道的东西，可以使自己的理解更深入。当别人提出问题时，也可以发现不同的角度。也许可以发现一些新技巧——听到一个声音这样告诉自己：“我以前还没有这样思考过这个问题”\n“为团队成员在寻求帮助之前陷入某个问题的时间设定一个时限，一个小时应该是不错的选择”\n“如果有人还是没有任何线索，那就给更多提示吧（或者甚至是答案）。如果有人提出来某些想法，不妨帮他们分析每种想法的优劣之处。如果有人给出的答案或解决方法更好，那就从中汲取经验，然后分享你的体会吧。这对双方来说都是极佳的学习经验。”\n“用问题来回答问题，可以引导提问的人走上正确的道路。\n如果有人真的陷入胶着状态，就不要折磨他们了。告诉他们答案，再解释为什么是这样。”\n“同样的功能，不同开发人员的代码实现可能不同。差异并不意味着不好。除非你可以让某段代码明确变得更好，否则不要随意批评别人的代码。”\n及时向上反馈\n“及时通报进展与问题，有情况发生时，就不会让别人感到突然，而且他们也很愿意了解目前的进展状况。他们会知道何时应提供帮助，而且你也获得了他们的信任”\n“接受一个任务，也就意味着做出了要准时交付的承诺”\n慢慢来\n“有句老话说得好：“你可以把马带到水边……但是你不能强迫它使用你最钟爱的代码编辑器。” You can lead a horse to water, but you can make him drink.\n","permalink":"https://ynikl.github.io/books/practices_of_an_agile_developer/","summary":"我的总结 对于功能, 业务, 代码逻辑, 不要只停留在表面, 要进一步地去思考为什么 保持开放的心态, 尊重他人的意见, 勇于承认自己的\u0026quot;不知道\u0026quot;. 去思考他人为什么这么想 保持学习, 拥抱变化 有时间观念, 把控项目进度. 控制有规律的开发节奏, 不要让自己经常加班. 每天下班都能完成一天的任务. 让真正的软件用户做决策, 保持定期沟通, 让用户一直确认自己想要的东西 让工具替代人力, 实现自动化 控制代码质量, 简单, 清晰, 内聚 团队内部保持沟通 \u0026ndash; 站会, 及时反映变化. 遇到问题及时求救, 保持向上反馈. 不要辜负人家的预期 深入思考, 保持开发, 拥抱变化, 保持沟通, 注重质量, 保持学习, 自动化.\n书本原文 深度思考问题\n“拙劣的代码工人会这样不假思索地改完代码，然后快速转向下一个问题。 优秀的程序员会挖掘更深一层，尽力去理解为什么这里必须要加1，更重要的是，他会想明白会产生什么其他影响。”\n“在一本流行的管理图书《第五项修炼》中，作者建议，在理解一个问题的时候，需要渐次地问5个以上的“为什么”。这听起来就像退回到了4岁，那时对一切都充满着好奇。它是很好的方式，进一步挖掘简单直白的答案，通过这个路线，设想就会更加接近事实真相。”\n当你问“为什么”的时候，也许你会被反问：“为什么你问这个问题？”在提问之前，想好你提问的理由，这会有助于你问出恰当的问题。\n保持开发, 承认自己的不知道\n“这个，我不知道”是一个好的起点，应该由此进行更进一步的调查，而不应在此戛然结束。”\n“如果你对答案不满意，那么看看你是否可以改变问题。”\n“作为第1步的理解代码，往往是最难的。如果别人给你的代码很容易理解，接下来的工作就省心多了”\n尊重他人的意见\n“孤立非常危险，不要让开发人员完全孤立地编写代码（见第155页，习惯40）。如果团队成员花些时间阅读其他同事写的代码，他们就能确保代码是可读和可理解的，并且不会随意加入这些“+1或-1”的代码。阅读代码的频率越高越好。实行代码复审 ，不仅有助于代码更好理解，而且是发现bug最有效的方法之一。”\n“用Les Brown的一句话说就是：“你不需要很出色才能起步，但是你必须起步才能变得很出色。”\n“如果你是一个有远见的人，就一定要特别尊重别人的意见。你是一个掌舵者，一定要把握方向，深思熟虑，吸取各方的意见。”\n保持学习\n“谁会帮助你保持步伐前进呢？在一个企业化的社会中，只有一个人会为你负责——你自己。是否能跟上变化，完全取决于你自己”\n“跟踪技术变化 。你不需要精通所有技术，但需要清楚知道行业的动向，从而规划你的项目和职业生涯”\n拥抱变化, 交付用户想要的软件\n“敏捷的根本之一就是拥抱变化。既然变化是永恒的，你有可能一直使用相同的技术和工具吗？”\n“真正的敌人是变化。软件开发如战争，形势的变化快速而又剧烈。固守昨天的计划而无视环境的变化会带来灾难。”\n“不要在前期做大量的设计”并不是说不要设计。只是说在没有经过真正的代码验证之前，不要陷入太多的设计任务。当对设计一无所知的时候，投入编码也是一件危险的事”\n时间观念\n“许多的敏捷技巧来源于时间盒——设定一个短时的期限，为任务设定不能延长的最终期限。你可以选择放弃其他方面的任务，但是最终期限是不变的。你可能不知道完成所有的任务需要多少个时间盒，但每个时间盒必须是短期的、有限的，并且要完成具体的目标”\n“如果在你工作的时候没有一个固定的最终期限（例如一天的结束），就应该好好想想了。它会让你的工作有一个节奏，在每天下班的时候，提交所有的工作，开心地收工。这样，明天就能开始新的内容，解决下一系列难题”\n“有人说，上帝发明了时间，就是为了防止所有事情同时发生。因此我们需要更具远见，保持不同的开发节奏，这样敏捷项目的所有事情就不会突然同时发生，也不会随机发生，时间也不会不可预知。”","title":"高效程序员的45个习惯"},{"content":"实现并发控制 在 golang 代码中如果要对一段代码进行并发限制. 通常的做法都是在写一个 channel 进行传入和传出.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 func main() { concurrencyNum := 10 limitCh := make(chan bool, concurrencyNum) wg := new(sync.WaitGroup) for i := 0; i \u0026lt; 100; i++ { limitCh \u0026lt;- true wg.Add(1) go func() { defer func() { \u0026lt;-limitCh wg.Done() }() time.Sleep(1 * time.Second) fmt.Println(\u0026#34;do some things...\u0026#34;) }() } wg.Wait() fmt.Println(\u0026#34;ok\u0026#34;) } 如果如果中间运行代码有可能存在错误, 捕获错误. 有两种方法:\n声明一个 err channel 用于承接错误 声明一个外部 err 变量, 并通过互斥锁进行保护 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 func main() { concurrencyNum := 10 limitCh := make(chan bool, concurrencyNum) errCh := make(chan error, concurrencyNum) var externalErr error wg := new(sync.WaitGroup) func() { for i := 0; i \u0026lt; 100; i++ { select { case err := \u0026lt;-errCh: externalErr = err return default: } wg.Add(1) limitCh \u0026lt;- true go func() { defer func() { \u0026lt;-limitCh wg.Done() }() time.Sleep(1 * time.Second) fmt.Println(\u0026#34;do some things...\u0026#34;) if rand.Intn(5) == 1 { err := errors.New(\u0026#34;this is a error\u0026#34;) errCh \u0026lt;- err } }() } }() wg.Wait() fmt.Println(\u0026#34;ok\u0026#34;) fmt.Println(externalErr) } 每个地放都写这么多代码, 就有了重复的感觉. 本质上就两点:\n通过 channel 控制并发数 通过 waitgroup 保证所有的协程都执行完毕 通过另一个 errchannel 接受中间执行的错误 errgroup 可以通过使用, 官方的拓展包 errgroup 更快实现\n声明 errgroup\n普通声明 new(errgroup.Group) 使用 context errgroup.WithContext 限制开启的协程数据\neg.SetLimit(goroutineNum)\n开启协程\neg.Go eg.TryGo 整体代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 eg := new(errgroup.Group) eg.SetLimit(10) for i := 0; i \u0026lt; 100; i++ { eg.Go(func() error { time.Sleep(1 * time.Second) fmt.Println(\u0026#34;hello go\u0026#34;) return nil }) } err := eg.Wait() fmt.Println(\u0026#34;done\u0026#34;, err) 目前有个使用场景没办法满足:\n就是没办法在开启协程之前, 知道原先已经执行的协程是否有发生错误. 如果有发生错误的. 就停止再继续开启协程.\n可以通过添加一个 外部的 errChannel , 覆盖到上面的需求.\n","permalink":"https://ynikl.github.io/blog/golang-errgroup/","summary":"实现并发控制 在 golang 代码中如果要对一段代码进行并发限制. 通常的做法都是在写一个 channel 进行传入和传出.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 func main() { concurrencyNum := 10 limitCh := make(chan bool, concurrencyNum) wg := new(sync.WaitGroup) for i := 0; i \u0026lt; 100; i++ { limitCh \u0026lt;- true wg.Add(1) go func() { defer func() { \u0026lt;-limitCh wg.Done() }() time.Sleep(1 * time.Second) fmt.","title":"Go  errgroup 的基本用法"},{"content":"在 golang 中查看源码是比较方便的. 可以直接到 官方包文档中直接查看文档和跳转到源码\n但是, 当我们想看一些更加底层的实现方法时, 就需要知道编译器将对应的方法编译成 什么底层方法了.\n比如, 我知道一些make(map[int]bool)是怎么实现的.\n这时候就需要一些方法了. 引用一下鸟窝大佬的文章 总结一下三种方法:\ngo tool compile -N -l -S makemap.go go tool compile -N -l -S makemap.go go tool compile -N -l -S makemap.go go tool compile 产生的汇编代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 0x001c 00028 (main.go:5)\tFUNCDATA\t$1, gclocals·PdpXzE88ETLbqQ9okAZ04w==(SB) 0x001c 00028 (main.go:5)\tFUNCDATA\t$2, main.main.stkobj(SB) 0x001c 00028 (main.go:6)\tSTP\t(ZR, ZR), main..autotmp_4-48(SP) 0x0020 00032 (main.go:6)\tSTP\t(ZR, ZR), main..autotmp_4-32(SP) 0x0024 00036 (main.go:6)\tSTP\t(ZR, ZR), main..autotmp_4-16(SP) 0x0028 00040 (main.go:6)\tMOVD\t$type.map[int]bool(SB), R0 0x0030 00048 (main.go:6)\tMOVD\t$100, R1 0x0034 00052 (main.go:6)\tMOVD\t$main..autotmp_4-48(SP), R2 0x0038 00056 (main.go:6)\tPCDATA\t$1, ZR 0x0038 00056 (main.go:6)\tCALL\truntime.makemap(SB) 0x003c 00060 (main.go:6)\tMOVD\tR0, main.mp-112(SP) 0x0040 00064 (main.go:7)\tMOVD\tR0, R1 0x0044 00068 (main.go:7)\tMOVD\tZR, R2 0x0048 00072 (main.go:7)\tMOVD\t$type.map[int]bool(SB), R0 go tool objdump产生的汇编代码\n1 2 3 4 5 6 7 main.go:6\t0x10008a734\ta907ffff\tSTP (ZR, ZR), 120(RSP)\tmain.go:6\t0x10008a738\t90000160\tADRP 180224(PC), R0\tmain.go:6\t0x10008a73c\t91100000\tADD $1024, R0, R0\tmain.go:6\t0x10008a740\td2800c81\tMOVD $100, R1\tmain.go:6\t0x10008a744\t910163e2\tADD $88, RSP, R2\tmain.go:6\t0x10008a748\t97fe0522\tCALL runtime.makemap(SB)\tmain.go:6\t0x10008a74c\tf90023e0\tMOVD R0, 64(RSP)\tgo build -gcflags -S 产生的汇编代码\n1 2 3 4 5 6 7 8 mp_10-32(SP) 0x0024 00036 (/Users/ian/play/map/main.go:6) STP (ZR, ZR), main..autotmp_10-16(SP) 0x0028 00040 (/Users/ian/play/map/main.go:6) MOVD $type.map[int]bool(SB), R0 0x0030 00048 (/Users/ian/play/map/main.go:6) MOVD $100, R1 0x0034 00052 (/Users/ian/play/map/main.go:6) MOVD $main..autotmp_10-48(SP), R2 0x0038 00056 (/Users/ian/play/map/main.go:6) PCDATA $1, ZR 0x0038 00056 (/Users/ian/play/map/main.go:6) CALL runtime.makemap(SB) 0x003c 00060 (/Users/ian/play/map/main.go:6) MOVD R0, main.mp-72(SP) 大同小异, 根据源代码的行号(mian.go:6) 都可以从代码中看到, 调用call 了makemap 这个方法\n我们在到源码中, 找到makemap方法, 就可以查看对应的源码了\n参考 得到Go程序的汇编代码的方法\n","permalink":"https://ynikl.github.io/blog/golang-get-assembly-fn/","summary":"在 golang 中查看源码是比较方便的. 可以直接到 官方包文档中直接查看文档和跳转到源码\n但是, 当我们想看一些更加底层的实现方法时, 就需要知道编译器将对应的方法编译成 什么底层方法了.\n比如, 我知道一些make(map[int]bool)是怎么实现的.\n这时候就需要一些方法了. 引用一下鸟窝大佬的文章 总结一下三种方法:\ngo tool compile -N -l -S makemap.go go tool compile -N -l -S makemap.go go tool compile -N -l -S makemap.go go tool compile 产生的汇编代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 0x001c 00028 (main.go:5)\tFUNCDATA\t$1, gclocals·PdpXzE88ETLbqQ9okAZ04w==(SB) 0x001c 00028 (main.go:5)\tFUNCDATA\t$2, main.main.stkobj(SB) 0x001c 00028 (main.go:6)\tSTP\t(ZR, ZR), main.","title":"如何查看 golang 编译之后调用的源码方法"},{"content":"开这个目录的目的:\n是为了记录一些, 我日常读到的一些文章收获和心得.\n","permalink":"https://ynikl.github.io/journal/","summary":"开这个目录的目的:\n是为了记录一些, 我日常读到的一些文章收获和心得.","title":"Journal"},{"content":"Content-Disposition 常见是用在 http 请求的 Response 的 Header 头部.\n告诉请求客户端(浏览器) 如何处理内容;\nContent-Disposition是在 MIME 标准定义的. http 中的用法只是其中的一小部分.\n语法参数 inline 会在浏览器内部显示\n1 Content-Disposition: inline attachment 会被保存成文件\n1 Content-Disposition: attachment 后面可以跟 filename, 值为预设文件名称, 中间使用;分号隔开.\n1 Content-Disposition: attachment; filename=\u0026#34;filename.jpg\u0026#34; 拓展参数, 有两个文件名称参数可选\nfilename* filename filename* 采用了 RFC 5987 中规定的编码方式, 假如两个参数都使用 filename* 的优先级更高\nRFC 5987 该提议最终还是引用 RFC 2231 中的编码方式. 下面简单介绍一下语法\n*星号用于标记该同名参数是支持该编码语法的, 就如( filename* 之于 filename) '单个逗号用于分割 字符集名称 , 语言, 文件名称 %百分号用于标记编码方式, 参考RFC 2047, 所以文件名中不能有% 1 filename*=us-ascii\u0026#39;en-us\u0026#39;This%20is%20%2A%2A%2Afun%2A%2A%2A 使用us-ascii编码, en-us英语\n问题: 下载文件名称乱码 根据上面的知识, 就可以解决有的浏览器下载文件时中文名称乱码.\nHttp 返回设置Content-Disposition值 使用 RFC 2231 的文件名称方式, 制定编码utf-8 将文件名称移除% 1 disposition := fmt.Sprintf(\u0026#34;attachment;filename*=utf-8\u0026#39;\u0026#39;%s\u0026#34;, url.QueryEscape(name)) 参考 MDN RFC 2231\n","permalink":"https://ynikl.github.io/blog/http-content-disposition/","summary":"Content-Disposition 常见是用在 http 请求的 Response 的 Header 头部.\n告诉请求客户端(浏览器) 如何处理内容;\nContent-Disposition是在 MIME 标准定义的. http 中的用法只是其中的一小部分.\n语法参数 inline 会在浏览器内部显示\n1 Content-Disposition: inline attachment 会被保存成文件\n1 Content-Disposition: attachment 后面可以跟 filename, 值为预设文件名称, 中间使用;分号隔开.\n1 Content-Disposition: attachment; filename=\u0026#34;filename.jpg\u0026#34; 拓展参数, 有两个文件名称参数可选\nfilename* filename filename* 采用了 RFC 5987 中规定的编码方式, 假如两个参数都使用 filename* 的优先级更高\nRFC 5987 该提议最终还是引用 RFC 2231 中的编码方式. 下面简单介绍一下语法\n*星号用于标记该同名参数是支持该编码语法的, 就如( filename* 之于 filename) '单个逗号用于分割 字符集名称 , 语言, 文件名称 %百分号用于标记编码方式, 参考RFC 2047, 所以文件名中不能有% 1 filename*=us-ascii\u0026#39;en-us\u0026#39;This%20is%20%2A%2A%2Afun%2A%2A%2A 使用us-ascii编码, en-us英语","title":"Content Disposition"},{"content":"豆瓣因为涉及敏感词不让写, 干脆就写到这里来 (我也没写啥不好的呀 QAQ).\n真正的现实，都是充满着矛盾。对万事万物保持一颗敬畏的心.\n一方面是平民老百姓承受着流离失所的痛苦，一方面他们又可以从老破房子住到新的高楼“不破不立”，改善环境。 既要看到痛苦，也要看到改善。看外该电影， 更加让我懂得，看待事情要怀着敬畏之心，事情都是有双面性的。\n总得来说，还是觉得耿属于“好市长”，在中国经济飞速发展的过程中，为人民干实事，坚定自己的立场，倾听民声（市民赌在司令部门口申诉问题的场景给我印象极深）。\n","permalink":"https://ynikl.github.io/posts/the-chinese-mayor/","summary":"豆瓣因为涉及敏感词不让写, 干脆就写到这里来 (我也没写啥不好的呀 QAQ).\n真正的现实，都是充满着矛盾。对万事万物保持一颗敬畏的心.\n一方面是平民老百姓承受着流离失所的痛苦，一方面他们又可以从老破房子住到新的高楼“不破不立”，改善环境。 既要看到痛苦，也要看到改善。看外该电影， 更加让我懂得，看待事情要怀着敬畏之心，事情都是有双面性的。\n总得来说，还是觉得耿属于“好市长”，在中国经济飞速发展的过程中，为人民干实事，坚定自己的立场，倾听民声（市民赌在司令部门口申诉问题的场景给我印象极深）。","title":"The Chinese Mayor"},{"content":"概括 我为什么要读这本书? 我觉得生活挺无聊, 人生活着没有什么意义. 听说在这本书中会有人生的意义\n这本书怎样影响了我? 看清楚自己之所以活着, 就如史铁生所说, 就是还想得到什么. 并不是如我嘴上所说的: \u0026ldquo;人生活着没什么意义\u0026rdquo; 打算更加大胆地去追求自己想要\u0026quot;得到\u0026quot;的东西 看清楚做某一件事情的意义 \u0026ndash; 不只是看重结果, 也要去看重过程 书中的三句精华句子? 可我为什么还想活呢? 因为你还想得到点儿什么, 你觉得你还是可以得到点儿什么的, 比如说爱情, 比如说价值感之类的, 人真正的名字叫欲望 只要你最最关心的是目的而不是过程你无论怎样都得落入绝境，只要你仍然不从目的转向过程你就别想走出绝境。 世上有一种东西，其价值远远超过它的价格。这儿的价值，并不止于“物化劳动”，还物化着春天整整一个季节的能量。 上帝从来不对任何人施舍“最幸福”这三个字，他在所有人的欲望前面设下永恒的距离，公平地给每一个人以局限。 此岸永远是残缺的，否则彼岸就要坍塌。 三句话总结本书 尊重不完美, 不要抱怨, 不断地去追求完美 看清楚自己想要得到什么 人生不能只看重目的, 要去享受这个过程. 书摘 在满园弥漫的沉静光芒中，一个人更容易看到时间，并看见自己的身影。\n树干上留着一只蝉蜕，寂寞如一间空屋；露水在草叶上滚动，聚集，压弯了草叶轰然坠地摔开万道金光。”“\n上帝在交给我们这件事实的时候，已经顺便保证了它的结果，所以死是一件不必急于求成的事，死是一个必然会降临的节日。\n剩下的就是怎样活的问题了。这却不是在某一个瞬间就能完全想透的，不是能够一次性解决的事，怕是活多久就要想它多久了，就像是伴你终生的魔鬼或恋人。\n看来差别永远是要有的。看来就只好接受苦难——人类的全部剧目需要它，存在的本身需要它。看来上帝又一次对了。\n就命运而言，休论公道。\n其实总共只有三个问题交替着来骚扰我，来陪伴我。第一个是要不要去死，第二个是为什么活，第三个，我干吗要写作。\n人为什么活着？因为人想活着，说到底是这么回事，人真正的名字叫做：欲望。\n可我为什么还想活呢？因为你还想得到点儿什么，你觉得你还是可以得到点儿什么的，比如说爱情，比如说价值感之类，人真正的名字叫欲望。\n结果你又发表了几篇，并且出了一点儿小名，可这时你越来越感到恐慌。我忽然觉得自己活得像个人质，刚刚有点儿像个人了却又过了头，\n人都忍不住要为生存找一些牢靠的理由。你不担心你会枯竭了？我不知道，不过我想，活着的问题在死前是完不了的。\n就算是三个月！我平白地相信这样一个期限。\n多年以后才听一位无名的哲人说过：危卧病榻，难有无神论者。\n但在命运的混沌之点，人自然会忽略着科学，向虚暝之中寄托一份虔敬的祈盼。\n机会不在外面在心里，结婚的机会有可能在外边，可爱情的机会只能在心里\n那位台湾作家三毛说得对：爱如禅，不能说不能说，一说就错。\n别人告诉我，她昏迷前的最后一句话是：“我那个有病的儿子和我那个还未成年的女儿……”\n砌墙盖房，不单为避风雨，因为大家都有些秘密，其次当然还有一些钱财。秘密，不信你去慢慢推想，它是趣味的爹娘。\n千万别把运动和能量，以及和时空分割开来理解。我随即得了启发：也千万别把人和意义分割开来理解。不是人有欲望，而是人即欲望。\n如今想来，分明就是为了一个“轻”字：珍宝转眼被处理成垃圾，一段生命轻得飘散了，没有了，以为是什么原来什么也不是，轻易、简单、灰飞烟灭。一段生命之轻，威胁了生命全面之重，惶茫往灵魂里渗透：是不是生命的所有段落都会落此下场啊？人的根本恐惧就在这个“轻”字上，比如歧视和漠视，比如嘲笑，比如穷人手里作废的股票，比如失恋和死亡。轻，最是可怕。\n艰苦的生活需要希望，鲜活的生命需要爱情，数不完的日子和数不完的心事，都要诉说。\n也许是因为人缺了什么就更喜欢什么吧，我的两条腿一动不能动，却是个体育迷。\n上帝从来不对任何人施舍“最幸福”这三个字，他在所有人的欲望前面设下永恒的距离，公平地给每一个人以局限。\n我希望既有一个健美的躯体又有一个了悟人生意义的灵魂，我希望二者兼得。\n难道我们不该对灵魂有了残疾的人，比对肢体有了残疾的人，给予更多的同情和爱吗？\n既然是梦想不妨就让它完美些罢。何必连梦想也那么拘谨那么谦虚呢？\n有知识不能只是有对物的知识，而是得有对人的了悟。\n我们也完全可以把你以后的生活设计得无比顺利，但这样下去我们是不是绕了一圈又回到那不祥的阴影中去了？你将再没有企盼了吗？再没有新的追求了吗？那么你的心路是不是又在荒芜，于是你的幸福感又要老化、萎缩、枯竭了呢？\n只要你最最关心的是目的而不是过程你无论怎样都得落入绝境，只要你仍然不从目的转向过程你就别想走出绝境。\n一个只想（只想！）使过程精彩的人是无法被剥夺的，因为死神也无法将一个精彩的过程变成不精彩的过程，因为坏运也无法阻挡你去创造一个精彩的过程，相反你可以把死亡也变成一个精彩的过程，相反坏运更利于你去创造精彩的过程。\n过程！对，生命的意义就在于你能创造这过程的美好与精彩，生命的价值就在于你能够镇静而又激动地欣赏这过程的美丽与悲壮。\n有位大物理学家说过：“物理学不告诉我们世界是什么，而是告诉我们关于世界我们能够谈论什么。”\n历史难免是一部御制经典，文学要弥补它，所以看重的是那些沉默的心魂。\n佛嘛，心中无佛什么事都敢干。\n丑弱的人和圆满的神之间，是信者永远的路。\n此岸永远是残缺的，否则彼岸就要坍塌。\n历史，这两个字，可能包含着任何你想得到和想不到的危险，可能给你带来任何想得到和想不到的灾难。\n那个年代的人都懂得，话说到这儿最好止步；历史，这两个字，可能包含着任何你想得到和想不到的危险，可能给你带来任何想得到和想不到的灾难。\n家长们把“耐克”一类颠来倒去地看，说：“啥东西，值得这么贵？”他们不懂，春天是不能这样计算的。\n大人们其实忘了，春天莫不如此，各位年轻时也是一样。\n世上有一种东西，其价值远远超过它的价格。这儿的价值，并不止于“物化劳动”，还物化着春天整整一个季节的能量。\n我想，那就不必再去地坛寻找安静，莫如在安静中寻找地坛。\n","permalink":"https://ynikl.github.io/books/%E6%88%91%E4%B8%8E%E5%9C%B0%E5%9D%9B/","summary":"概括 我为什么要读这本书? 我觉得生活挺无聊, 人生活着没有什么意义. 听说在这本书中会有人生的意义\n这本书怎样影响了我? 看清楚自己之所以活着, 就如史铁生所说, 就是还想得到什么. 并不是如我嘴上所说的: \u0026ldquo;人生活着没什么意义\u0026rdquo; 打算更加大胆地去追求自己想要\u0026quot;得到\u0026quot;的东西 看清楚做某一件事情的意义 \u0026ndash; 不只是看重结果, 也要去看重过程 书中的三句精华句子? 可我为什么还想活呢? 因为你还想得到点儿什么, 你觉得你还是可以得到点儿什么的, 比如说爱情, 比如说价值感之类的, 人真正的名字叫欲望 只要你最最关心的是目的而不是过程你无论怎样都得落入绝境，只要你仍然不从目的转向过程你就别想走出绝境。 世上有一种东西，其价值远远超过它的价格。这儿的价值，并不止于“物化劳动”，还物化着春天整整一个季节的能量。 上帝从来不对任何人施舍“最幸福”这三个字，他在所有人的欲望前面设下永恒的距离，公平地给每一个人以局限。 此岸永远是残缺的，否则彼岸就要坍塌。 三句话总结本书 尊重不完美, 不要抱怨, 不断地去追求完美 看清楚自己想要得到什么 人生不能只看重目的, 要去享受这个过程. 书摘 在满园弥漫的沉静光芒中，一个人更容易看到时间，并看见自己的身影。\n树干上留着一只蝉蜕，寂寞如一间空屋；露水在草叶上滚动，聚集，压弯了草叶轰然坠地摔开万道金光。”“\n上帝在交给我们这件事实的时候，已经顺便保证了它的结果，所以死是一件不必急于求成的事，死是一个必然会降临的节日。\n剩下的就是怎样活的问题了。这却不是在某一个瞬间就能完全想透的，不是能够一次性解决的事，怕是活多久就要想它多久了，就像是伴你终生的魔鬼或恋人。\n看来差别永远是要有的。看来就只好接受苦难——人类的全部剧目需要它，存在的本身需要它。看来上帝又一次对了。\n就命运而言，休论公道。\n其实总共只有三个问题交替着来骚扰我，来陪伴我。第一个是要不要去死，第二个是为什么活，第三个，我干吗要写作。\n人为什么活着？因为人想活着，说到底是这么回事，人真正的名字叫做：欲望。\n可我为什么还想活呢？因为你还想得到点儿什么，你觉得你还是可以得到点儿什么的，比如说爱情，比如说价值感之类，人真正的名字叫欲望。\n结果你又发表了几篇，并且出了一点儿小名，可这时你越来越感到恐慌。我忽然觉得自己活得像个人质，刚刚有点儿像个人了却又过了头，\n人都忍不住要为生存找一些牢靠的理由。你不担心你会枯竭了？我不知道，不过我想，活着的问题在死前是完不了的。\n就算是三个月！我平白地相信这样一个期限。\n多年以后才听一位无名的哲人说过：危卧病榻，难有无神论者。\n但在命运的混沌之点，人自然会忽略着科学，向虚暝之中寄托一份虔敬的祈盼。\n机会不在外面在心里，结婚的机会有可能在外边，可爱情的机会只能在心里\n那位台湾作家三毛说得对：爱如禅，不能说不能说，一说就错。\n别人告诉我，她昏迷前的最后一句话是：“我那个有病的儿子和我那个还未成年的女儿……”\n砌墙盖房，不单为避风雨，因为大家都有些秘密，其次当然还有一些钱财。秘密，不信你去慢慢推想，它是趣味的爹娘。\n千万别把运动和能量，以及和时空分割开来理解。我随即得了启发：也千万别把人和意义分割开来理解。不是人有欲望，而是人即欲望。\n如今想来，分明就是为了一个“轻”字：珍宝转眼被处理成垃圾，一段生命轻得飘散了，没有了，以为是什么原来什么也不是，轻易、简单、灰飞烟灭。一段生命之轻，威胁了生命全面之重，惶茫往灵魂里渗透：是不是生命的所有段落都会落此下场啊？人的根本恐惧就在这个“轻”字上，比如歧视和漠视，比如嘲笑，比如穷人手里作废的股票，比如失恋和死亡。轻，最是可怕。\n艰苦的生活需要希望，鲜活的生命需要爱情，数不完的日子和数不完的心事，都要诉说。\n也许是因为人缺了什么就更喜欢什么吧，我的两条腿一动不能动，却是个体育迷。\n上帝从来不对任何人施舍“最幸福”这三个字，他在所有人的欲望前面设下永恒的距离，公平地给每一个人以局限。\n我希望既有一个健美的躯体又有一个了悟人生意义的灵魂，我希望二者兼得。\n难道我们不该对灵魂有了残疾的人，比对肢体有了残疾的人，给予更多的同情和爱吗？\n既然是梦想不妨就让它完美些罢。何必连梦想也那么拘谨那么谦虚呢？\n有知识不能只是有对物的知识，而是得有对人的了悟。\n我们也完全可以把你以后的生活设计得无比顺利，但这样下去我们是不是绕了一圈又回到那不祥的阴影中去了？你将再没有企盼了吗？再没有新的追求了吗？那么你的心路是不是又在荒芜，于是你的幸福感又要老化、萎缩、枯竭了呢？\n只要你最最关心的是目的而不是过程你无论怎样都得落入绝境，只要你仍然不从目的转向过程你就别想走出绝境。\n一个只想（只想！）使过程精彩的人是无法被剥夺的，因为死神也无法将一个精彩的过程变成不精彩的过程，因为坏运也无法阻挡你去创造一个精彩的过程，相反你可以把死亡也变成一个精彩的过程，相反坏运更利于你去创造精彩的过程。\n过程！对，生命的意义就在于你能创造这过程的美好与精彩，生命的价值就在于你能够镇静而又激动地欣赏这过程的美丽与悲壮。\n有位大物理学家说过：“物理学不告诉我们世界是什么，而是告诉我们关于世界我们能够谈论什么。”\n历史难免是一部御制经典，文学要弥补它，所以看重的是那些沉默的心魂。\n佛嘛，心中无佛什么事都敢干。\n丑弱的人和圆满的神之间，是信者永远的路。","title":"我与地坛"},{"content":"最近接手公司一个视频相关项目, 也是使用ffmpeg工具. 需要快速了解下.\n概念 码率, 帧率, 文件大小 帧率(frame rate) : 视频一秒中有多少帧画面(frames per second, fps), 决定视频流畅度.\ninterlaced: 古代黑白相机的交错扫描呈现, 描述单位i : 50i progressive: 现代整页整页呈现, 描述单位p: 60p 码率(bit rate) :视频一秒中有多少位, 决定视频的质量\nABR: 平均码率 CBR: 常量码率 VBR: 动态码率 文件大小 = 视频文件 + 音频文件\n视频文件 = 码率 * 时间(s) / 8 音频文件 = 码率 * 时间(s) / 8\n文件格式 不同的视频文件类型, 用户存储特定的数据流( 在 ffmpeg 中称为 containers) 可以存储声音或者视频数据.\n相关缩写 encoding (E) decoding (D) video (V) audio (A) subtitles (S) 文件元数据 metadata 描述媒体文件自身的信息, 比如:\n1 2 3 4 5 6 7 8 9 10 Metadata: publisher : Ninja Tune track : 1 album : Ninja Tuna artist : Mr. Scruff album_artist : Mr. Scruff title : Kalimba genre : Electronic composer : A. Carthy and A. Kingslow date : 2008 声音 数字音频是通过对声音的模拟信息, 抽样且用数据信号表示.\n音频使用 bit depths 来表示声音的解析度:\n8bit, 12bit, 14bit \u0026hellip;\n声音的样本频率用 Hz 表示\n8000Hz, 11025Hz, 16000Hz \u0026hellip;\nFFmpeg 其他套件 ffplay 播放器 ffprobe 查看媒体文件的信息 ffserver 流服务器 使用 通用参数 -i 输入源, 可以是文件也可以是 url\n-vf option for video filters -af option for audio filters.\n-filter_complex 当多个输入源的时候使用\n-y 输出文件会强制覆盖已经存在的文件\n帮助 1 2 3 4 5 \u0026#34; 查看支持格式 ffmpeg -formats \u0026#34; 编解码器 ffmpeg -codecs 调整帧率 1 ffmpeg -i input.avi -r 30 output.mp4 调整码率 1 ffmpeg -i input.avi -b:v 1500k output.mp4 缩放视频大小 s : w x h 参数 宽乘以高 1 2 3 4 5 \u0026#34; 缩小分辨率 ffmpeg -i input.avi -s 640x480 output.avi \u0026#34; 扩大分辨率 ffmpeg -i input.mpg -vf scale=iw/PHI:ih/PHI output.mp4 旋转, 翻转 旋转\n1 ffmpeg -i CMYK.avi -vf transpose=2 CMYK_transposed.avi 竖直翻转\n1 ffmpeg -i meta.mp4 -vf vflip output_flip.mp4 裁切 裁切视频的画中画, 裁切视频的中心 1/2 的视频\n1 ffmpeg -i input.avi -vf crop=iw/2:ih/2 output.avi 模糊化 模糊化\n1 ffmpeg -i input.mpg -vf boxblur=1.5:1 output.mp4 锐化\n1 ffmpeg -i input -vf unsharp output.mp4 叠加 1 ffmpeg -i input1 -i input2 -filter_complex overlay=x:y output 裁剪 获取一个时间段内的音频 -t 参数为秒\n1 ffmpeg -i input.mp4 -t 180 output_3_min.mp4 --ss 设置开始时间点 ( seek from start, 从视频开始过多少秒开始操作)\n1 2 \u0026#34; 直接截断开头3分钟 ffmpeg -i input.mp4 -ss 180 output_without_start_3.mp4 截取某一段时间视频\n1 2 \u0026#34; 截取第4分钟, 一分钟视频 ffmpeg -i input.mp4 -ss 180 -t 60 clip_4th_min.mp4 图片操作 从视频中截取某一帧\n1 ffmpeg -i videoclip.avi -ss 01:23:45 image.jpg 翻转图片\n1 2 3 4 5 ffmpeg -i orange.jpg -vf hflip orange_hflip.jpg ffmpeg -i orange.jpg -vf vflip orange_vflip.jpg \u0026#34; transpose [0, 1, 2, 3] ffmpeg -i image.png -vf transpose=1 image_rotated.png 转换图片格式\n1 ffmpeg -i illustration.png illustration.jpg 格式转化 格式转化流程:\nDemuxer (分解复用) : 将合成信号恢复成原本独立的信号数据 Decoder (解码器) : 解码 Encoder (编码器) : 编码 Muxer ( _ ): 将多个信号数据合并\n1 2 3 4 ffmpeg -y -i input.avi output.mp4 \u0026#34; 改变格式, 但不更改编解码方式 ffmpeg -i input.avi -q 1 -c copy output.mov 混音 将两个声合成一个文件\n1 ffmpeg -i demo.mp3 -i louder_sound.aac -filter_complex amix=inputs=2 sounds.wav 加强耳机的立体声效果\n1 ffmpeg -i music.mp3 -af earwax -q 1 music_headphones.mp3 参考 FFmpeg Basics 2012 by Frantisek Korbel ","permalink":"https://ynikl.github.io/blog/ffmpeg-basics/","summary":"最近接手公司一个视频相关项目, 也是使用ffmpeg工具. 需要快速了解下.\n概念 码率, 帧率, 文件大小 帧率(frame rate) : 视频一秒中有多少帧画面(frames per second, fps), 决定视频流畅度.\ninterlaced: 古代黑白相机的交错扫描呈现, 描述单位i : 50i progressive: 现代整页整页呈现, 描述单位p: 60p 码率(bit rate) :视频一秒中有多少位, 决定视频的质量\nABR: 平均码率 CBR: 常量码率 VBR: 动态码率 文件大小 = 视频文件 + 音频文件\n视频文件 = 码率 * 时间(s) / 8 音频文件 = 码率 * 时间(s) / 8\n文件格式 不同的视频文件类型, 用户存储特定的数据流( 在 ffmpeg 中称为 containers) 可以存储声音或者视频数据.\n相关缩写 encoding (E) decoding (D) video (V) audio (A) subtitles (S) 文件元数据 metadata 描述媒体文件自身的信息, 比如:","title":"FFmpeg 基本使用"},{"content":"操作 演进 加锁后进程挂掉了 加锁成功之后, 进程挂掉了没有进行解锁操作. 导致进入死锁状态.\n引入 expire 设置超时时长, 自动释放 key\n1 2 3 4 5 6 7 8 \u0026gt; setnx lock:key true \u0026gt; OK \u0026gt; expire lock:key 5 \u0026#34; ... do something critical ... \u0026gt; del lock:codehole 加锁动作 到 expire 之间挂掉了 redis 2.8 之后支持 set 拓展指令\n1 \u0026gt; set lock:key true ex 5 nx 加锁互斥锁, 并同时设置超时时长\n执行超时, 被其他进程获取到了锁 加锁之后, 本身进程执行时间超过了预先设置的 expire 的时间. 就会导致锁被提前释放.\n解决方案:\n尽量不要用与锁住时间教长的任务, 尝试缩小锁定的\u0026quot;关键区域\u0026quot; 续锁 (会使客户端负责化) : 起一个支线进程, 定期(在超时时间内) 检查锁和value(保证是自己的锁), 重新设置超时时间 执行超时, 被其他进程获取到了锁之后, 超时进程误删其他进程的锁 Redis 的分布式锁不能解决超时问题，如果在加锁和释放锁之间的逻辑执行的太长，以至 于超出了锁的超时限制，就会出现问题。因为这时候锁过期了，第二个线程重新持有了这把锁， 但是紧接着第一个线程执行完了业务逻辑，就把锁给释放了，第三个线程就会在第二个线程逻 辑执行完之间拿到了锁。 \u0026ndash; Redis深度历险\n解决方案: 给加锁的 key 设置随机数的value, 删除之前先匹配是否一致再删除\n匹配和删除动作之间的原子性可以用 Lua 脚本保证\n1 2 3 4 5 6 # delifequals if redis.call(\u0026#34;get\u0026#34;,KEYS[1]) == ARGV[1] then return redis.call(\u0026#34;del\u0026#34;,KEYS[1]) else return 0 end 可重入锁 利用线程的本地变量(Threadloacl), 维护锁的持有计数, 实现支持多次加锁, 多次解锁\n参考 Redis 深度历险 阿里二面：Redis分布式锁过期了但业务还没有执行完，怎么办 ","permalink":"https://ynikl.github.io/blog/redis-do-distributed-lock/","summary":"操作 演进 加锁后进程挂掉了 加锁成功之后, 进程挂掉了没有进行解锁操作. 导致进入死锁状态.\n引入 expire 设置超时时长, 自动释放 key\n1 2 3 4 5 6 7 8 \u0026gt; setnx lock:key true \u0026gt; OK \u0026gt; expire lock:key 5 \u0026#34; ... do something critical ... \u0026gt; del lock:codehole 加锁动作 到 expire 之间挂掉了 redis 2.8 之后支持 set 拓展指令\n1 \u0026gt; set lock:key true ex 5 nx 加锁互斥锁, 并同时设置超时时长\n执行超时, 被其他进程获取到了锁 加锁之后, 本身进程执行时间超过了预先设置的 expire 的时间. 就会导致锁被提前释放.\n解决方案:\n尽量不要用与锁住时间教长的任务, 尝试缩小锁定的\u0026quot;关键区域\u0026quot; 续锁 (会使客户端负责化) : 起一个支线进程, 定期(在超时时间内) 检查锁和value(保证是自己的锁), 重新设置超时时间 执行超时, 被其他进程获取到了锁之后, 超时进程误删其他进程的锁 Redis 的分布式锁不能解决超时问题，如果在加锁和释放锁之间的逻辑执行的太长，以至 于超出了锁的超时限制，就会出现问题。因为这时候锁过期了，第二个线程重新持有了这把锁， 但是紧接着第一个线程执行完了业务逻辑，就把锁给释放了，第三个线程就会在第二个线程逻 辑执行完之间拿到了锁。 \u0026ndash; Redis深度历险","title":"Redis 用于做分布式锁"},{"content":"CI 自动化发布流程 可重复 可快速回滚 发布流程快速 在合并的时候可以对代码进行快速验证 CD 部署流程平台化 一键部署 总结 所谓的 CI/CD 就是通过自动化操作, 比如自动化测试, 自动化部署. 使用项目拥有快速上线的能力 \u0026ndash; 可以快速验证, 快速回滚, 快速发布.\n","permalink":"https://ynikl.github.io/blog/ci-cd/","summary":"CI 自动化发布流程 可重复 可快速回滚 发布流程快速 在合并的时候可以对代码进行快速验证 CD 部署流程平台化 一键部署 总结 所谓的 CI/CD 就是通过自动化操作, 比如自动化测试, 自动化部署. 使用项目拥有快速上线的能力 \u0026ndash; 可以快速验证, 快速回滚, 快速发布.","title":"CI/CD"},{"content":"本想写一篇关于 golang 中 map 底层的文章， 但是发现已经了相当不错的文章 \u0026ndash; 字节跳动技术团队 - Golang 中 map 探究 这里只补充一下，缺少的 map 的删除操作\n内部数据结构 初始化 map 是一个有\u0026quot;包含内容\u0026quot;的数据结构, 使用之前需要提前初始化, 即调用make\n真正是调用源码是 runtime.makemap\n获取数据 删除 源码地址\n删除的关键代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // Only clear key if there are pointers in it. // # 当 Key 是指针类型的时候会去清空指针 if t.key.ptrdata != 0 { if goarch.PtrSize == 8 { *(*unsafe.Pointer)(k) = nil } else { // There are three ways to squeeze at one ore more 32 bit pointers into 64 bits. // Just call memclrHasPointers instead of trying to handle all cases here. memclrHasPointers(k, 8) } } e := add(unsafe.Pointer(b), dataOffset+bucketCnt*8+i*uintptr(t.elemsize)) // # 当 Value 为指针类型的时候, 指针为空, 解除引用 -\u0026gt; GC if t.elem.ptrdata != 0 { memclrHasPointers(e, t.elem.size) } else { memclrNoHeapPointers(e, t.elem.size) } // # 讲 hash 值标记为空 b.tophash[i] = emptyOne 上述删除代码操作现象\n当map的value类型中包含引用类型, 删除对应的key之后, 经过GC就会释放占用的内存 当map的value 类型不包含引用类型, 删除对应的key之后, GC无法释放类型 可以查看我自己的实验结果 {{}}\nhttps://ynikl.github.io/blog/golang-memory-analyze-with-runtime/ 扩容 参考 Golang 中 map 探究\n","permalink":"https://ynikl.github.io/blog/golang-map/","summary":"本想写一篇关于 golang 中 map 底层的文章， 但是发现已经了相当不错的文章 \u0026ndash; 字节跳动技术团队 - Golang 中 map 探究 这里只补充一下，缺少的 map 的删除操作\n内部数据结构 初始化 map 是一个有\u0026quot;包含内容\u0026quot;的数据结构, 使用之前需要提前初始化, 即调用make\n真正是调用源码是 runtime.makemap\n获取数据 删除 源码地址\n删除的关键代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // Only clear key if there are pointers in it. // # 当 Key 是指针类型的时候会去清空指针 if t.key.ptrdata != 0 { if goarch.","title":"Golang Map 介绍"},{"content":"我觉得人生活着没有意义，但是我又为什么还活着呢？今天， 刚好看到了史铁生的《我与地坛》里面给了我答案\n可我为什么还想活呢? 因为你还想得到点儿什么, 你觉得你还是可以得到点儿什么的, 比如说爱情, 比如说价值感之类的, 人真正的名字叫欲望\n","permalink":"https://ynikl.github.io/posts/the-meaning-of-living/","summary":"我觉得人生活着没有意义，但是我又为什么还活着呢？今天， 刚好看到了史铁生的《我与地坛》里面给了我答案\n可我为什么还想活呢? 因为你还想得到点儿什么, 你觉得你还是可以得到点儿什么的, 比如说爱情, 比如说价值感之类的, 人真正的名字叫欲望","title":"活着的意义"},{"content":"概括 我为什么要读这本书? Youtuber 推荐, 好奇金融相关的知识\n这本书怎样影响了我? 不要轻易地去触碰股市, 直到我真正的理解它.\n书中的三句精华句子? 一个投资者如果想成功，必须将两种能力结合在一起，一是判断优秀企业的能力，一是将自己的思维和行为与市场中弥漫的极易传染的情绪隔离开来的能力 他们懂什么并不重要，更重要的是，他们知道自己不懂什么。一个投资者只要做出为数有限的正确的事，就可以避免犯重大错误 活跃股票的交易成本非常高，经常能达到一家上市公司净利润的10%或更多。 三句话总结本书 投资的时候要看重的公司的内在价值而不是市场先生的报价 减少交易次数 努力地去看透事情的本质 书摘 笔记摘自\n巴菲特致股东的信：投资者和公司高管教程（原书第4版）\n【美】沃伦E.巴菲特\n关于巴菲特一生的成功秘诀，已经有无数人做出了评价，我个人认为可以归结为八个字：与时俱进，良性循环\n“与坏人打交道，做成一笔好生意，这样的事情，我从来没有遇见过。”巴菲特的这句名言令人深思\n从别人的故事里，找到自己的人生启发，这就是读书的意义所在\n广受尊重的投资家兼作家菲尔·费雪（即菲利普·费雪，Phil Fisher）曾经将公司吸引股东的策略比喻为餐馆吸引顾客的策略。 一家餐馆可以定位于特定的食客阶层——喜欢快餐的，喜欢优雅的，喜欢东方食品的等。通过风格的定位，最终获得一批志同道合的拥趸。如果餐馆的服务、菜单、价格水平策略得当，那么这批客户会成为固定的回头客。但如果餐馆经常转换风格，那么这批快乐而稳定的客户就会消失。如果餐馆的定位在法式美食和外卖鸡之间摇摆不定，那么一定会令回头客感到困惑，最终离开。\n应该可以直接与公司CEO进行沟通，得到他现在和未来如何对企业进行估值的看法\n如果我们对一只股票有良好的长期预期，那么短期的价格波动对我们来说毫无意义，除非有人报给我们一个非常有吸引力的价格。\n芒格和我无法向你承诺结果。但我们可以保证，只要你是我们的合伙人，在任何时段，你的金融资产和我们自己的资产将完全保持一致的成长\n为了达成目标，我们的首选是直接持有一系列多元化的企业，从中获得稳定的现金流和持续的高于市场平均水平的资本回报\n从整体和长期来看，我们希望那些未体现的盈利，通过资本增值的形式体现在我们的内在价值里\n巴菲特以及伯克希尔避免进行预测，因为这是一种糟糕的管理习惯，经常会导致管理人粉饰报表\n但是任何短期的压力都不应以牺牲长期竞争力为代价\n一场大会的毫无建树是由于参与股东们更在意自己在台上的表现，而不是关心公司运营的状况\n在伯克希尔公司，我们通常会换位思考，设想如果我们自己处于股东的位置，应该得到什么样的信息，我们会从这样的角度向股东披露完整的报告\n这种打假活动针对的目标是公司信息披露行为中的“选择性披露”，近些年来，这种选择性披露行为像癌症一样蔓延。的确，信息的选择性披露已经成为大型公司的一种标准化的行为\nCEO们预测公司增长速度，是骗人的和危险的。当然，他们是被分析师和公司自己的投资者关系部门怂恿裹挟着这么做。但他们应该拒绝，因为这样预测多了会招致麻烦。\n厨房里如果有蟑螂，绝不可能只有一只\n在一个由一群和事佬组成的董事会里，不太可能会有人提出更换CEO的提议。同样，也不可能对CEO提议的公司并购活动提出质疑\n毕竟，没有人会喜欢去洗外面租来的车\n除了要维持独立性，董事们也必须具备丰富的商业经验，以股东利益为导向，以及在公司拥有真正的利益\n在收购之前，他们就已是商界的管理明星，已经证明了自己在各自领域中的才华，我们的主要贡献就是让他们自由发挥天分，不给他们添乱\n“如果我们雇用的都是比我们矮的人，我们将成为一家侏儒公司；但如果我们雇用的都是比我们高的人，我们会成为一家巨人公司。”\n我们希望我们的经理人队伍考虑什么是重要的，而不是考虑什么被认为是重要的。\n当投资的时候，我们将自己视为企业分析师——而不是市场分析师，不是宏观经济分析师，甚至不是证券分析师。\n他说你应该将市场报价想象为一个名叫“市场先生”的人\n如果你不懂得你的公司，不能比市场先生更准确地评估你的公司，你就不要参与这场游戏\n就像人们打牌时说的：“如果玩了30分钟，你还不知道谁是倒霉蛋，有可能就是你。\n一个投资者如果想成功，必须将两种能力结合在一起，一是判断优秀企业的能力，一是将自己的思维和行为与市场中弥漫的极易传染的情绪隔离开来的能力\n有些人会在不同市场间倒手，意图赚取差价。你不必感到惊讶，从业者为此选了一个法语词汇：套利。\n如果需要同时做很多事情，就像同时将很多烙铁放在火中，人们就必须花大量的时间，既要监控交易的过程，又要监控市场股价的波动。这不是芒格和我所想的生活模式。（如果只是为了赚钱而整天盯着股票行情，这种生活有什么意义可言？\n在完全忽视股价的情况下，一家拥有子公司的母公司，如果子公司长期表现优异，母公司是不可能出售子公司的。“为什么要卖出？”CEO会问，“难道要我卖出皇冠上的宝石吗\n应该评估是否在其预期的持股期间，其投资的税后收益总和（包括他卖出所得）会带给他至少在投资开始之初同等的购买力，加上合理的利率因素\n一个视力平平的人，没有必要在干草堆里寻找绣花针。\n我们的座右铭是：“如果你一开始就取得了成功，那么，不必再做测试。\n很多大名鼎鼎的基金管理人现在关注的是其他基金管理人未来几天干什么，而不是关注企业未来几年干什么。对于他们而言，股票仅仅是游戏中的筹码，就像大富翁游戏中，如同顶针和熨斗一样的道具\n我们的目标是发现那些价格合理的杰出公司，而不是价格便宜的平庸公司\n最值得拥有的公司是，那些在一个一直延伸的时期周期里，可以不断利用增量资本获得很高回报率的公司\n他们懂什么并不重要，更重要的是，他们知道自己不懂什么。一个投资者只要做出为数有限的正确的事，就可以避免犯重大错误\n二级市场经常周期性地被大量傻瓜所主导，会持续设定一个“清算”价格。无论这个价格多么愚蠢，它是股票或债券持有者需要或希望卖出的价格，总是有这样的机会出现\n无论什么样的天才或努力，有些事情总是需要时间。即便你能让九个女人同时怀孕，也不可能让她们在一个月的时间里生出小宝宝。）\n但我更喜欢一个确定的良好结果，而不是一个期望的伟大结果。\n在企业内部，有一种看不见的力量足以压倒一切，我们可以称其为“惯性驱使”或“机构强迫症”\n如果我们在资产负债表上使用适当的负债，可以在安全的前提下增加一些盈利\n信用就像氧气。此二者，在充足的时候，人们不会注意到它们的存在；当它们消失的时候，人们才会发现它们的重要性\n当年花1美元可以买到的东西，今天要花7美元以上。因此，即便一个不用交税的机构，也必须在同期从债券上获得4.3%的年化利息收入，才能维持其购买力不变。如果这些机构的管理人将任何的利息部分视为“收入”的话，他们一定是在和自己开玩笑\n即使在最混乱的经济环境中，美国国债也是唯一靠得住的流动性良好的投资对象\n大多数人宁愿去死，也不愿意思考。很多人就是这样\n巨大的负债可以让管理层前所未有地专注工作，就像在汽车方向盘上装一把匕首，可以提高司机的注意力一样\n衍生品还可能造成连锁反应式的风险，因为很多保险公司或再保险公司将它们的风险分散给其他保险公司\n“世俗的智慧告诉我们，循规蹈矩的失败，可能比标新立异的成功，更有利于保全名声\n这场愚蠢游戏的核心是，人们通常都认为房屋的价格肯定会随着时间而上升，任何的下降都是可以忽略不计的。这个前提几乎贯穿于任何房屋的交易行为和交易价格中\n借贷者将钱借给那些以他们的收入根本还不起钱的人，借款者很愉快地签署这些合同。借贷双方都寄希望于“房价的上升”，以弥补这项“不可能完成的任务”所带来的缺口。\n.\u0026gt; 但是，居住和使用应作为买房时的首要动机，而不应该将购房视作升值盈利或再融资的手段。同时，购房时应该考虑与收入相匹配，量力而行。\n投资者的整体回报，随着交易频率的上升而减少。\n道琼斯在20世纪的100年中，从65.73点上升到11497.12点，相当于年化复合回报率5.3%（当然，投资者在此期间还能收到分红。）在接下来21世纪的100年中，为了达到同样的回报率，道琼斯指数必须——你需要深呼一口气——达到2011011.23点。也就是说，到21世纪末，道琼斯将以200万点收盘，但看看本世纪初的前六年，道琼斯指数几乎原地没动。\n活跃股票的交易成本非常高，经常能达到一家上市公司净利润的10%或更多。这实际上是对股东们征收的重税，虽然只是一个人决定“换个位子”，虽然支付的对象是金融机构，而不是华盛顿\n并不是所有的收益都是在同等的情况下创造的。在很多公司，尤其是那些具有高资产/利润比特征的公司里，通货膨胀会侵蚀财报中显示的部分甚至全部收益。这个会被通胀侵蚀的收益部分，我们称之为“受限定收益”，不能被用于派发红利，以利于公司保持其经济竞争地位。\n如果再投资能获得高回报，就应该保留收益进行再投资；如果回报低下，就应该分红\n除非它们经历了极其巨大的惊人的单位成长，杰出的公司一定会产生大量的富余现金。如果公司将这些收益投在那些回报低下的业务，公司的整体留存资本的表现可能依然会很卓越，因为，核心业务部分的回报非凡。这就像高尔夫比赛中，职业选手和业余选手的混合赛，即便队伍中的业余选手都是没有希望的笨蛋，但整个球队的表现还是不错，因为得分主要来源于其中的职业选手\n如果一家公司的股票价格远低于其内在价值，通常在这个时候，回购最有意义\n首先，一家公司有充足的现金以备运营和流动性之需；其次，股价远低于保守计算的内在价值\n以及那些冲着分拆预期而来的买家，毫无疑问将会稀释现有股东群体的质量\n过度活跃的股市是企业的扒手。\n我们采取的方式就像一个人寻找合适的另一半一样：保持积极、兴趣、开放的心态，但不能着急\n桑塔亚娜（Santayana）曾说：“当你忘却了目标，狂热会让你付出很多倍的努力\n我们试图避免一些小动作——“如果一些事情不值得做，也就不值得做好。\n诺亚法则：重要的是建造方舟，而不是预测大雨\n我们喜欢与那些热爱自家公司的人做生意，而不仅仅是因为喜欢钱（虽然，我们也可以理解他为何喜欢）。当这种附加的情感存在时，它是一个信号，让人可以发现企业所具有的重要品质：不做假账，以产品为荣，尊重客户，以及一群忠诚的、有强烈方向感的人。与此相反的情况，也是真的。当\n","permalink":"https://ynikl.github.io/books/%E5%B7%B4%E8%8F%B2%E7%89%B9%E8%87%B4%E8%82%A1%E4%B8%9C%E7%9A%84%E4%BF%A1/","summary":"概括 我为什么要读这本书? Youtuber 推荐, 好奇金融相关的知识\n这本书怎样影响了我? 不要轻易地去触碰股市, 直到我真正的理解它.\n书中的三句精华句子? 一个投资者如果想成功，必须将两种能力结合在一起，一是判断优秀企业的能力，一是将自己的思维和行为与市场中弥漫的极易传染的情绪隔离开来的能力 他们懂什么并不重要，更重要的是，他们知道自己不懂什么。一个投资者只要做出为数有限的正确的事，就可以避免犯重大错误 活跃股票的交易成本非常高，经常能达到一家上市公司净利润的10%或更多。 三句话总结本书 投资的时候要看重的公司的内在价值而不是市场先生的报价 减少交易次数 努力地去看透事情的本质 书摘 笔记摘自\n巴菲特致股东的信：投资者和公司高管教程（原书第4版）\n【美】沃伦E.巴菲特\n关于巴菲特一生的成功秘诀，已经有无数人做出了评价，我个人认为可以归结为八个字：与时俱进，良性循环\n“与坏人打交道，做成一笔好生意，这样的事情，我从来没有遇见过。”巴菲特的这句名言令人深思\n从别人的故事里，找到自己的人生启发，这就是读书的意义所在\n广受尊重的投资家兼作家菲尔·费雪（即菲利普·费雪，Phil Fisher）曾经将公司吸引股东的策略比喻为餐馆吸引顾客的策略。 一家餐馆可以定位于特定的食客阶层——喜欢快餐的，喜欢优雅的，喜欢东方食品的等。通过风格的定位，最终获得一批志同道合的拥趸。如果餐馆的服务、菜单、价格水平策略得当，那么这批客户会成为固定的回头客。但如果餐馆经常转换风格，那么这批快乐而稳定的客户就会消失。如果餐馆的定位在法式美食和外卖鸡之间摇摆不定，那么一定会令回头客感到困惑，最终离开。\n应该可以直接与公司CEO进行沟通，得到他现在和未来如何对企业进行估值的看法\n如果我们对一只股票有良好的长期预期，那么短期的价格波动对我们来说毫无意义，除非有人报给我们一个非常有吸引力的价格。\n芒格和我无法向你承诺结果。但我们可以保证，只要你是我们的合伙人，在任何时段，你的金融资产和我们自己的资产将完全保持一致的成长\n为了达成目标，我们的首选是直接持有一系列多元化的企业，从中获得稳定的现金流和持续的高于市场平均水平的资本回报\n从整体和长期来看，我们希望那些未体现的盈利，通过资本增值的形式体现在我们的内在价值里\n巴菲特以及伯克希尔避免进行预测，因为这是一种糟糕的管理习惯，经常会导致管理人粉饰报表\n但是任何短期的压力都不应以牺牲长期竞争力为代价\n一场大会的毫无建树是由于参与股东们更在意自己在台上的表现，而不是关心公司运营的状况\n在伯克希尔公司，我们通常会换位思考，设想如果我们自己处于股东的位置，应该得到什么样的信息，我们会从这样的角度向股东披露完整的报告\n这种打假活动针对的目标是公司信息披露行为中的“选择性披露”，近些年来，这种选择性披露行为像癌症一样蔓延。的确，信息的选择性披露已经成为大型公司的一种标准化的行为\nCEO们预测公司增长速度，是骗人的和危险的。当然，他们是被分析师和公司自己的投资者关系部门怂恿裹挟着这么做。但他们应该拒绝，因为这样预测多了会招致麻烦。\n厨房里如果有蟑螂，绝不可能只有一只\n在一个由一群和事佬组成的董事会里，不太可能会有人提出更换CEO的提议。同样，也不可能对CEO提议的公司并购活动提出质疑\n毕竟，没有人会喜欢去洗外面租来的车\n除了要维持独立性，董事们也必须具备丰富的商业经验，以股东利益为导向，以及在公司拥有真正的利益\n在收购之前，他们就已是商界的管理明星，已经证明了自己在各自领域中的才华，我们的主要贡献就是让他们自由发挥天分，不给他们添乱\n“如果我们雇用的都是比我们矮的人，我们将成为一家侏儒公司；但如果我们雇用的都是比我们高的人，我们会成为一家巨人公司。”\n我们希望我们的经理人队伍考虑什么是重要的，而不是考虑什么被认为是重要的。\n当投资的时候，我们将自己视为企业分析师——而不是市场分析师，不是宏观经济分析师，甚至不是证券分析师。\n他说你应该将市场报价想象为一个名叫“市场先生”的人\n如果你不懂得你的公司，不能比市场先生更准确地评估你的公司，你就不要参与这场游戏\n就像人们打牌时说的：“如果玩了30分钟，你还不知道谁是倒霉蛋，有可能就是你。\n一个投资者如果想成功，必须将两种能力结合在一起，一是判断优秀企业的能力，一是将自己的思维和行为与市场中弥漫的极易传染的情绪隔离开来的能力\n有些人会在不同市场间倒手，意图赚取差价。你不必感到惊讶，从业者为此选了一个法语词汇：套利。\n如果需要同时做很多事情，就像同时将很多烙铁放在火中，人们就必须花大量的时间，既要监控交易的过程，又要监控市场股价的波动。这不是芒格和我所想的生活模式。（如果只是为了赚钱而整天盯着股票行情，这种生活有什么意义可言？\n在完全忽视股价的情况下，一家拥有子公司的母公司，如果子公司长期表现优异，母公司是不可能出售子公司的。“为什么要卖出？”CEO会问，“难道要我卖出皇冠上的宝石吗\n应该评估是否在其预期的持股期间，其投资的税后收益总和（包括他卖出所得）会带给他至少在投资开始之初同等的购买力，加上合理的利率因素\n一个视力平平的人，没有必要在干草堆里寻找绣花针。\n我们的座右铭是：“如果你一开始就取得了成功，那么，不必再做测试。\n很多大名鼎鼎的基金管理人现在关注的是其他基金管理人未来几天干什么，而不是关注企业未来几年干什么。对于他们而言，股票仅仅是游戏中的筹码，就像大富翁游戏中，如同顶针和熨斗一样的道具\n我们的目标是发现那些价格合理的杰出公司，而不是价格便宜的平庸公司\n最值得拥有的公司是，那些在一个一直延伸的时期周期里，可以不断利用增量资本获得很高回报率的公司\n他们懂什么并不重要，更重要的是，他们知道自己不懂什么。一个投资者只要做出为数有限的正确的事，就可以避免犯重大错误\n二级市场经常周期性地被大量傻瓜所主导，会持续设定一个“清算”价格。无论这个价格多么愚蠢，它是股票或债券持有者需要或希望卖出的价格，总是有这样的机会出现\n无论什么样的天才或努力，有些事情总是需要时间。即便你能让九个女人同时怀孕，也不可能让她们在一个月的时间里生出小宝宝。）\n但我更喜欢一个确定的良好结果，而不是一个期望的伟大结果。\n在企业内部，有一种看不见的力量足以压倒一切，我们可以称其为“惯性驱使”或“机构强迫症”\n如果我们在资产负债表上使用适当的负债，可以在安全的前提下增加一些盈利\n信用就像氧气。此二者，在充足的时候，人们不会注意到它们的存在；当它们消失的时候，人们才会发现它们的重要性\n当年花1美元可以买到的东西，今天要花7美元以上。因此，即便一个不用交税的机构，也必须在同期从债券上获得4.3%的年化利息收入，才能维持其购买力不变。如果这些机构的管理人将任何的利息部分视为“收入”的话，他们一定是在和自己开玩笑\n即使在最混乱的经济环境中，美国国债也是唯一靠得住的流动性良好的投资对象\n大多数人宁愿去死，也不愿意思考。很多人就是这样\n巨大的负债可以让管理层前所未有地专注工作，就像在汽车方向盘上装一把匕首，可以提高司机的注意力一样\n衍生品还可能造成连锁反应式的风险，因为很多保险公司或再保险公司将它们的风险分散给其他保险公司","title":"巴菲特致股东的信"},{"content":"概览 Mysql 支持以下数据类型\n数字类型 串类型(字符和字节) 日期和时间 空间 JSON 数字类型 整数类型 Interger 类型 存储大小 bytes 其他别名 TinyInt 1 bool, boolean = tinyint(1) SmallInt 2 MediumInt 3 Int 4 BigInt 8 int(M) 表示显示宽度, 最大显示宽度为(255), M 与存储空间的大小无关. 空间大小由具体类型决定.\n如果具体数值达不到宽度, 左边就会用0值补齐至 M 位.\n浮点 ( Floating-Point ) 类型 存储 补充 范围 Float 4 bytes 单精度 Double 8 bytes 双精度 Float(p) p 表示小数点后的精度位数\nFloat(M, D) Mysql 语法: M表示总显示位数, D表示小数点后个数 \u0026ndash; 由Mysql自己做约分处理. Mysql 8.0 后废弃该语法.\n定点 ( Fixed-Point ) 用于需要准备保存字段数据, 如金钱相关字段.\nDecimal(M, D) 其中, M 表示字段中有效数据个数, D 表示小数点后个数\nDecimal(5,2) 的精度为 -999.99 - 999.99\n位 ( Bit-Value ) BIT(M) 用于存储位值, M范围(1-64), 当存储的数值小于 M, 会进行左边补0\nexample\n1 2 3 4 mysql\u0026gt; CREATE TABLE t (b BIT(8)); mysql\u0026gt; INSERT INTO t SET b = b\u0026#39;11111111\u0026#39;; mysql\u0026gt; INSERT INTO t SET b = b\u0026#39;1010\u0026#39;; mysql\u0026gt; INSERT INTO t SET b = b\u0026#39;0101\u0026#39;; 1 2 3 4 5 6 7 8 mysql\u0026gt; SELECT b+0, BIN(b), OCT(b), HEX(b) FROM t; +------+----------+--------+--------+ | b+0 | BIN(b) | OCT(b) | HEX(b) | +------+----------+--------+--------+ | 255 | 11111111 | 377 | FF | | 10 | 1010 | 12 | A | | 5 | 101 | 5 | 5 | +------+----------+--------+--------+ 参考 Mysql 8.0 官方文档\n","permalink":"https://ynikl.github.io/blog/mysql-data-type-numbers/","summary":"概览 Mysql 支持以下数据类型\n数字类型 串类型(字符和字节) 日期和时间 空间 JSON 数字类型 整数类型 Interger 类型 存储大小 bytes 其他别名 TinyInt 1 bool, boolean = tinyint(1) SmallInt 2 MediumInt 3 Int 4 BigInt 8 int(M) 表示显示宽度, 最大显示宽度为(255), M 与存储空间的大小无关. 空间大小由具体类型决定.\n如果具体数值达不到宽度, 左边就会用0值补齐至 M 位.\n浮点 ( Floating-Point ) 类型 存储 补充 范围 Float 4 bytes 单精度 Double 8 bytes 双精度 Float(p) p 表示小数点后的精度位数\nFloat(M, D) Mysql 语法: M表示总显示位数, D表示小数点后个数 \u0026ndash; 由Mysql自己做约分处理. Mysql 8.0 后废弃该语法.\n定点 ( Fixed-Point ) 用于需要准备保存字段数据, 如金钱相关字段.","title":"Mysql- 数据类型 - 数字"},{"content":"概览 Mysql 支持以下数据类型\n数字类型 串类型(字符和字节) 日期类型 空间 JSON 日期类型 Mysql 支持的数据类型\nDATE TIME DATETIME TIMESTAMP YEAR Date 只存储日期数据, 不包含时间. YYYY-MM-DD, 范围是从 \u0026lsquo;1000-01-01\u0026rsquo; to \u0026lsquo;9999-12-31\u0026rsquo;\nDateTime 存储日期, 也存储时间 'YYYY-MM-DD hh:mm:ss'\n范围是从'1000-01-01 00:00:00\u0026rsquo; to \u0026lsquo;9999-12-31 23:59:59\u0026rsquo;\nTIMESTAMP 存储Unix时间戳数据 会受到服务器时区影响\u0026ndash; 存储的时候转化成标准的Unix时间戳(0时区), 取数据时反之 时区环境变量设置 范围 \u0026lsquo;1970-01-01 00:00:01\u0026rsquo; UTC to \u0026lsquo;2038-01-19 03:14:07\u0026rsquo; UTC.\n相关函数:\nFROM_UNIXTIME 把 Unix 时间戳转化成日期 UNIX_TIMESTAMP 把日期转化成 Unix 时间戳 YEAR 显示形式 YYYY, 可选显示位数YYYY(M)\n默认4位显示 \u0026lsquo;1991\u0026rsquo; TIME 只有时间部分,没有日期部分 hh:mm:ss, 范围从 \u0026lsquo;-838:59:59\u0026rsquo; 到 \u0026lsquo;838:59:59\u0026rsquo;\n自动更新 DateTime 和 Timestamp 在 Mysql 8.0, 支持自动初始化和当数据更新时自动更新.\n1 2 3 4 CREATE TABLE t1 ( ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, dt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP ); 存储毫秒级别的时间 支持存储毫秒级别的时间类型有:\nTIME DATETIME TIMESTAMP 声明模式为 type_name(fsp), fsp 为0-6, 表示小数点后个数\n1 2 3 4 CREATE TABLE fractest( c1 TIME(2), c2 DATETIME(2), c3 TIMESTAMP(2) ); INSERT INTO t1 VALUES (\u0026#39;17:51:04.777\u0026#39;, \u0026#39;2018-09-08 17:51:04.777\u0026#39;, \u0026#39;2018-09-08 17:51:04.777\u0026#39;); 存储空间 | 类型 | 大小 | 其他 | | Year | 1 bytes | | | DATE | 3 bytes | | | Time | 3 bytes | 5.6.4 之后支持小数点 | | Timestamp | 4 bytes | 同上 | | DateTime | 8 bytes | 同上 |\n小数点精度的位数\n| 0 | 0 bytes | | 1,2 | 1 bytes | | 3,4 | 2 bytes | | 4,5 | 3 bytes |\n使用推荐 高性能 Mysql 里面总结 DateTime 和 Timestamp 的使用选择:\n非特殊情况, 尽量使用 timestamp, 因为空间效率更高. Timestamp 不会存储时区, 而 Datetime 会存储时区 Timestamp 做为索引的话会更加轻量 Timestamp 和 Int 的使用选择\n没有必要用 INT 存储, 保存时间戳. 因为没有任何收益. Timestamp 可以支持数据变更时自动更新. 相关的一些函数 FROM_UNIXTIME 可以将 Unix 时间戳转化成日期 参考 Mysql 8.0 官方文档 Mysql date 内部数据结构 [高性能 Mysql]\n","permalink":"https://ynikl.github.io/blog/mysql-data-type-date/","summary":"概览 Mysql 支持以下数据类型\n数字类型 串类型(字符和字节) 日期类型 空间 JSON 日期类型 Mysql 支持的数据类型\nDATE TIME DATETIME TIMESTAMP YEAR Date 只存储日期数据, 不包含时间. YYYY-MM-DD, 范围是从 \u0026lsquo;1000-01-01\u0026rsquo; to \u0026lsquo;9999-12-31\u0026rsquo;\nDateTime 存储日期, 也存储时间 'YYYY-MM-DD hh:mm:ss'\n范围是从'1000-01-01 00:00:00\u0026rsquo; to \u0026lsquo;9999-12-31 23:59:59\u0026rsquo;\nTIMESTAMP 存储Unix时间戳数据 会受到服务器时区影响\u0026ndash; 存储的时候转化成标准的Unix时间戳(0时区), 取数据时反之 时区环境变量设置 范围 \u0026lsquo;1970-01-01 00:00:01\u0026rsquo; UTC to \u0026lsquo;2038-01-19 03:14:07\u0026rsquo; UTC.\n相关函数:\nFROM_UNIXTIME 把 Unix 时间戳转化成日期 UNIX_TIMESTAMP 把日期转化成 Unix 时间戳 YEAR 显示形式 YYYY, 可选显示位数YYYY(M)\n默认4位显示 \u0026lsquo;1991\u0026rsquo; TIME 只有时间部分,没有日期部分 hh:mm:ss, 范围从 \u0026lsquo;-838:59:59\u0026rsquo; 到 \u0026lsquo;838:59:59\u0026rsquo;","title":"Mysql- 数据类型 - 日期"},{"content":"简单分析下xorm 里面 session 和 slave 里面 close 的代码\n1 xorm.EngineGroup.Slave() Slave () 会直接返回 xorm.Engine对象（指代我们项目到数据库的逻辑连接（里面有tcp复用）） 如果这时候再调用 close 的会，会直接把 xorm.Engine 关闭（即数据库连接关闭）。 如果用这个 engine， 执行查询动作如 find， get时. 内部会有自动执行 NewSsession 和 Close, 所以不在需要手动调用close 1 xorm.EngineGroup.NewSsession() 会返回一个xorm.Session对象, 对应我们数据库操作中的\u0026quot;会话事务\u0026quot;, 是否自动提交之类选项.(未手动开始事务时,都是自动提交) 调用 close, 对清除 session 中未提交的事务和一些缓存的 sql 前置处理语句 对于普通 select 语句调不调用是没什么太大影响 (但是还是建议new之后调用close) ","permalink":"https://ynikl.github.io/blog/xorm-slave-newsseion/","summary":"简单分析下xorm 里面 session 和 slave 里面 close 的代码\n1 xorm.EngineGroup.Slave() Slave () 会直接返回 xorm.Engine对象（指代我们项目到数据库的逻辑连接（里面有tcp复用）） 如果这时候再调用 close 的会，会直接把 xorm.Engine 关闭（即数据库连接关闭）。 如果用这个 engine， 执行查询动作如 find， get时. 内部会有自动执行 NewSsession 和 Close, 所以不在需要手动调用close 1 xorm.EngineGroup.NewSsession() 会返回一个xorm.Session对象, 对应我们数据库操作中的\u0026quot;会话事务\u0026quot;, 是否自动提交之类选项.(未手动开始事务时,都是自动提交) 调用 close, 对清除 session 中未提交的事务和一些缓存的 sql 前置处理语句 对于普通 select 语句调不调用是没什么太大影响 (但是还是建议new之后调用close) ","title":"xorm 的 session 和 salve 的区别"},{"content":"想自己整理一篇基本的 make 指令用法, 突然发现 阮一峰大佬已经整理了一篇很完整的博客, 遂放弃.\n阮一峰文章地址\n如果不写 c, 主要理解就几个概念就可以使用了\ntarget 可以用来当作想要执行的命令集的名称 .PHONY: 可以用来声明命令集名称 recipes 实际执行的命令集合 介绍一下我自己的应用场景 我目前主力编程语言是 go, 我用的编辑器是 vim, 所以我基本就在 shell 里面完成编码任务.\ncase 1: 简化本地编译和测试, 自动做 setup 和 teardown\n当我想要尝试一下整个项目是否编译\n1 2 3 4 .PHONY: build build: go build . rm -rf [PROJECT NAME] 使用上面的 makefile, 我就只需要 make build, 就不用再删除编译出来文件. QAQ, 可以再加一些单元测试命令, 检测测试是否通过. 因为公司的项目, 在单测这方面做的不是很好, 我自己就是简单 build 一下\ncase 2: git 提交代码自动化操作\n当我想要把我代码推送到, 测试分支, 进行集成测试\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 .PHONY: dev ProjectName=\u0026#34;Your Project Name\u0026#34; TargetBranch=\u0026#34;Your want to merge branch\u0026#34; CurBranch=$(shell git branch --show-current) dev: go build . rm -f $(ProjectName) git add . git commit -m $(msg) git push git checkout ${DevBranch} git pull --rebase git merge ${CurBranch} -m \u0026#34;Merge branch \u0026#39;${CurBranch}\u0026#39; into ${DevBranch}\u0026#34; go build rm -f $(ProjectName) git push git checkout ${CurBranch} 简化 git 的操作流程, 现在只需要make dev就可以完成, 还可以在合并之前和之后增加测试, 我自己目前知识简单的 build 下而已 QAQ.\n","permalink":"https://ynikl.github.io/blog/makefile-basic-use/","summary":"想自己整理一篇基本的 make 指令用法, 突然发现 阮一峰大佬已经整理了一篇很完整的博客, 遂放弃.\n阮一峰文章地址\n如果不写 c, 主要理解就几个概念就可以使用了\ntarget 可以用来当作想要执行的命令集的名称 .PHONY: 可以用来声明命令集名称 recipes 实际执行的命令集合 介绍一下我自己的应用场景 我目前主力编程语言是 go, 我用的编辑器是 vim, 所以我基本就在 shell 里面完成编码任务.\ncase 1: 简化本地编译和测试, 自动做 setup 和 teardown\n当我想要尝试一下整个项目是否编译\n1 2 3 4 .PHONY: build build: go build . rm -rf [PROJECT NAME] 使用上面的 makefile, 我就只需要 make build, 就不用再删除编译出来文件. QAQ, 可以再加一些单元测试命令, 检测测试是否通过. 因为公司的项目, 在单测这方面做的不是很好, 我自己就是简单 build 一下\ncase 2: git 提交代码自动化操作\n当我想要把我代码推送到, 测试分支, 进行集成测试\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 .","title":"Make 的基本使用"},{"content":"公司刚好有一个项目要使用到 RabbitMQ, 本文是我自己了解学习 RabbitMQ 的记录.\n介绍一下 RabbitMQ Erlang 语言实现 AMQP (Advanced Message Queuing Protocal) 的消息中间件\n消息中间件的作用\n解耦: 可以不需要依赖下游的可用性, 提高单独项目的可用性. 冗余存储: 保存失败的消息 拓展性 削峰 缓冲 结构 涉及的名词简单解释\nProducer Consumer Broker: 服务节点 Queue: 内存存储消息数据的对象 Exchange: 选择器, 生产者投递消息后, 提交给交换器, 由交换器根据routingkey 和 bindingkey 决定投递到哪个队列 RoutingKey: 生产消息提供routingkey 给交换器用于指定要投递的队列 BindingKey: 交换器, 通过 bindingkey 与对应的队列关联起来 Connection: 客户端与 Broke 建立的 TCP 连接 Channel: 是建立在 Connection 上抽象的虚拟连接. 实现多线程可以 TCP 连接, 多个信道可能复用同一个 TCP 连接 交换器的类型\nfanout : 投递到所有队列 direct: 投递到 routingkey 和 bindingkey 匹配的 topic: direct 的拓展, 支持模糊匹配 headers : 性能差, 少用 消息投递流程:\n生产者连接到 Broker, 开启信道 生产者声明一个交换器 生产者声明一个队列 生产者通过路由键将交换器和队列绑定 生产者发送消息到 Broker 交换器根据接受对路由键匹配队列 投递到对应的消息队列 如果没有匹配的队列, 丢弃或者退回给生产者 消费者接受消息流程:\n建立连接, 开启信道 消费者向 Broker 发起消息请求 Broker 回应并返回消息 消费者发送确认 (ack) 接受到消息 关闭信道 关闭连接 AMQP 位于应用层的通信协议 ( 在 TCP 之上, 将数据填充到 TCP 中)\n几个基础的协议定义的操作\nProtocal Header 0-9-1 指定协议 Connection.Start Channel.Open Basic.Publish 推送消息 Channel.Close Connection.Close 部署 在你的机子上部署一个玩具吧\n采用 docker 部署 docker run -itd --name rabbitmq -p 5671:5671 -p 5672:5672 -p 4369:4369 -p 25672:25672 -p 15671:15671 -p 15672:15672 rabbitmq:management\n进入管理页面 访问 http://127.0.0.1:15672/\n登入 用户名: guest 密码: guest\n更多默认配置\n管理 进入交互 shell docker exec -it rabbitmq bash\n增加一个用户 rabbitmqctl add_user ian ian1234\n增加一个 vhost rabbitmqctl add_vhost playground\nvhost是什么? vhost (virtual host), 虚拟主机, 在实例间提供逻辑上的分离 \u0026ndash; 实现数据隔离. RabbitMQ 默认创建一个名为 \u0026ldquo;/\u0026rdquo; 的 vhost\n查看 vhost rabbitmqctl list_vhosts\n设置权限 rabbitmqctl set_permissions --vhost playground ian \u0026quot;.*\u0026quot; \u0026quot;.*\u0026quot; \u0026quot;.*\u0026quot;\namqp uri规则 \u0026quot;amqp://userName:password@ipAddress:portNumber/virtualHost\u0026quot; 根据我们上述的新增在用户和vhost, 可以得到uri: amqp://ian:ian1234@localhost:5672/playground 5672为 rabbitmq的默认终端, 我们的 docker contain 需要把它映射到本机带端口\n实现生产者 go 使用 github.com/rabbitmq/amqp091-go 包\n根据上文的消息投递流程实现\n连接到 broker\n1 2 connectionUrl := \u0026#34;amqp://ian:ian1234@localhost:5672/playground\u0026#34; conn, err := amqp.Dial(connectionUrl) 打开 channel\n1 ch, err := conn.Channel() 声明一个交互器( 该步骤可以省略, 直接使用默认的 direct交换器)\n1 err = ch.ExchangeDeclare(\u0026#34;hello-exchange\u0026#34;, \u0026#34;direct\u0026#34;, true, false, false, false, nil) 声明一个队列\n1 q, err := ch.QueueDeclare(\u0026#34;hello\u0026#34;, true, false, false, false, nil) 将 Exchange 绑定到队列上 (如果声明交换器的步骤省略了, 该步骤也可以省略)\n1 err = ch.QueueBind(q.Name, \u0026#34;hellokey\u0026#34;, \u0026#34;hello-exchange\u0026#34;, false, nil) 发送消息 (如果没有声明交换器, 对应的参数直接传入空字符串\u0026quot;\u0026quot;, 会使用默认的 direct 交换器)\n1 2 3 4 err = ch.Publish(\u0026#34;hello-exchange\u0026#34;, \u0026#34;hellokey\u0026#34;, false, false, amqp.Publishing{ ContentType: \u0026#34;text/plain\u0026#34;, Body: []byte(body), }) 完整代码地址\n登录到本地管理页面可以查看类似于下图, 有消息投递\n实现消费者 消费者相对于生产者就简单多了. 打开信道直接消费就可以了.\n连接, 打开信道\n1 2 3 4 5 6 7 8 connectionUrl := \u0026#34;amqp://ian:ian1234@localhost:5672/playground\u0026#34; conn, err := amqp.Dial(connectionUrl) if err != nil { log.Fatal(err) } defer conn.Close() ch, err := conn.Channel() 开始消费\n1 2 3 4 5 6 7 // msgsCh 是一个消息管道 msgsCh, err := ch.Consume(\u0026#34;hello\u0026#34;, \u0026#34;consumer-name\u0026#34;, true, false, false, false, nil) for msg := range msgsCh { log.Println(\u0026#34;received a message: \u0026#34;, string(msg.Body)) } log.Println(\u0026#34;done, msg channel is closed\u0026#34;) 参考 官网 tutorial RabbitMQ 实战指南 ","permalink":"https://ynikl.github.io/blog/rabbitmq-learning-note/","summary":"公司刚好有一个项目要使用到 RabbitMQ, 本文是我自己了解学习 RabbitMQ 的记录.\n介绍一下 RabbitMQ Erlang 语言实现 AMQP (Advanced Message Queuing Protocal) 的消息中间件\n消息中间件的作用\n解耦: 可以不需要依赖下游的可用性, 提高单独项目的可用性. 冗余存储: 保存失败的消息 拓展性 削峰 缓冲 结构 涉及的名词简单解释\nProducer Consumer Broker: 服务节点 Queue: 内存存储消息数据的对象 Exchange: 选择器, 生产者投递消息后, 提交给交换器, 由交换器根据routingkey 和 bindingkey 决定投递到哪个队列 RoutingKey: 生产消息提供routingkey 给交换器用于指定要投递的队列 BindingKey: 交换器, 通过 bindingkey 与对应的队列关联起来 Connection: 客户端与 Broke 建立的 TCP 连接 Channel: 是建立在 Connection 上抽象的虚拟连接. 实现多线程可以 TCP 连接, 多个信道可能复用同一个 TCP 连接 交换器的类型\nfanout : 投递到所有队列 direct: 投递到 routingkey 和 bindingkey 匹配的 topic: direct 的拓展, 支持模糊匹配 headers : 性能差, 少用 消息投递流程:","title":"RabbitMQ 基本入门实践"},{"content":" The most surprising thing is that you wouldn’t let anyone steal your property, but you consistently let people steal your time, which is infinitely more valuable.\nlife if not short\n","permalink":"https://ynikl.github.io/posts/life-is-not-short/","summary":"The most surprising thing is that you wouldn’t let anyone steal your property, but you consistently let people steal your time, which is infinitely more valuable.\nlife if not short","title":"Life Is Not Short"},{"content":"微服务是针对公司某一复杂业务程序实现的设计模式, 与巨石架构(Monolith)是相对的.\n微服务对应的应该是公司业务能力层级上的拆分与设计, 为了减少业务之间的耦合而导致相互拖累, 在对外业务能力不变的情况下, 在应用内部将能力拆分成一些微小服务. 也可以理解为是对巨石架构进行\u0026quot;解耦\u0026quot;.\n举个例子: 原先公司做的是一个外卖系统, 这个系统中可能包含了客户下单, 商家接单, 骑手配送等功能. 但是全部都打包在一个程序中. 发版时, 可能客户下单功能修改了功能, 导致商家没办法接单了. 或者商家接单功能实现的有问题, 导致整个应用程序挂掉, 现在用户下不了单, 骑手也没法接单, 整个公司的业务就瘫痪了. 然后, 在客户下单-商家接单-骑手配送这个大业务流程不变的情况下, 我们在外卖系统内部, 分成了多个服务, 各个服务之间使用 API 松耦合通信, 隔离影响. 比如, 客户下单服务, 专门处理客户下单这一业务, 并将生成的订单推送到消息代理 (如:kafka) 或直接推送给其他服务等, 它只要能保证完成它的职责即可. 后者, 就可以称之为 \u0026ldquo;微服务架构\u0026rdquo;. 当然, 这只是一个例子, 实际情况会更加复杂.\n在\u0026laquo;微服务设计模式\u0026raquo; 中对微服务的定义:\n将应用程序构建为松耦合, 可独立部署的一组服务\n书中也对\u0026quot;微\u0026quot;的大小给了定义:\n大小的定义为能够由小团队开发服务\n不用刻意地去追求服务的大小. 微服务的落地, 往往就会伴随着, 组织结构和开发的流程的改变, 由不同的 小团队 独立负某一服务.\n像我们现在如果提到微服务, 就经常也会提到一些微服务框架 go-zero, go-micro 或者基础设施 docker, k8s 或者工具 gRPC, prometheus 之类的.\n像这种框架和组件之类的只是一种技术工具. 他们并不能定义微服务, 他们可能只是为了克服微服务架构设计带来的某一些缺陷, 或者与微服务结合可以发挥出更大的价值.\n举个极端的例子: 在你后端业务完全不划分的情况下, 你甚至可以在 go-zero 的框架基础上, 将你公司所有的业务打包进一个应用程序, 用docker打包, 并部署在k8s环境中, 再通过 gRPC 与前端通信. 你用到了很多著名的名词技术, 但是你实现出来应用的是巨石架构还是微服务架构呢?\n参考 微服务设计模式\n","permalink":"https://ynikl.github.io/books/miscroservices-patterns/","summary":"微服务是针对公司某一复杂业务程序实现的设计模式, 与巨石架构(Monolith)是相对的.\n微服务对应的应该是公司业务能力层级上的拆分与设计, 为了减少业务之间的耦合而导致相互拖累, 在对外业务能力不变的情况下, 在应用内部将能力拆分成一些微小服务. 也可以理解为是对巨石架构进行\u0026quot;解耦\u0026quot;.\n举个例子: 原先公司做的是一个外卖系统, 这个系统中可能包含了客户下单, 商家接单, 骑手配送等功能. 但是全部都打包在一个程序中. 发版时, 可能客户下单功能修改了功能, 导致商家没办法接单了. 或者商家接单功能实现的有问题, 导致整个应用程序挂掉, 现在用户下不了单, 骑手也没法接单, 整个公司的业务就瘫痪了. 然后, 在客户下单-商家接单-骑手配送这个大业务流程不变的情况下, 我们在外卖系统内部, 分成了多个服务, 各个服务之间使用 API 松耦合通信, 隔离影响. 比如, 客户下单服务, 专门处理客户下单这一业务, 并将生成的订单推送到消息代理 (如:kafka) 或直接推送给其他服务等, 它只要能保证完成它的职责即可. 后者, 就可以称之为 \u0026ldquo;微服务架构\u0026rdquo;. 当然, 这只是一个例子, 实际情况会更加复杂.\n在\u0026laquo;微服务设计模式\u0026raquo; 中对微服务的定义:\n将应用程序构建为松耦合, 可独立部署的一组服务\n书中也对\u0026quot;微\u0026quot;的大小给了定义:\n大小的定义为能够由小团队开发服务\n不用刻意地去追求服务的大小. 微服务的落地, 往往就会伴随着, 组织结构和开发的流程的改变, 由不同的 小团队 独立负某一服务.\n像我们现在如果提到微服务, 就经常也会提到一些微服务框架 go-zero, go-micro 或者基础设施 docker, k8s 或者工具 gRPC, prometheus 之类的.\n像这种框架和组件之类的只是一种技术工具. 他们并不能定义微服务, 他们可能只是为了克服微服务架构设计带来的某一些缺陷, 或者与微服务结合可以发挥出更大的价值.","title":"我理解的微服务 -- 读《微服务设计模式》总结"},{"content":"胶水代码(glue code), 可以了解为是大号的适配器, 没有业务意义, 主要的目的是用于 连接 两个 不兼容 的组件, 或是两个不兼容的服务.\n胶水代码可以是一段代码, 也可以是一个脚本文件, 甚至可以是新的组件.\n参考 Quora 回答 wiki\n","permalink":"https://ynikl.github.io/blog/what-is-glue-code/","summary":"胶水代码(glue code), 可以了解为是大号的适配器, 没有业务意义, 主要的目的是用于 连接 两个 不兼容 的组件, 或是两个不兼容的服务.\n胶水代码可以是一段代码, 也可以是一个脚本文件, 甚至可以是新的组件.\n参考 Quora 回答 wiki","title":"什么是 \"胶水代码\""},{"content":"今天, 突然被同事卷到了, 被问到 golang 中 slice 的三个参数是干嘛的? 我突然一时间忘记了, golang 的重切片居然是可以接受第三个参数的, 枉费我已经了写了快两年的 go 了. 赶紧 google 一下, 并总结备忘.\n简单介绍 slice 的数据结构 首先, 介绍一下 golang 中切片的结构体:\n1 2 3 4 5 type slice struct { array unsafe.Pointer len int cap int } 有三个字段:\narray 是切片所指向的底层数组数据 len 就是切片的长度 cap 即容量, 很明显 源码地址\n简单版重切片 a[low:high] 接受切片中的开始下标和结束下标, \u0026ldquo;左闭右开原则\u0026rdquo; 即重的切片数据会包含 low 下标的值, 但没有 high 下标的值 新切片的 容量(cap) 即为开始下标到原 slice 数据容量结束, 即\u0026quot;cap(a) - low\u0026quot; low 参数可以省略, 默认从 0 下标开始 high 参数也可以省略, 默认就是 slice 的长度, 即 len 的 value 1 2 3 4 5 6 7 8 a := [10]int{} oldSlice := a[:5] newSlice := a[2:4] fmt.Printf(\u0026#34;b: len %d, cap %d, c: len %d, c:cap %d\u0026#34;, len(b), cap(b), len(c), cap(c)) 输出: b: len 5, cap 10, c: len 2, c:cap 8 底层分配情况如下:\n1 2 3 4 5 6 7 底层数组 : [0 0 0 0 0 0 0 0 0 0] 旧切片容量: 10 : [0 0 0 0 0 0 0 0 0 0] 旧切片长度: 5 : [0 0 0 0 0] 新切片容量: 8 : [0 0 0 0 0 0 0 0] 新切片长度: 2 : [0 0] 完整版重切片 a[low:high:max] 完整版是为了补充简单版, 新切片会默认拥有从开始下标后的所有底层数组容量. 即新数组拥有修改全部数据底层能力 (重切片出来的不同切片, 在没有 append 操作触发重新分配底层数组的前提下, 指向的都是同一个数据, 修改数据相互可见)\n增加了 max 参数, 表示新切片可以获取到最大的原切片的容量大小. 1 2 3 4 5 6 7 8 a := [10]int{} oldSlice := a[:5] newSlice := a[2:4:6] fmt.Printf(\u0026#34;b: len %d, cap %d, c: len %d, c:cap %d\u0026#34;, len(b), cap(b), len(c), cap(c)) 输出: b: len 5, cap 10, c: len 2, c:cap 4 底层分配情况如下\n1 2 3 4 5 6 7 底层数组 : [0 0 0 0 0 0 0 0 0 0] 旧切片容量:10 : [0 0 0 0 0 0 0 0 0 0] 旧切片长度:5 : [0 0 0 0 0] 新切片容量:4 : [0 0 0 0] 新切片长度:2 : [0 0] 但是, 如果 max 要求获取的容量大于旧数据容量. 可想而知, 那一定会 panic\n1 2 3 4 5 6 7 a := [10]int{} b := a[:4:4] c := b[0:4:5] 输出: panic: runtime error: slice bounds out of range [::5] with capacity 4 所以参数要求: 0 \u0026lt;= low \u0026lt;= high \u0026lt;= max \u0026lt;= cap(a)\n参考 stack overflow 问题1 简单版 stack overflow 问题2 详细版 golang 官方文档 ","permalink":"https://ynikl.github.io/blog/golang-reslicing-slice/","summary":"今天, 突然被同事卷到了, 被问到 golang 中 slice 的三个参数是干嘛的? 我突然一时间忘记了, golang 的重切片居然是可以接受第三个参数的, 枉费我已经了写了快两年的 go 了. 赶紧 google 一下, 并总结备忘.\n简单介绍 slice 的数据结构 首先, 介绍一下 golang 中切片的结构体:\n1 2 3 4 5 type slice struct { array unsafe.Pointer len int cap int } 有三个字段:\narray 是切片所指向的底层数组数据 len 就是切片的长度 cap 即容量, 很明显 源码地址\n简单版重切片 a[low:high] 接受切片中的开始下标和结束下标, \u0026ldquo;左闭右开原则\u0026rdquo; 即重的切片数据会包含 low 下标的值, 但没有 high 下标的值 新切片的 容量(cap) 即为开始下标到原 slice 数据容量结束, 即\u0026quot;cap(a) - low\u0026quot; low 参数可以省略, 默认从 0 下标开始 high 参数也可以省略, 默认就是 slice 的长度, 即 len 的 value 1 2 3 4 5 6 7 8 a := [10]int{} oldSlice := a[:5] newSlice := a[2:4] fmt.","title":"Go中slice[i:j:k]第三个参数是做什么的"},{"content":"一个完善的方案的需要考虑的三个方面\n当前需求 理清楚初心，当前方案要解决的问题。聚焦到主要解决的问题。\n结果上下文 好处：当前方案的好处，解决了什么 弊端: 什么是它不能解决的 问题：引入什么新的问题 与其他方案的关系 前导：当前方案是怎么演变出来。 后续：当前方案会引入什么新问题，有什么后续的解决方案 替换：可以解决同样需求的情况下，还没什么备选方案。为什么选择了当前方案 参考《微服务设计模式》的1.6.2\u0026quot;模式和模式语言\u0026quot;, 相对减少了模式关系中的泛化和特化。\n","permalink":"https://ynikl.github.io/posts/thinking-choosing-tech/","summary":"一个完善的方案的需要考虑的三个方面\n当前需求 理清楚初心，当前方案要解决的问题。聚焦到主要解决的问题。\n结果上下文 好处：当前方案的好处，解决了什么 弊端: 什么是它不能解决的 问题：引入什么新的问题 与其他方案的关系 前导：当前方案是怎么演变出来。 后续：当前方案会引入什么新问题，有什么后续的解决方案 替换：可以解决同样需求的情况下，还没什么备选方案。为什么选择了当前方案 参考《微服务设计模式》的1.6.2\u0026quot;模式和模式语言\u0026quot;, 相对减少了模式关系中的泛化和特化。","title":"我们为何选择 XXX 技术方案"},{"content":"场景 在有多种算法, 计算策略, 甚至业务流程以一种可相互替换的场景出现时. 就可以考虑该设计模式.\n比如: 地图导航的出行路线计算, 商品购买的捆绑促销方式等.\n分析 优点:\n将具体的策略与调用策略的流程代码解耦, 修改策略代码时候可以仅修改策略对象 在不同策略之间划清界限 增加单独策略的可测试性 缺点:\n后续变更有一定束缚性 ( 限制在抽象接口中 ) . 若需要打破策略的抽象接口, 就会造成较大的改动 会带来的问题:\n可能将原先一个流程代码, 拆分成了多分. 如果代码结构没有组织好, 想要大局把握可能比较费力 总结:\n在流程算法策略有多个 ( 如果只有一个就没有必要抽象了, 一梭子写完就行 ), 且各个策略都有一定复杂性 ( 只是简单几个 if 的也略了吧 ) 的场景下. 就可以使用 ( 接口的签名可以写的比较松一点, 传递和返回较高层级的数据对象 ).\n实现流程 主要的思想, 我觉得还是 面向接口编程\n分析要拆分的算法或者策略, 将主流程和策略部分, 提取抽象成一个通用接口(interface) 将算法或策略剥离成独立的策略对象, 并实现上述抽象接口 主流程代码根据业务逻辑, 初始化策略对象, 将需要的策略\u0026quot;插入\u0026quot;(plugin)流程, 调用, 获取结果, ok. 参考 refactoringguru - strategy ","permalink":"https://ynikl.github.io/blog/strategy-pattern/","summary":"场景 在有多种算法, 计算策略, 甚至业务流程以一种可相互替换的场景出现时. 就可以考虑该设计模式.\n比如: 地图导航的出行路线计算, 商品购买的捆绑促销方式等.\n分析 优点:\n将具体的策略与调用策略的流程代码解耦, 修改策略代码时候可以仅修改策略对象 在不同策略之间划清界限 增加单独策略的可测试性 缺点:\n后续变更有一定束缚性 ( 限制在抽象接口中 ) . 若需要打破策略的抽象接口, 就会造成较大的改动 会带来的问题:\n可能将原先一个流程代码, 拆分成了多分. 如果代码结构没有组织好, 想要大局把握可能比较费力 总结:\n在流程算法策略有多个 ( 如果只有一个就没有必要抽象了, 一梭子写完就行 ), 且各个策略都有一定复杂性 ( 只是简单几个 if 的也略了吧 ) 的场景下. 就可以使用 ( 接口的签名可以写的比较松一点, 传递和返回较高层级的数据对象 ).\n实现流程 主要的思想, 我觉得还是 面向接口编程\n分析要拆分的算法或者策略, 将主流程和策略部分, 提取抽象成一个通用接口(interface) 将算法或策略剥离成独立的策略对象, 并实现上述抽象接口 主流程代码根据业务逻辑, 初始化策略对象, 将需要的策略\u0026quot;插入\u0026quot;(plugin)流程, 调用, 获取结果, ok. 参考 refactoringguru - strategy ","title":"设计模式 -- 策略模式"},{"content":"链表的定义： wiki 百科给出定义:\nIn computer science, a linked list is a linear collection of data elemetns whose order is not given by their physical placement in memory. Instead, each element points to the next.\n翻译一下：\n一个线性表 每个元素会指向下一个元素的位置 链表的优缺点 优点:\n不需要提前分配内存 在查找到元素位置的提前下，插入和删除动作是一个常量，即 O(1) 没有容量上限，可以自由扩容 缺点:\n查询某个元素，需要从头开始遍历，即 O(n) 实现代码\n单向链表 最普通的链表\n双向链表 循环链表 ","permalink":"https://ynikl.github.io/dsa/linked-list/","summary":"链表的定义： wiki 百科给出定义:\nIn computer science, a linked list is a linear collection of data elemetns whose order is not given by their physical placement in memory. Instead, each element points to the next.\n翻译一下：\n一个线性表 每个元素会指向下一个元素的位置 链表的优缺点 优点:\n不需要提前分配内存 在查找到元素位置的提前下，插入和删除动作是一个常量，即 O(1) 没有容量上限，可以自由扩容 缺点:\n查询某个元素，需要从头开始遍历，即 O(n) 实现代码\n单向链表 最普通的链表\n双向链表 循环链表 ","title":"Linked List"},{"content":"github code\n非科班出身的我，有好几次尝试过跟着国外大学的课程重新学习计算机基础， 但是每次都是半途放弃了，这次尝试根据数据结构主题进行学习。\n主流的数据结构类型\nLinked List（链表） List （线性表） 2D Arrays Strings（串） Stack （栈） Queue（队列） Hash Table（哈希表） Heap （堆） Tree （树） Graphs（图） Binary Tree Binary Search Tree ","permalink":"https://ynikl.github.io/dsa/datastructures-list/","summary":"github code\n非科班出身的我，有好几次尝试过跟着国外大学的课程重新学习计算机基础， 但是每次都是半途放弃了，这次尝试根据数据结构主题进行学习。\n主流的数据结构类型\nLinked List（链表） List （线性表） 2D Arrays Strings（串） Stack （栈） Queue（队列） Hash Table（哈希表） Heap （堆） Tree （树） Graphs（图） Binary Tree Binary Search Tree ","title":"基础数据结构列表"},{"content":"大端和小端的命名出处是来自于《格列佛游记》中吃鸡蛋分成从大端开始吃的“大端派”和从小端开始吃的“小端派”\n大端的优势是高位计算，和可读性 小端的优势的低位运算 各自的优劣分析本质上还是因为内存的连续性，需要修改和读取的位数越少越有优势。\n以上是阅读阮一峰的博文-字节序探析：大端与小端的比较的简单总结。本来自己也是想要整理一篇关于大小端分析的文章。刚好阮老师发文了，收获甚多，就不在自己整理了。\n参考连接 阮一峰的博文-字节序探析：大端与小端的比较 ","permalink":"https://ynikl.github.io/blog/endianness/","summary":"大端和小端的命名出处是来自于《格列佛游记》中吃鸡蛋分成从大端开始吃的“大端派”和从小端开始吃的“小端派”\n大端的优势是高位计算，和可读性 小端的优势的低位运算 各自的优劣分析本质上还是因为内存的连续性，需要修改和读取的位数越少越有优势。\n以上是阅读阮一峰的博文-字节序探析：大端与小端的比较的简单总结。本来自己也是想要整理一篇关于大小端分析的文章。刚好阮老师发文了，收获甚多，就不在自己整理了。\n参考连接 阮一峰的博文-字节序探析：大端与小端的比较 ","title":"计算机中的：大端和小端"},{"content":"是什么 Modules （下文称为模块）是 Go 语言设计用来管理依赖包。\n在中文中我们经常把go中的 Module 和 Package 统称为“包”，其实 Module 是一个版本控制的“包”的集合。\n模块的引入主要用于解决，项目依赖的不同版本的问题。（在旧的 GOPATH 中不同项目依赖不同版本）。引入的模块会声明在go.mod文件中。\ngo.mod 文件 1 2 3 4 5 6 7 8 9 module example.com/my/thing go 1.12 require example.com/other/thing v1.0.2 require example.com/new/thing/v2 v2.3.4 exclude example.com/old/thing v1.2.3 replace example.com/bad/thing v1.4.5 =\u0026gt; example.com/good/thing v1.4.5 retract [v1.9.0, v1.9.5] 文件中各行意思\nmodule 当前自己模块的名的完整路径 go 版本号 require 需要依赖的目标模块以及最小的版本号 exclude 排除目标模块的特定版本 replace 将某个模块版本指向另一个模块版本，也可以指向本地，未发布的模块 retract 当前发布的模块，需要撤回不能用版本，用于处理意外发布版本的情况 go.mod 可以通过相关命令修改，也可以直接修改文件数据\ngo.sum 文件 与go.mod经常在一起的会是一个go.sum文件，文件中存放着第一次添加依赖模块时，的模块源码的 hash 值。主要是用于校验，防止依赖模块代码被意外地修改到。\n1 2 3 \u0026gt; cat go.sum example.com/mod v1.0.0 h1:6Cz1EhbAk54HWaw6fhCpSPxWGjIMLuF9MlO4Ou568sQ= example.com/mod v1.0.0/go.mod h1:mgm3p5SY7FVOgVLVSXIYK9qk0umwLQLOG06xLpFUeTI= 文件中以：模块路径 + 版本号 + hash算法名 + hash值 的组合写入\nexample.com/mod 是模块路径名 v1.0.0 是版本号，在第二行有是以/go.mod结尾，代表该 hash 值是对依赖模块本身的go.mod文件的 hash 值 h1: 代表使用的 hash 算法，代表 SHA-256 哈希值，没什么好说的了 Module cache 本地的目录，用户存放下载下来的的模块文件。\n默认路径是在$GOPAth/pkg/mod\nModule cache 文件夹详细说明\n语义化版本 go 采用语义化版本 v1.18.1\n一个模块的版本是不变的 —— 只要拉过一次模块，该模块就会存在缓存在Go 官方的模块服务中，以后拉取改模块就会从官方的模块服务拉取，且该动作不可逆。\n版本号 = \u0026ldquo;v\u0026rdquo; + 主版本号 + 小版本号 + 补丁号\n主版本号的增加后，小版本号和补丁号要重新置零。主版本号增加，代表该版本出现不向后兼容的改动。比如移除旧的包 小版本号增加后，补丁号重新置零。表示版本改动公共接口但是向后兼容的，比如增加一个函数 补丁号增加，表示该版本对公开接口没有改动。比如修改bug 版本的后面可能还会增加一些提前发布的标识，比如 v1.18.1-beta v1.18.1-pre\n当 go 的 模块没有声明发布版本的时候(比如拉取某分支做为模块)，go 就会自己生成 伪版本, 可以仅作了解。\n如果使用模块的版本号大于等于v2的时候，需要在引入包的后缀加上/v2\n1 import \u0026#34;github.com/urfave/cli/v2\u0026#34; 怎么用 开启模块功能 模块功能的开启, 配置在环境变量GO111MODULE\n=off, 忽略GOPATH路径下的go.mod文件，直接引用GOPATH/src中的包文件 =on，启用模块功能 =auto, 如果项目有go.mod文件启用，没有则是用GOPATH模式 常用命令快览 go mod\n1 go mod init example.com/example/m1 初始化当前文件夹，让其成为一个 module\ngo get\n1 go get -d example.com/example/m1@v1.2.3 主要用法:修改当前项目的go.mod，引入新的依赖项目。\n-d 的标志，表示获取目标包之后，不进行本地编译或安装。Go 1.18 之后的默认行为。\n1 go get -d -u example.com/example/m1 也可以用来升级依赖模块的版本，升级到最新版本。如果目标模块的新版的所依赖的其他模块也可能会一并升级。也可以指定版本-u=patch\n修改制定依赖版本的操作也可以通过制定后缀版本号实现\n1 go get example.com/example/m1@v2.3.1 go mod edit\n通过指令修改go.mod文件，与直接修改go.mod效果一致\n1 go mod edit -replace example.com/a@v1.0.0=./a 将某个模块引用指向本地。可以用来解决引用正在开发中，还没有发布过的模块\ngo mod tidy\n根据项目的源码引用整理go.mod中的引用情况。添加缺少的依赖，或者移除冗余的依赖。\ngo mod vendor\n将依赖一并放在自己项目的中，可以省去自己拉取依赖的很多麻烦，提高可用性。go 项目的根目录中的 vendor 文件夹就是用来干这个事的\n将项目依赖移入vendor文件中，当存在了vendor文件夹，项目会使用vendor中的依赖。大于 1.14 版本需要指定参数-mod=vendor才会启用\n本地修改之后模块版本之后需要，重新使用go mod vendor将新的依赖模块同步入vendor中。\ngo mod verify\n用于检测模块再被下载之后入，模块中的代码是否有被修改过。\n对源码文件的 hash，与当前文件的go.sum中的 hash 对比校验是否有被修改过。 如果go.sum中没有该模块的hash值，就会从checksum database 中获取目标 hash 值。（除非设置了GOPRIVATE或者GONOSUMDB)\n1 2 ❯ go mod verify github.com/ynikl/playmod v1.0.0: dir has been modified (/Users/ian/go/pkg/mod/github.com/ynikl/playmod@v1.0.0) 上述例子，源文件被我手动强制修改过，就会报错\ngo mod why\n1 go mod why example.com/mod 用于解释当前项目为什么会依赖某一个模块，输出项目对目标模块的依赖树图\ngo list -m all\n可以用于输出当前项目依赖的所有模块\nMVS Minimal version selection（MVS), 当引入的不同模块，又存在依赖与相同模块的（相同大版本，不同版本小版本）的时候。\n在使用模块相关命令的时候，会选择所依赖的不同版本的中，构建项目所需要从最小版本。\nA.12 与 B1.2 分别需要 C1.3 和 C1.4 为了是项目能正常进行，需要使用 C1.4 版本\n参考 官网Go Modules参考 Minimal Version Seletion 官方介绍 Modules 博文 提议 ","permalink":"https://ynikl.github.io/blog/go-modules/","summary":"是什么 Modules （下文称为模块）是 Go 语言设计用来管理依赖包。\n在中文中我们经常把go中的 Module 和 Package 统称为“包”，其实 Module 是一个版本控制的“包”的集合。\n模块的引入主要用于解决，项目依赖的不同版本的问题。（在旧的 GOPATH 中不同项目依赖不同版本）。引入的模块会声明在go.mod文件中。\ngo.mod 文件 1 2 3 4 5 6 7 8 9 module example.com/my/thing go 1.12 require example.com/other/thing v1.0.2 require example.com/new/thing/v2 v2.3.4 exclude example.com/old/thing v1.2.3 replace example.com/bad/thing v1.4.5 =\u0026gt; example.com/good/thing v1.4.5 retract [v1.9.0, v1.9.5] 文件中各行意思\nmodule 当前自己模块的名的完整路径 go 版本号 require 需要依赖的目标模块以及最小的版本号 exclude 排除目标模块的特定版本 replace 将某个模块版本指向另一个模块版本，也可以指向本地，未发布的模块 retract 当前发布的模块，需要撤回不能用版本，用于处理意外发布版本的情况 go.mod 可以通过相关命令修改，也可以直接修改文件数据\ngo.sum 文件 与go.mod经常在一起的会是一个go.sum文件，文件中存放着第一次添加依赖模块时，的模块源码的 hash 值。主要是用于校验，防止依赖模块代码被意外地修改到。\n1 2 3 \u0026gt; cat go.","title":"小窥 Go 中的 Modules"},{"content":"mysql 在事务中再开启事务，前一个事务会被自动提交\nstackoverflow\n","permalink":"https://ynikl.github.io/blog/mysql-nested-transactions/","summary":"mysql 在事务中再开启事务，前一个事务会被自动提交\nstackoverflow","title":"Mysql 不支持事务嵌套"},{"content":"举个例子，电脑的鼠标，键盘或者其他设备的驱动程序，他们是并发的，但不是并行的。他们也不需要并行去运行。\n并发是很多程序（形容运行任务，不是广义上的程序）的独立运行，并发是一种程序设计结构\n并行是一次性运行很多程序，并行是一种程序的运行现象，当成程序设计成并发的，他很容易就变成了并行， 但并行不一定是并发的目的。\nConcurrency is not Parallelism by Rob Pike\n","permalink":"https://ynikl.github.io/blog/concurrency-and-parallelism/","summary":"举个例子，电脑的鼠标，键盘或者其他设备的驱动程序，他们是并发的，但不是并行的。他们也不需要并行去运行。\n并发是很多程序（形容运行任务，不是广义上的程序）的独立运行，并发是一种程序设计结构\n并行是一次性运行很多程序，并行是一种程序的运行现象，当成程序设计成并发的，他很容易就变成了并行， 但并行不一定是并发的目的。\nConcurrency is not Parallelism by Rob Pike","title":"并发与并行的区别"},{"content":"读Randy\u0026rsquo;s的博客遗憾最小化框架有感\n在面对人生岔路口的时候，很多时候就需要对不同决定做取舍，是否勇于打破自己的人生的桎梏。怎么样要做出让自己十年之后的自己不会后悔的决定\n做决定之前，问问自己的内心，如果我不这么做，几年之后，年老之后会不会后悔，会不会遗憾\nJeff Bezos 曾经谈到了自己是如何做决定的，他称之为 Regret Minimization Framwork (遗憾最小化框架) —— 他会想象自己到了 80 岁的时候，是否会认为不做这件事情会让自己遗憾。尽量让人生的遗憾数量最小化。即使当时的选择后来看来是错误的，但也不会后悔尝试过。\nBezos的视频地址 Cycle.js 作者 staltz 回答是否会对自己做的库没有像 React / Vue 那样火起来而感到气馁\nAsk yourself: in 10 years from now, will you be proud of having done this? \u0026hellip; Do things that your future self will be proud, is my motto for the time being.\n","permalink":"https://ynikl.github.io/posts/how-make-decisions/","summary":"读Randy\u0026rsquo;s的博客遗憾最小化框架有感\n在面对人生岔路口的时候，很多时候就需要对不同决定做取舍，是否勇于打破自己的人生的桎梏。怎么样要做出让自己十年之后的自己不会后悔的决定\n做决定之前，问问自己的内心，如果我不这么做，几年之后，年老之后会不会后悔，会不会遗憾\nJeff Bezos 曾经谈到了自己是如何做决定的，他称之为 Regret Minimization Framwork (遗憾最小化框架) —— 他会想象自己到了 80 岁的时候，是否会认为不做这件事情会让自己遗憾。尽量让人生的遗憾数量最小化。即使当时的选择后来看来是错误的，但也不会后悔尝试过。\nBezos的视频地址 Cycle.js 作者 staltz 回答是否会对自己做的库没有像 React / Vue 那样火起来而感到气馁\nAsk yourself: in 10 years from now, will you be proud of having done this? \u0026hellip; Do things that your future self will be proud, is my motto for the time being.","title":"如何做决定——遗憾最小化"},{"content":"Mutex 数据结构 1 2 3 4 type Mutex struct { state int32 sema uint32 } Mutex 使用过之后是不可被拷贝的 state 等于 0 值的时候才是无锁的状态 sema 字段为信号量字段，通过该字段控制协程的阻塞和唤醒，具体实现在runtime 中。 Mutex 对象总共有三个公开方法\nLock 尝试抢占互斥锁，如果已经被锁定，则调用协程进入阻塞 TryLock Unlock 解除互斥锁， 解锁未锁定的互斥锁会发生panic Mutex 与协程无法关，允许一个协程锁定，另一个协程进行解锁。\nMutex 实现了一个 sync.Locker 接口, 该接口只有两个方法\nLock Unlock Mutex 锁有几种状态\nmutexLocked = 1 已经锁定 mutexWoken = 2 表示当前锁的等待队列，有协程正在活跃地获取锁，可以考虑不用释放信号量 mutexStarving = 4 当前锁已经进入了饥饿状态 其他常量\nmutexWaiterShift = 3 统计的等待在Mutex.state字段等待数量。（前3位，用于表示锁的状态, 即 mutexLocked, mutexWoken, mutexStarving） starvationThresholdNs = 1e6 进入饥饿模式的阈值 1ms Mutex 锁的竞争方式 Mutex 锁有两种状态\n正常模式 normal 饥饿模式 starvation 正常模式下，等待获取的锁的协程遵循先进先出的原则。\n但是，当释放锁的时候如果有新协程进入获取锁代码的时候。因为新入协程本身已经运行在CPU上了，所以有抢占锁的优势。由于阻塞在等待队列上的协程，竞争不过新入协程。当等待时间操作 1ms，就会触发饥饿模式。\n饥饿模式，进行互斥锁解锁的协程直接的将锁的所有权直接已经给等待队列的第一个协程。新进协程被禁止抢占互斥锁。\n在转移所有权的时候，如果满足一下任意条件，则进入正常模式：\n锁的等待者只剩最后一个 等待时间小于1ms 正常模式有利于更好的性能，饥饿模式则避免出现“饿死”情况。\nMutex 的方法详解 Lock 第一步，通过调用 atomic 的 CAS 操作，尝试加锁，如果成功加锁直接返回\n1 atomic.CompareAndSwapInt32(\u0026amp;m.state, 0, mutexLocked) 如果第一步失败，则代表该锁已经被加过锁，锁定了。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 func (m *Mutex) lockSlow() { // 当前协程的变量, 可以用于表示当前协程的状态 // 用于统计锁的等待时长，是否进入饥饿模式 var waitStartTime int64 starving := false // 当前协程是否处于饥饿 awoke := false // 是否处于唤醒 iter := 0 // 统计自旋次数 old := m.state for { // 进入自旋的状态条件， **已经锁定** 且非饥饿状态。 if old\u0026amp;(mutexLocked|mutexStarving) == mutexLocked \u0026amp;\u0026amp; runtime_canSpin(iter) { // 如果锁的状态 woken 字段未被标记， 将自身标记位唤醒，且将 Mutex 的 woken 位标记位1 // 当协程自己进入获取锁的第一候选人 if !awoke \u0026amp;\u0026amp; old\u0026amp;mutexWoken == 0 \u0026amp;\u0026amp; old\u0026gt;\u0026gt;mutexWaiterShift != 0 \u0026amp;\u0026amp; atomic.CompareAndSwapInt32(\u0026amp;m.state, old, old|mutexWoken) { awoke = true } runtime_doSpin() // 控制自旋次数，大于4次之后不进入自旋状态 iter++ // 获取最新的状态 old = m.state continue } // 有可能，自旋自后已经解锁或者只是单纯不能自旋限制了。下面尝试通过 CAS 竞争锁。 // 新值用于设置新的状态 new := old // 非饥饿状态才设置锁定 if old\u0026amp;mutexStarving == 0 { new |= mutexLocked } if old\u0026amp;(mutexLocked|mutexStarving) != 0 { // 等待者加1 new += 1 \u0026lt;\u0026lt; mutexWaiterShift } // 当前协程是饥饿状态，尝试标记锁的新状态位饥饿状态。 if starving \u0026amp;\u0026amp; old\u0026amp;mutexLocked != 0 { new |= mutexStarving } if awoke { // The goroutine has been woken from sleep, // so we need to reset the flag in either case. if new\u0026amp;mutexWoken == 0 { // Mutex 的唤醒位被抢走，出现不一致。协程变量的唤醒位应该与 Mutex 的唤醒位一致 throw(\u0026#34;sync: inconsistent mutex state\u0026#34;) } // 标志 锁的唤醒位为0 new \u0026amp;^= mutexWoken } // CAS 尝试, Mutex 状态没有被变更 if atomic.CompareAndSwapInt32(\u0026amp;m.state, old, new) { // 非饥饿状态下，CAS 成功新的 new 字段中会有 mutexLocked 标记（在new下的第一个if）。当前协程获取到了互斥锁, if old\u0026amp;(mutexLocked|mutexStarving) == 0 { break // locked the mutex with CAS } // queueLifo 表示该协程是否为第一次获取锁。如果中间被唤醒过，这放在等待队列头部 queueLifo := waitStartTime != 0 if waitStartTime == 0 { waitStartTime = runtime_nanotime() } // 通过信号量，进入阻塞 runtime_SemacquireMutex(\u0026amp;m.sema, queueLifo, 1) // 进入饥饿模式 starving = starving || runtime_nanotime()-waitStartTime \u0026gt; starvationThresholdNs old = m.state // 当前是饥饿模式 if old\u0026amp;mutexStarving != 0 { // 如果当前锁的状态位饥饿模式，但是当前协程可以执行的当前行代码，代表当前协程已经被从阻塞中唤醒。 // 饥饿状态 + 被唤醒 =》当前锁已经已经到当前协程上 if old\u0026amp;(mutexLocked|mutexWoken) != 0 || old\u0026gt;\u0026gt;mutexWaiterShift == 0 { // 检查状态一致 throw(\u0026#34;sync: inconsistent mutex state\u0026#34;) } // 由当协程来设置最新的锁定状态 delta := int32(mutexLocked - 1\u0026lt;\u0026lt;mutexWaiterShift) // 判断是否需要退出饥饿模式 if !starving || old\u0026gt;\u0026gt;mutexWaiterShift == 1 { delta -= mutexStarving } atomic.AddInt32(\u0026amp;m.state, delta) break } // 当前是正常模式，通过CAS自由竞争锁。 awoke = true iter = 0 // 重置计数 } else { // 再来 old = m.state } } } 是否可以进入自旋状态代码解释源码地址\nUnlock 第一步直接减去 mutexLocked 标志位常量，如果 new 等于0结束——简单（锁一次开一次，easy）。\n1 new := atomic.AddInt32(\u0026amp;m.state, -mutexLocked) 如果 state 还不等于0（有协程等待，竞争锁）, 进入 unlockSlow\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 func (m *Mutex) unlockSlow(new int32) { // 上一步已经减过 locked 位， 在加上应该等于1，否则不是正常解锁（解锁未锁定的锁）。 if (new+mutexLocked)\u0026amp;mutexLocked == 0 { fatal(\u0026#34;sync: unlock of unlocked mutex\u0026#34;) } // 正常模式 if new\u0026amp;mutexStarving == 0 { old := new for { // If there are no waiters or a goroutine has already // been woken or grabbed the lock, no need to wake anyone. // In starvation mode ownership is directly handed off from unlocking // goroutine to the next waiter. We are not part of this chain, // since we did not observe mutexStarving when we unlocked the mutex above. // So get off the way. // 没有等待协程无需通过信号量唤醒 // 1. 如果 mutexLocked 位为1，则代表锁已经被新入协程获取。 // 2. mutexWoken 代表协程有协程正在活动，无需再释放信号量 // 3. mutexStarving 锁的状态一直被抢占，才会导致当前位饥饿状态，无需在释放信号量 if old\u0026gt;\u0026gt;mutexWaiterShift == 0 || old\u0026amp;(mutexLocked|mutexWoken|mutexStarving) != 0 { return } // Grab the right to wake someone. new = (old - 1\u0026lt;\u0026lt;mutexWaiterShift) | mutexWoken if atomic.CompareAndSwapInt3(\u0026amp;m.state, old, new) { // 信号量唤醒，各自竞争 runtime_Semrelease(\u0026amp;m.sema, false, 1) return } old = m.state } } else { // 饥饿模式，通过信号量直接移交当前CPU时间 runtime_Semrelease(\u0026amp;m.sema, true, 1) } }2 如何把锁移交给等待队列的协程？\n使用 Mutex.sema 信号量实现锁转移\n参考 源代码地址sync.mutex.go 包说明文档\n","permalink":"https://ynikl.github.io/blog/golang-sync_mutex/","summary":"Mutex 数据结构 1 2 3 4 type Mutex struct { state int32 sema uint32 } Mutex 使用过之后是不可被拷贝的 state 等于 0 值的时候才是无锁的状态 sema 字段为信号量字段，通过该字段控制协程的阻塞和唤醒，具体实现在runtime 中。 Mutex 对象总共有三个公开方法\nLock 尝试抢占互斥锁，如果已经被锁定，则调用协程进入阻塞 TryLock Unlock 解除互斥锁， 解锁未锁定的互斥锁会发生panic Mutex 与协程无法关，允许一个协程锁定，另一个协程进行解锁。\nMutex 实现了一个 sync.Locker 接口, 该接口只有两个方法\nLock Unlock Mutex 锁有几种状态\nmutexLocked = 1 已经锁定 mutexWoken = 2 表示当前锁的等待队列，有协程正在活跃地获取锁，可以考虑不用释放信号量 mutexStarving = 4 当前锁已经进入了饥饿状态 其他常量\nmutexWaiterShift = 3 统计的等待在Mutex.state字段等待数量。（前3位，用于表示锁的状态, 即 mutexLocked, mutexWoken, mutexStarving） starvationThresholdNs = 1e6 进入饥饿模式的阈值 1ms Mutex 锁的竞争方式 Mutex 锁有两种状态","title":"Go-互斥锁的实现"},{"content":"为什么学 高学习产出转化比 助力下一份工作 公司现在正在初步尝试开始引入微服务，现在学习微服务具有较高的学习工作转化比。 后端架构转变的主流方向, 有利于再次找工作。\n怎么学 想要学习好一个技术，就需要有想学习这门技术的动力。\n首先要对它有较全面的理解：\n我们为什么要学习这门技术 技术的使用场景，以及使用的优势和劣势 现在该技术在大环境中的使用情况 再开始学习技术本身。\n针对于“微服务”这种概念性技术。就需要具体落实到某一个框架，进行一个实战项目。过程中掌握框架使用方法，对过程中所涉及到的相关技术有粗略的了解。\n具体方法：\n我想先通过快速通过《微服务设计模式》了解微服务的使用场景，以及如何设计。 使用 go-zero 框架完成一个练手项目开发。 ","permalink":"https://ynikl.github.io/posts/2022/0526-why-learn-microservices/","summary":"为什么学 高学习产出转化比 助力下一份工作 公司现在正在初步尝试开始引入微服务，现在学习微服务具有较高的学习工作转化比。 后端架构转变的主流方向, 有利于再次找工作。\n怎么学 想要学习好一个技术，就需要有想学习这门技术的动力。\n首先要对它有较全面的理解：\n我们为什么要学习这门技术 技术的使用场景，以及使用的优势和劣势 现在该技术在大环境中的使用情况 再开始学习技术本身。\n针对于“微服务”这种概念性技术。就需要具体落实到某一个框架，进行一个实战项目。过程中掌握框架使用方法，对过程中所涉及到的相关技术有粗略的了解。\n具体方法：\n我想先通过快速通过《微服务设计模式》了解微服务的使用场景，以及如何设计。 使用 go-zero 框架完成一个练手项目开发。 ","title":"我为什么要学微服务"},{"content":"富兰克林自传\n富兰克林, 美国独立宣言的签署者之一，白手起家致富，发明了避雷针路灯，组织了社区消防队，写下了《富兰克林自传》，一个丰富多产的人生。\n年少时勤奋读书，诚信独立，中年时勤勉奋斗，注重自身美德修养。又积极参与社会活动。\n摘录富兰克林十三美德：\n节制:食不过饱，饮酒不醉； 寡言:言必于人于己有益，避免无益的聊天； 生活:每一样东西应有一定的安放地方；每件日常事物当有一定的时间去做； 决心:当做必做；决心要做的事应坚持不懈； 俭朴:用钱必须于人或于己有益，换言之，切戒浪费； 勤勉:不浪费时间；每时每刻做些有用的事，戒掉一切不必要的行动； 诚恳:不欺骗人；思想要纯洁公正；说话也要如此； 公正:不做损人利己的事；不要忘记履行对人有益而又是你应尽的义务； 适度:避免极端；人若给你应得的处罚，你当容忍之； 清洁:身体、衣服和住所力求清洁； 镇静:勿因小事或普遍不可避免的事故而惊慌失措； 贞节:除了为了健康或生育后代起见，不常进行房事，切戒房事过度，伤害身体或损害你自己及他人的安宁或名誉； 谦虚:仿效耶稣和苏格拉底。\n","permalink":"https://ynikl.github.io/books/autobiography-benjamin_franklin/","summary":"富兰克林自传\n富兰克林, 美国独立宣言的签署者之一，白手起家致富，发明了避雷针路灯，组织了社区消防队，写下了《富兰克林自传》，一个丰富多产的人生。\n年少时勤奋读书，诚信独立，中年时勤勉奋斗，注重自身美德修养。又积极参与社会活动。\n摘录富兰克林十三美德：\n节制:食不过饱，饮酒不醉； 寡言:言必于人于己有益，避免无益的聊天； 生活:每一样东西应有一定的安放地方；每件日常事物当有一定的时间去做； 决心:当做必做；决心要做的事应坚持不懈； 俭朴:用钱必须于人或于己有益，换言之，切戒浪费； 勤勉:不浪费时间；每时每刻做些有用的事，戒掉一切不必要的行动； 诚恳:不欺骗人；思想要纯洁公正；说话也要如此； 公正:不做损人利己的事；不要忘记履行对人有益而又是你应尽的义务； 适度:避免极端；人若给你应得的处罚，你当容忍之； 清洁:身体、衣服和住所力求清洁； 镇静:勿因小事或普遍不可避免的事故而惊慌失措； 贞节:除了为了健康或生育后代起见，不常进行房事，切戒房事过度，伤害身体或损害你自己及他人的安宁或名誉； 谦虚:仿效耶稣和苏格拉底。","title":"富兰克林自传读后感"},{"content":"在看官方文档的时候，突然心血来潮，想翻译一下一篇博客玩玩。\n原文章地址 Godoc: documenting Go code\nGo 语言官方对于代码的文档非常重视，文档对于软件的可阅读性和可维护性有着至关重要的地位。当然，文档必须要是准确可理解的，也需要易于编写和维护。理性情况下，文档应该与代码紧密联系。这样子才能方便于程序员修改和编写。\n所以，我们开发了 godoc 文档工具。本文描述了的 godoc 关于的“文档”的方法论，和解释如何按照使用规范给你自己的项目写出一个好的文档。\ngodoc 会解析源文件代码和注释，生成基于HTML的页面或者纯文本格式的文档。这样子文档就与代码紧密联系。举个例子，通过在 godoc 的页面点击，你就可以在一个函数的文档说明和源代码中快速跳转。\ngodoc 在概念上与 Python 的“Docstring”和 Java 的“Javadoc\u0026quot;相似，但是 godoc 设计的更加简单化。godoc 读取的代码注释的不需要特定的结构化（Docstring 使用），也不需要特定的语法（JavaDoc 使用），godoc 从代码读取的注释就是简单的“代码注释”，就算你不使用 godoc 也可以直接阅读的注释。\n使用的规范很简单：在类型，变量，常量，函数，包声明的上方写下注释即可， 中间不要有空行。godoc 会把这些注释以文字的形式呈现在被注释的对象旁边。举个例子，下方就是 fmt 包的Fprint函数的注释。\n1 2 3 4 // Fprint formats using the default formats for its operands and writes to w. // Spaces are added between operands when neither is a string. // It returns the number of bytes written and any write error encountered. func Fprint(w io.Writer, a ...interface{}) (n int, err error) { 值得注意的是该注释是以被注释的对象命名开头的一个完整的句子。 这个使用规范可以方便我们生成各种各样的格式文档，从简单的纯文本到 UNIX 是 man 的帮助页，还可以使用其他工具更见简单地获取到信息， 比如提取出第一行或者句子。\n在包的声明处的注释，需要写整个包的概括说明。这些注释可以很简洁，就像 sort 包中的简短描述：\n1 2 3 // Package sort provides primitives for sorting slices and user-defined // collections. package sort 也可以很详细，比如 gob 包。有另一个使用惯例：像这种有这大量注释文档的包，单独一个doc.go文件，放置包的注释。\n不论包的注释文档大小，第一句注释会被展示在 godoc 的呈现包列表中。\n那些没有与最外层声明（可以简单理解为包内全局对象）连接在一块的注释会被 godoc 忽略。但是，有一个例外。那些写在最外层且以“BUG(who)”开头的注释，会被识别为已知的 bug，且会被包含在包文档的“Bugs”分区中。这个“who”部分应该填写可以提供更加详细信息的人名。举个已经在 bytes 包中注释的问题:\n1 // BUG(r): The rule Title uses for word boundaries does not handle Unicode punctuation properly. 某些时候，当一个结构体字段，或者函数，类型，甚至一个整个包变成了冗余或者没有使用必要，但是还是需要与旧代码保持兼容。这时，可以增加一个一段落以“Deprecated:”开头后面跟废弃信息的注释。标识该对象不应该再被使用。\n下面展示一些 godoc 把注释转化成网页的规则：\n不同的段落需要以空行分割。否则将会被识别成同一段。 带有格式的文本，需要要缩进。 URL 会被转化成网页连接，无需特殊处理。 上方的这些规则不需要你做任何的特殊处理。\n事实上，godoc 的极简处理方式使得它非常容易使用。所以，很多 go 项目，包括标准库，都已经开始开始遵循 godoc 的注释文档规范。\n你自己的项目也可以通过编写符合文中规范的注释生成漂亮的文档。任何下载在$GOROOT/src/pkg 或者任何在 GOPATH 空间下的 go 代码包，都可以被 godoc 的命令行或者 HTTP 的接口访问， 你也可以通过在命令后添加-path参数或者直接使用godoc .来指定源码的路径。在godoc 文档 你可以查看到更加详细的内容。\n","permalink":"https://ynikl.github.io/blog/golang-godoc-documenting-go-code/","summary":"在看官方文档的时候，突然心血来潮，想翻译一下一篇博客玩玩。\n原文章地址 Godoc: documenting Go code\nGo 语言官方对于代码的文档非常重视，文档对于软件的可阅读性和可维护性有着至关重要的地位。当然，文档必须要是准确可理解的，也需要易于编写和维护。理性情况下，文档应该与代码紧密联系。这样子才能方便于程序员修改和编写。\n所以，我们开发了 godoc 文档工具。本文描述了的 godoc 关于的“文档”的方法论，和解释如何按照使用规范给你自己的项目写出一个好的文档。\ngodoc 会解析源文件代码和注释，生成基于HTML的页面或者纯文本格式的文档。这样子文档就与代码紧密联系。举个例子，通过在 godoc 的页面点击，你就可以在一个函数的文档说明和源代码中快速跳转。\ngodoc 在概念上与 Python 的“Docstring”和 Java 的“Javadoc\u0026quot;相似，但是 godoc 设计的更加简单化。godoc 读取的代码注释的不需要特定的结构化（Docstring 使用），也不需要特定的语法（JavaDoc 使用），godoc 从代码读取的注释就是简单的“代码注释”，就算你不使用 godoc 也可以直接阅读的注释。\n使用的规范很简单：在类型，变量，常量，函数，包声明的上方写下注释即可， 中间不要有空行。godoc 会把这些注释以文字的形式呈现在被注释的对象旁边。举个例子，下方就是 fmt 包的Fprint函数的注释。\n1 2 3 4 // Fprint formats using the default formats for its operands and writes to w. // Spaces are added between operands when neither is a string. // It returns the number of bytes written and any write error encountered.","title":"【翻译】使用 Godoc 给 go 代码添加文档"},{"content":"IP 中斜杠表示的是子网掩码的位数\n例如 202.118.130.0/24 表示 子网页码的位数有24位，即 1111.1111.1111.0000\n","permalink":"https://ynikl.github.io/blog/cs-the-slash-meaning-of-ip/","summary":"IP 中斜杠表示的是子网掩码的位数\n例如 202.118.130.0/24 表示 子网页码的位数有24位，即 1111.1111.1111.0000","title":"IP表示中 / 代表的意思"},{"content":"以前有一段时间, 怀疑过自己\u0026quot;软件工程师\u0026quot;和以前工程意义上的\u0026quot;工程师\u0026quot;有什么区别, 自己只是将需求文档换成了代码, 这种活动并没有什么太大的突破. 然后我在吴军的见识书中看了一个五级工程师的概念, 算是解惑了我做为一个\u0026quot;码农\u0026quot;和工程师的区别.\n(图片来源于图书截图)\n第五级工程师: 有能够独自解决问题的能力, 但是问题规模较小, 属于个人能力可以解决的范围. 第四级工程师: 有沟通和领导能力, 可以带领一个团队, 完成一个规模化的工程. 第三级工程师: 能设计和完成一款产品, 取得市场成功. 对行业的商业环境有较深理解, 且有产品思维. 第二级工程师: 能够在行业做出有创造性, 有突破性的产品. 世界因为能够因为他们有一点点不一样. 第一级工程师: 开创一个行业的鼻祖. 能够改变世界. 反思自己的工程能力, 目前的所有项目技术上的问题都可以独立解决, 也能够针对某一棘手问题独立设计出可行的解决方案. 但是没有带领过团队解决过规模化问题, 亦没有技术创新.\n所以我自己应该就是 5.0, 五级工程师, 五流程序员.\n","permalink":"https://ynikl.github.io/posts/five-class-engineer/","summary":"以前有一段时间, 怀疑过自己\u0026quot;软件工程师\u0026quot;和以前工程意义上的\u0026quot;工程师\u0026quot;有什么区别, 自己只是将需求文档换成了代码, 这种活动并没有什么太大的突破. 然后我在吴军的见识书中看了一个五级工程师的概念, 算是解惑了我做为一个\u0026quot;码农\u0026quot;和工程师的区别.\n(图片来源于图书截图)\n第五级工程师: 有能够独自解决问题的能力, 但是问题规模较小, 属于个人能力可以解决的范围. 第四级工程师: 有沟通和领导能力, 可以带领一个团队, 完成一个规模化的工程. 第三级工程师: 能设计和完成一款产品, 取得市场成功. 对行业的商业环境有较深理解, 且有产品思维. 第二级工程师: 能够在行业做出有创造性, 有突破性的产品. 世界因为能够因为他们有一点点不一样. 第一级工程师: 开创一个行业的鼻祖. 能够改变世界. 反思自己的工程能力, 目前的所有项目技术上的问题都可以独立解决, 也能够针对某一棘手问题独立设计出可行的解决方案. 但是没有带领过团队解决过规模化问题, 亦没有技术创新.\n所以我自己应该就是 5.0, 五级工程师, 五流程序员.","title":"Five Class Programer"},{"content":"hugo 的默认内容都是在 content/ 路径下方\n在 markdown 文章中使用 { {\u0026lt; ref \u0026quot;/blog/my-first-post.md\u0026quot; \u0026gt;}}(两个左花括号中间是没有空格的), 会在编译时发生地址替换, 带/ 是表示从 content/ 目录下的下一个绝对路径\n1 [我的文章]({ {\u0026lt; ref \u0026#34;/blog/my-first-post.md\u0026#34; }}) 记得是已经发布的文章, 如果使用不存在, 或者是不参加发布的草稿文章就会发生报错\nhugo官方文档\n","permalink":"https://ynikl.github.io/blog/hugo_%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%AF%B9%E8%BF%9E%E6%8E%A5/","summary":"hugo 的默认内容都是在 content/ 路径下方\n在 markdown 文章中使用 { {\u0026lt; ref \u0026quot;/blog/my-first-post.md\u0026quot; \u0026gt;}}(两个左花括号中间是没有空格的), 会在编译时发生地址替换, 带/ 是表示从 content/ 目录下的下一个绝对路径\n1 [我的文章]({ {\u0026lt; ref \u0026#34;/blog/my-first-post.md\u0026#34; }}) 记得是已经发布的文章, 如果使用不存在, 或者是不参加发布的草稿文章就会发生报错\nhugo官方文档","title":"Hugo 如何使用已经发布文章做为相对URL"},{"content":"我的第一篇杂文\n阅读了卡片写作笔记法, 和Show Your Work之后, 打算重新开始写自己的博客. 用文字记录下自己的想法和收获.\n原先有断断续续写过几次博客, 但是每次都是半途而废的放弃. 希望这次可以坚持的久一点, 目标至少要有一年.\n","permalink":"https://ynikl.github.io/posts/my-first-post/","summary":"我的第一篇杂文\n阅读了卡片写作笔记法, 和Show Your Work之后, 打算重新开始写自己的博客. 用文字记录下自己的想法和收获.\n原先有断断续续写过几次博客, 但是每次都是半途而废的放弃. 希望这次可以坚持的久一点, 目标至少要有一年.","title":"My first Post"},{"content":"见识:豆瓣地址\n个人评分: 8.0 分\n前辈用他的智慧和经验, 告诉我们如何更好地活着.\n为什么读这本书 很多到了中年的人会有这样的体会： 自己无论多么努力，似乎都得不到社会的进一步认可；相反，如果按部就班地做事情，好像也坏不到哪里去。冥冥之中似乎被这两条线给框死，其实这就是命。\n为了这一句话, 读这一本书. 自己的作为一个普工程序员, 在技术浪潮的最后端被拖着走. 本根不需要到中年, 今年是我从事程序员工作的第四年, 我已经被感受到了被\u0026quot;命\u0026quot;限制住 的感觉了.\n书中讲了什么 作者分享了他对商业, 技术, 职业, 创业, 金钱, 读书的观点和看法\n用提出了商业的本质是\u0026quot;消费\u0026quot;的观点, 剖析了现在主流的\u0026quot;共享经济\u0026quot;, 带我们用商业的本质眼光, 去看哪些形式的共享经济是真正的\u0026quot;共享经济\u0026quot;, 哪些只是噱头炒概念的而已. 分析了IOT, 和数字跟踪技术, 区块链, 众筹等.\n介绍了新科技公司的创业过程中的一些普世经验. 如何选取赛道, 如何发挥自己小公司的优势, 如何在科技浪潮中存活下来, 以及中如何招聘优秀员工.\n关于在职场如何招聘到优秀的员工, 又可以引申到自己如何成为一个优秀的员工, 作者也给出了答案.\n树立完成的职业思维, 带着发展的目光选择岗位 在职业思维下主动和积极的面对工作 打开自己思维格局, 多去了解行业大局 有了不错的收入之后, 就涉及到了, 如何树立一个正确的金钱观. 要对自己收入有一个正确的认识, 避免过度追求提高收入, 进而牺牲了自己的健康, 家庭等. (现在经常听到我们的工友, 猝死就是这方面没有正确面对)\n下半篇, 作者开始就上升到了人生态度问题. 以一个正确的心态, 面对生活, 面对婚姻, 面对死亡. 分清楚自己生活中的 \u0026ldquo;西瓜和芝麻\u0026rdquo;, 避免习惯于低层次的追求, 会影响我们的心志.\n最后文中讲述对大学生的建议 (我已经错过了), 阐述沟通的重要性, 以及介绍了拉里·佩奇名人, 巴菲特的非凡\u0026quot;见识\u0026quot;.\n我从书中收获了什么 对现在的\u0026quot;共享经济\u0026quot;有了更深的认识, 对科技迭代有了一个基础性的认识, 重视自己职业发展和做文字的积累, 开始努力去全面了解自己的行业, 以及在阅读中莫名地增加了我对生活的信心.\n书中的三句精华句子 很多到了中年的人会有这样的体会：自己无论多么努力，似乎都得不到社会的进一步认可；相反，如果按部就班地做事情，好像也坏不到哪里去。冥冥之中似乎被这两条线给框死，其实这就是命。 我们知道今天几乎任何一所三甲医院的主治医师，水平一定比 50 年前所谓的名医高很多。但是，今天没有哪个中医敢讲自己比 500 年前的名医水平高。这就是因为前者有积累效应，而后者没有 我们对死亡的恐惧有点儿莫名其妙，我们站在“有”的世界，试图理解“无”的问题，按照“有”的逻辑，对“无”产生恐惧 三句话总结本书 拓展视野, 打开格局, 重视积累 以发展的眼光看职业生涯, 分清楚工作和职业的区别, 拒绝伪工作. 向死而生 ","permalink":"https://ynikl.github.io/books/%E8%A7%81%E8%AF%86/","summary":"见识:豆瓣地址\n个人评分: 8.0 分\n前辈用他的智慧和经验, 告诉我们如何更好地活着.\n为什么读这本书 很多到了中年的人会有这样的体会： 自己无论多么努力，似乎都得不到社会的进一步认可；相反，如果按部就班地做事情，好像也坏不到哪里去。冥冥之中似乎被这两条线给框死，其实这就是命。\n为了这一句话, 读这一本书. 自己的作为一个普工程序员, 在技术浪潮的最后端被拖着走. 本根不需要到中年, 今年是我从事程序员工作的第四年, 我已经被感受到了被\u0026quot;命\u0026quot;限制住 的感觉了.\n书中讲了什么 作者分享了他对商业, 技术, 职业, 创业, 金钱, 读书的观点和看法\n用提出了商业的本质是\u0026quot;消费\u0026quot;的观点, 剖析了现在主流的\u0026quot;共享经济\u0026quot;, 带我们用商业的本质眼光, 去看哪些形式的共享经济是真正的\u0026quot;共享经济\u0026quot;, 哪些只是噱头炒概念的而已. 分析了IOT, 和数字跟踪技术, 区块链, 众筹等.\n介绍了新科技公司的创业过程中的一些普世经验. 如何选取赛道, 如何发挥自己小公司的优势, 如何在科技浪潮中存活下来, 以及中如何招聘优秀员工.\n关于在职场如何招聘到优秀的员工, 又可以引申到自己如何成为一个优秀的员工, 作者也给出了答案.\n树立完成的职业思维, 带着发展的目光选择岗位 在职业思维下主动和积极的面对工作 打开自己思维格局, 多去了解行业大局 有了不错的收入之后, 就涉及到了, 如何树立一个正确的金钱观. 要对自己收入有一个正确的认识, 避免过度追求提高收入, 进而牺牲了自己的健康, 家庭等. (现在经常听到我们的工友, 猝死就是这方面没有正确面对)\n下半篇, 作者开始就上升到了人生态度问题. 以一个正确的心态, 面对生活, 面对婚姻, 面对死亡. 分清楚自己生活中的 \u0026ldquo;西瓜和芝麻\u0026rdquo;, 避免习惯于低层次的追求, 会影响我们的心志.\n最后文中讲述对大学生的建议 (我已经错过了), 阐述沟通的重要性, 以及介绍了拉里·佩奇名人, 巴菲特的非凡\u0026quot;见识\u0026quot;.","title":"见识"},{"content":"Show Your Work 读书总结 概括 我为什么要读这本书\n如何提高自己的影响力\n这本书怎样影响了我\n打算开始分享计划, 学习如何分享, 讲述故事. 计划\u0026quot;学术假\u0026quot;\n书中的三句精华句子\nYou find time the same place you find spare change: in the nooks and crannies On the spectrum of creative work, the difference between the mediocre and the good is vast. Mediocrity is, however, still on the spectrum; you can move from mediocre to good in increments. The real gap is between doing nothing and doing something You can turn your flow into stock 三句话总结本书\n我们需要把自己展示出来, 这样子别人才能知道你是一个什么样子的人. ( 酒香也怕巷子深) 把自己当成一个业务爱好者, 对自己分享负责, 但不用追求到完美, 心态开放, 保持热情 把握自己分享的尺度, 任何事情, 思想, 启发都是值得分享的. 在互联网上保持真诚, 尊重他人, 保护自己. 感悟点 不要觉得你没有什么事情可以分享, 一定会有人对你做的事情感兴趣. 比如一天结束，可以分享自己在做什么，做什么什么决定，收获了什么，受到了什么启发，有什么成果\n互联网上的人们都很烂，如果不包含链接，99.9%的就不会去找目标网页\n如果虚假的分享你的成功，你不仅抢夺了他人的成功，还欺骗了分享成果的人们\n要能解释自己正在做什么\n分享自己的知识，也可以让别人知道你在干嘛，知道你的工作，也是自己的一种再学习过程\n要倾听别人的意见，不要一味地分享自己\n要用内容去吸引读者，不要悲哀地要求别人粉你\n学会在网上保护自己，过滤垃圾评论\n通勤的好处：分离家庭与工作\n适当给自己放假，学术假。每七年让自己重新充电🔋。\n认识你自己\n","permalink":"https://ynikl.github.io/books/showyourwork/","summary":"Show Your Work 读书总结 概括 我为什么要读这本书\n如何提高自己的影响力\n这本书怎样影响了我\n打算开始分享计划, 学习如何分享, 讲述故事. 计划\u0026quot;学术假\u0026quot;\n书中的三句精华句子\nYou find time the same place you find spare change: in the nooks and crannies On the spectrum of creative work, the difference between the mediocre and the good is vast. Mediocrity is, however, still on the spectrum; you can move from mediocre to good in increments. The real gap is between doing nothing and doing something You can turn your flow into stock 三句话总结本书","title":"Show Your Work"},{"content":"启动一个容器 打个样\n1 docker run -itd --rm --name hello image_name \u0026ndash; it 将当前的终端和容器内的终端连接在一起, 正式所谓的交互模式\n\u0026ndash;rm 当容器停止之后, 会自动删除改容器\n外挂文件夹 参数 -v docker run -it -v /home/dock/Downloads:/usr/Downloads ubuntu64 /bin/bash\n与容器交互 进入容器 docker attach\nexec\ndocker -it exec CONTAIN_NAME bash\nexex 会再目标容器内部执行一个命令, 命令名为 bash, 就是起一个 shell 咯. 加上 -it, 进入交互的终端模式\n查看日志 docker logs CONTAINER 可以查看容器日志\n-f 可以持续输出容器内部的最新日志\n管理容器 启动\n1 docker start CONTAINER 暂停\n1 docker stop CONTAINER 提交\n1 docker commit --author=\u0026#34;ian\u0026#34; CONTAINER NEW-IMAGENAME:TAG 管理镜像 查看所有的镜像列表\n1 docker image ls 删除镜像\n1 docker rmi IMAGE 删除 \u0026lt;none\u0026gt; 名称的镜像\n1 docker rmi $(docker images --filter \u0026#34;dangling=true\u0026#34; -q --no-trunc) FQA CMD和ENTRYPOINT的区别 RUN、CMD 和 ENTRYPOINT 这三个 Dockerfile 指令看上去很类似，很容易混淆。本节将通过实践详细讨论它们的区别。\n简单的说：\nRUN 执行命令并创建新的镜像层，RUN 经常用于安装软件包。\nCMD 设置容器启动后默认执行的命令及其参数，但 CMD 能够被 docker run 后面跟的命令行参数替换。\nENTRYPOINT 配置容器启动时运行的命令。\nCMD和ENTRYPOINT的区别\n","permalink":"https://ynikl.github.io/blog/docker-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","summary":"启动一个容器 打个样\n1 docker run -itd --rm --name hello image_name \u0026ndash; it 将当前的终端和容器内的终端连接在一起, 正式所谓的交互模式\n\u0026ndash;rm 当容器停止之后, 会自动删除改容器\n外挂文件夹 参数 -v docker run -it -v /home/dock/Downloads:/usr/Downloads ubuntu64 /bin/bash\n与容器交互 进入容器 docker attach\nexec\ndocker -it exec CONTAIN_NAME bash\nexex 会再目标容器内部执行一个命令, 命令名为 bash, 就是起一个 shell 咯. 加上 -it, 进入交互的终端模式\n查看日志 docker logs CONTAINER 可以查看容器日志\n-f 可以持续输出容器内部的最新日志\n管理容器 启动\n1 docker start CONTAINER 暂停\n1 docker stop CONTAINER 提交\n1 docker commit --author=\u0026#34;ian\u0026#34; CONTAINER NEW-IMAGENAME:TAG 管理镜像 查看所有的镜像列表","title":"Docker 基本使用"},{"content":"Go 中 channel 中用法和实现总结 以下分析和源码都是基于 go1.17 版本\nchannel 简介 Go 语言的基础类型之一, 用于在协程与协程之间传递数据 (channel 数据的传输方式也是值传递, Go语言的数据传输只有值传递)\nDo not communicate by sharing memory; instead, share memory by communicating.\nchannel 保证:\n数据的先入先出 并发情况下的数据安全 已经关闭的 channel 不可重开 channel 的实现 channel 在内部实现的结构体为 runtime.hchan\n有一个环形链表, 暂存要传输的数据. 无 buffer 的channel 该队列长度为0, 所以不进行数据缓冲. 有一把互斥锁mutex, 在并发情况下, 保护自身数据结构的一致性 有两个协程等待链表, 用于挂载因为发送/接收而阻塞在该 channel 上的协程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 type hchan struct { qcount uint // 当前 buffer 中有暂存着多少个数据 dataqsiz uint // 环形数组的buffer个数, 由 make 初始化的时候第二个参数容量决定的 buf unsafe.Pointer // 环形数组开始地址 elemsize uint16 // channel 传输的元素大小, 用于计算内存大小 closed uint32 // channel 是否已经关闭 0未关闭, 非0关闭 elemtype *_type // element type # channel 元素的类型 sendx uint // 环形链表中, 发送数据存储的下标 recvx uint // 环形链表中, 接受数据获取数据的下标 recvq waitq // 阻塞在该 channel 等待获取数据的 Groutine 列表 sendq waitq // 阻塞在该 channel 等待写入数据的 Groutine 列表 lock mutex // # 互斥锁 用于保护自身数据变更 } 初始化 channel 传递的元素不能太大 如果是空结构体或者无缓冲队列, 是不需要分配环形队列内存 如果传递数据类型有内含指针, 需要将环形队列分配到堆上 内部实现函数runtime.makechan\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 func makechan(t *chantype, size int) *hchan { // compiler checks this but be safe. // 编译器会校验channel元素的大小, 小于64KB. 若大于64KB, 编译器会报错 if elem.size \u0026gt;= 1\u0026lt;\u0026lt;16 { throw(\u0026#34;makechan: invalid channel element type\u0026#34;) } if hchanSize%maxAlign != 0 || elem.align \u0026gt; maxAlign { throw(\u0026#34;makechan: bad alignment\u0026#34;) } mem, overflow := math.MulUintptr(elem.size, uintptr(size)) if overflow || mem \u0026gt; maxAlloc-hchanSize || size \u0026lt; 0 { panic(plainError(\u0026#34;makechan: size out of range\u0026#34;)) } // Hchan does not contain pointers interesting for GC when elements stored in buf do not contain pointers. // buf points into the same allocation, elemtype is persistent. // SudoG\u0026#39;s are referenced from their owning thread so they can\u0026#39;t be collected. // TODO(dvyukov,rlh): Rethink when collector can move allocated objects. var c *hchan switch { case mem == 0: // Queue or element size is zero. # 无缓冲队列或者空结构体为传递值, 不需要额外分配队列内存 c = (*hchan)(mallocgc(hchanSize, nil, true)) // Race detector uses this location for synchronization. c.buf = c.raceaddr() case elem.ptrdata == 0: // # channel 元素不存在指针引导数据, 将环形数组分配在 hchan 后面 // Elements do not contain pointers. // Allocate hchan and buf in one call. c = (*hchan)(mallocgc(hchanSize+mem, nil, true)) c.buf = add(unsafe.Pointer(c), hchanSize) default: // Elements contain pointers. c = new(hchan) c.buf = mallocgc(mem, elem, true) } c.elemsize = uint16(elem.size) c.elemtype = elem c.dataqsiz = uint(size) lockInit(\u0026amp;c.lock, lockRankHchan) // # locakRankHchan 锁的等级 return c } 关闭 核心代码runtime.closechan更新自身数据结构中的关闭状态, 并 唤醒阻塞在 channel 上的所有协程. 被唤醒的协程(sudog)的 success 标识会被置为 false.\n被唤醒的 写操作的协程, 也会发生panic. ( \u0026ldquo;send on closed channel\u0026rdquo; )\n自身操作会发生 panic 的情况\n未初始化 channel 重复关闭 channel 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 func closechan(c *hchan) { if c == nil { // 未初始化的channel 会发生panic panic(plainError(\u0026#34;close of nil channel\u0026#34;)) } // # 开始关闭, 锁定之后数据都进不来了 lock(\u0026amp;c.lock) if c.closed != 0 { unlock(\u0026amp;c.lock) panic(plainError(\u0026#34;close of closed channel\u0026#34;)) } c.closed = 1 var glist gList // release all readers # 唤醒所有因为读取数据阻塞的协程 for { sg := c.recvq.dequeue() if sg == nil { break } if sg.elem != nil { typedmemclr(c.elemtype, sg.elem) sg.elem = nil } if sg.releasetime != 0 { sg.releasetime = cputicks() } gp := sg.g // # [channel 唤醒协议总是设置params为sudog](https://github.com/golang/go/commit/30a68bfb806b5217932e280f5a5f521237e69077) gp.param = unsafe.Pointer(sg) sg.success = false if raceenabled { raceacquireg(gp, c.raceaddr()) } glist.push(gp) } // release all writers (they will panic) # 唤醒所有因为写入数据阻塞的协程 for { sg := c.sendq.dequeue() if sg == nil { break } sg.elem = nil if sg.releasetime != 0 { sg.releasetime = cputicks() } gp := sg.g gp.param = unsafe.Pointer(sg) sg.success = false if raceenabled { raceacquireg(gp, c.raceaddr()) } glist.push(gp) } unlock(\u0026amp;c.lock) // Ready all Gs now that we\u0026#39;ve dropped the channel lock. for !glist.empty() { gp := glist.pop() gp.schedlink = 0 // # 唤醒协程, 将协程加入调度 goready(gp, 3) } } 发送数据 向已经关闭的 channel 发送数据会发生 panic\n数据流程:\n检查是否已经初始化 非阻塞写入数据, 检查数据是否已经满, 快速返回 是否已经关闭 检查 channel 中是否已经有等待获取数据而阻塞的协程, 如果有直接将数据发送给等待的协程. channel 的 buffer 是否还有空间, 如果有将数据放置到 buffer 中, 返回 channel 的 buffer 已经满了, 根据是否为 select 操作, 判断是否需要将协程阻塞 当协程阻塞之后, 在被唤醒之后需要再检查一次, channel 是否已经关闭. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 // # block 的参数是由是否在 select 中, 由编译过程决定的; 只有在select语句中block = true func chansend(c *hchan, ep unsafe.Pointer, block bool, callerpc uintptr) bool { if c == nil { if !block { return false } // # 向未初始化的 channel 发送数据会永远阻塞 gopark(nil, nil, waitReasonChanSendNilChan, traceEvGoStop, 2) throw(\u0026#34;unreachable\u0026#34;) } // # 带 select 的 channel 在数据已经满了情况直接返回 if !block \u0026amp;\u0026amp; c.closed == 0 \u0026amp;\u0026amp; full(c) { return false } // 保护数据 lock(\u0026amp;c.lock) if c.closed != 0 { unlock(\u0026amp;c.lock) panic(plainError(\u0026#34;send on closed channel\u0026#34;)) } // # 先从接受协程队列中获取阻塞的协程, 直接将数据发送给阻塞的协程 if sg := c.recvq.dequeue(); sg != nil { // Found a waiting receiver. We pass the value we want to send // directly to the receiver, bypassing the channel buffer (if any). send(c, sg, ep, func() { unlock(\u0026amp;c.lock) }, 3) return true } // # channel 的 buffer 中还有剩余空间 if c.qcount \u0026lt; c.dataqsiz { // Space is available in the channel buffer. Enqueue the element to send. qp := chanbuf(c, c.sendx) if raceenabled { racenotify(c, c.sendx, nil) } typedmemmove(c.elemtype, qp, ep) c.sendx++ // # 环形队列, 当索引到最后从头开始 if c.sendx == c.dataqsiz { c.sendx = 0 } // # 增加当前 channel buffer 存储的数据个数 c.qcount++ unlock(\u0026amp;c.lock) return true } if !block { unlock(\u0026amp;c.lock) return false } // # 发送数据的协程阻塞在当前 channel // Block on the channel. Some receiver will complete our operation for us. gp := getg() mysg := acquireSudog() mysg.releasetime = 0 if t0 != 0 { mysg.releasetime = -1 } // No stack splits between assigning elem and enqueuing mysg // on gp.waiting where copystack can find it. mysg.elem = ep mysg.waitlink = nil mysg.g = gp mysg.isSelect = false mysg.c = c gp.waiting = mysg gp.param = nil c.sendq.enqueue(mysg) // Signal to anyone trying to shrink our stack that we\u0026#39;re about // to park on a channel. The window between when this G\u0026#39;s status // changes and when we set gp.activeStackChans is not safe for // stack shrinking. atomic.Store8(\u0026amp;gp.parkingOnChan, 1) gopark(chanparkcommit, unsafe.Pointer(\u0026amp;c.lock), waitReasonChanSend, traceEvGoBlockSend, 2) // Ensure the value being sent is kept alive until the // receiver copies it out. The sudog has a pointer to the // stack object, but sudogs aren\u0026#39;t considered as roots of the // stack tracer. KeepAlive(ep) // # 协程被唤醒了 // someone woke us up. if mysg != gp.waiting { throw(\u0026#34;G waiting list is corrupted\u0026#34;) } gp.waiting = nil gp.activeStackChans = false closed := !mysg.success gp.param = nil if mysg.releasetime \u0026gt; 0 { blockevent(mysg.releasetime-t0, 2) } mysg.c = nil releaseSudog(mysg) // # 挂载在协程上的发送协程会 panic if closed { if c.closed == 0 { throw(\u0026#34;chansend: spurious wakeup\u0026#34;) } panic(plainError(\u0026#34;send on closed channel\u0026#34;)) } return true } 接收数据 与发送数据一样, 同样带着是否阻塞的参数. 在编译时,由是否有 select 操作决定. 核心代码runtime.chanrecv\n不带 select 从未初始化的 channel 获取数据, 会永远阻塞 runtime.chanrecv 返回值中, 第一个返回值selected表示在,select 语句中, 该 case 是否会被选中执行 接收数据流程:\n检查是否已经初始化 检查非阻塞获取数据下, 是否可以直接返回 如果已经关闭的 channel 且没有已经没有缓冲数据, 返回数据类型的默认值. 检查有因发送数据阻塞在 channel 的协程, 如果没有 buffer, 直接从阻塞的协程中获取数据, 否则从 buffer 中获取数据数据, 将第一个阻塞的协程的数据放入 buffer 中. 如果缓冲 buffer 有数据, 则从buffer 中获取数据. 非阻塞操作, 直接返回. 否则协程进行阻塞. 注意事项:\n当 select 一个 已经关闭的 channel 的时候, 该 case 会被疯狂输出, 导致cpu使用率上升\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 // chanrecv receives on channel c and writes the received data to ep. // ep may be nil, in which case received data is ignored. // If block == false and no elements are available, returns (false, false). // Otherwise, if c is closed, zeros *ep and returns (true, false). // Otherwise, fills in *ep with an element and returns (true, true). // A non-nil ep must point to the heap or the caller\u0026#39;s stack. func chanrecv(c *hchan, ep unsafe.Pointer, block bool) (selected, received bool) { if c == nil { if !block { // select 情况下, selected = false, 不执行该 case return } // # 非 select 会永远阻塞 gopark(nil, nil, waitReasonChanReceiveNilChan, traceEvGoStop, 2) throw(\u0026#34;unreachable\u0026#34;) } // # 不加锁检查, 带 select 接收操作, 如果 channel 未关闭, 且没有可以获取的数据直接返回 // Fast path: check for failed non-blocking operation without acquiring the lock. if !block \u0026amp;\u0026amp; empty(c) { // After observing that the channel is not ready for receiving, we observe whether the // channel is closed. // // Reordering of these checks could lead to incorrect behavior when racing with a close. // For example, if the channel was open and not empty, was closed, and then drained, // reordered reads could incorrectly indicate \u0026#34;open and empty\u0026#34;. To prevent reordering, // we use atomic loads for both checks, and rely on emptying and closing to happen in // separate critical sections under the same lock. This assumption fails when closing // an unbuffered channel with a blocked send, but that is an error condition anyway. if atomic.Load(\u0026amp;c.closed) == 0 { // Because a channel cannot be reopened, the later observation of the channel // being not closed implies that it was also not closed at the moment of the // first observation. We behave as if we observed the channel at that moment // and report that the receive cannot proceed. return } // The channel is irreversibly closed. Re-check whether the channel has any pending data // to receive, which could have arrived between the empty and closed checks above. // Sequential consistency is also required here, when racing with such a send. if empty(c) { // The channel is irreversibly closed and empty. if raceenabled { raceacquire(c.raceaddr()) } if ep != nil { typedmemclr(c.elemtype, ep) } // select 会选择改 case 疯狂输出 return true, false } } lock(\u0026amp;c.lock) if c.closed != 0 { // # 如果 channel 已经关闭, 且buffer 中已经没有数据了, 返回传输数据类型的默认值 if c.qcount == 0 { if raceenabled { raceacquire(c.raceaddr()) } // # 在返回的时候有可能刚好有数据会进来, 所以需要进行加锁操作 unlock(\u0026amp;c.lock) if ep != nil { typedmemclr(c.elemtype, ep) } return true, false } // The channel has been closed, but the channel\u0026#39;s buffer have data. } else { // # 如果 channel 没有 buffer 会直接从阻塞中的发送数据协程中获取数据 // # 如果 channel 有 buffer. 当可以获取到因为发送数据而阻塞的协程时, 代表缓冲的 buffer 已经满了. 所以, 将从 buffer 中获取数据, 并将获取到的第一个阻塞协程, 的数据放入 buffer 尾端. 保证先入先出 // Just found waiting sender with not closed. if sg := c.sendq.dequeue(); sg != nil { // Found a waiting sender. If buffer is size 0, receive value // directly from sender. Otherwise, receive from head of queue // and add sender\u0026#39;s value to the tail of the queue (both map to // the same buffer slot because the queue is full). recv(c, sg, ep, func() { unlock(\u0026amp;c.lock) }, 3) return true, true } } // # 从 buffer 中获取数据 if c.qcount \u0026gt; 0 { // Receive directly from queue qp := chanbuf(c, c.recvx) if raceenabled { racenotify(c, c.recvx, nil) } if ep != nil { typedmemmove(c.elemtype, ep, qp) } typedmemclr(c.elemtype, qp) c.recvx++ if c.recvx == c.dataqsiz { c.recvx = 0 } c.qcount-- unlock(\u0026amp;c.lock) return true, true } // # 非阻塞操作, 返回 if !block { unlock(\u0026amp;c.lock) return false, false } // 将获取数据的协程阻塞 // no sender available: block on this channel. gp := getg() mysg := acquireSudog() mysg.releasetime = 0 if t0 != 0 { mysg.releasetime = -1 } // No stack splits between assigning elem and enqueuing mysg // on gp.waiting where copystack can find it. mysg.elem = ep mysg.waitlink = nil gp.waiting = mysg mysg.g = gp mysg.isSelect = false mysg.c = c gp.param = nil c.recvq.enqueue(mysg) // Signal to anyone trying to shrink our stack that we\u0026#39;re about // to park on a channel. The window between when this G\u0026#39;s status // changes and when we set gp.activeStackChans is not safe for // stack shrinking. atomic.Store8(\u0026amp;gp.parkingOnChan, 1) gopark(chanparkcommit, unsafe.Pointer(\u0026amp;c.lock), waitReasonChanReceive, traceEvGoBlockRecv, 2) // someone woke us up if mysg != gp.waiting { throw(\u0026#34;G waiting list is corrupted\u0026#34;) } gp.waiting = nil gp.activeStackChans = false // 如果是因为 channel的关闭 操作唤醒的, success 值为 false success := mysg.success gp.param = nil mysg.c = nil releaseSudog(mysg) return true, success } 用法总结 初始化:\n避免对未初始化 channel 的进行读写操作, 可能会造成阻塞 在 select 语句中, 对已经关闭的 channel 可以赋予 nil 值, 避免 cpu 飙高 关闭协程:\n关闭协程的动作, 应该由数据写入方操作 channel 当参数传递时, 尽可能带上操作方向(读取/写入), 编译器会保证, 单向写入协程不允许关闭 关闭的时候要确保所有的写入协程都已经操作完毕. 避免引起写入协程发生 panic 在 channel 中阻塞的协程, 唤醒条件\n到达协程数据操作的目标, 写入 / 读取数据 channel 关闭 Referrences Go官方源码 Share Memory By Communication ","permalink":"https://ynikl.github.io/blog/golang-channel/","summary":"Go 中 channel 中用法和实现总结 以下分析和源码都是基于 go1.17 版本\nchannel 简介 Go 语言的基础类型之一, 用于在协程与协程之间传递数据 (channel 数据的传输方式也是值传递, Go语言的数据传输只有值传递)\nDo not communicate by sharing memory; instead, share memory by communicating.\nchannel 保证:\n数据的先入先出 并发情况下的数据安全 已经关闭的 channel 不可重开 channel 的实现 channel 在内部实现的结构体为 runtime.hchan\n有一个环形链表, 暂存要传输的数据. 无 buffer 的channel 该队列长度为0, 所以不进行数据缓冲. 有一把互斥锁mutex, 在并发情况下, 保护自身数据结构的一致性 有两个协程等待链表, 用于挂载因为发送/接收而阻塞在该 channel 上的协程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 type hchan struct { qcount uint // 当前 buffer 中有暂存着多少个数据 dataqsiz uint // 环形数组的buffer个数, 由 make 初始化的时候第二个参数容量决定的 buf unsafe.","title":"Channel"},{"content":"如何提高自己的所编写的文字留存问题? 自己经常写了很多文字, 但是每当自己回顾的时候都不是很满意. 然后就会把已经写下的文字和内容删除掉.\n","permalink":"https://ynikl.github.io/posts/%E6%8F%90%E5%8D%87%E6%96%87%E5%AD%97%E7%95%99%E5%AD%98%E7%8E%87/","summary":"如何提高自己的所编写的文字留存问题? 自己经常写了很多文字, 但是每当自己回顾的时候都不是很满意. 然后就会把已经写下的文字和内容删除掉.","title":"提升文字留存率"},{"content":"2022 年度目标 提升自己的基础技术竞争力, 确保不会找不到工作\n精通 go 编程语言 精通 redis 精通 mysql 5 月份 OKR O:\n加深对 Go 语言的基础知识理解 熟悉 redis 的所有数据类型 KR:\n输出3篇高质量的 go 语言blog\nchannel module tools 数据 redis 所有数据类型总结博文一篇\n所有数据类型总结博文 6 月份 OKR 成为一个 golang 资深开发工程师\nGo GMP 调度总结博文 做一个部门内部的 GMP 调度培训 成为一个优秀的软件工程师\n微服务架构设计模式通读并完成博文输出 Mysql 表结构数据类型总结博文 成为一个独立的 apple 软件开发者\n开发一个 macos 蕃茄钟小程序雏形 总结 6 月份只完成了一项 微服务架构设计模式 书籍的阅读. 完成情况比较差.\n主要原因: 对设定的目标不够上心. 6月份对健身很感兴趣, 一心扑在了健身上了, 对于月初制定的计划也就淡忘了.\n7 月份 OKR O1: 首要目标, 还是要技术总结和输出 go 语言的基础知识, 成为一个 资深的 golang 开发者\ngo gmp 调度总结博文 map channel context 总结博文输出 Mysql 表结构数据类型总结博文 (6月份遗留) O2: 学习计算机基础知识\n学习 RabbitMQ 实战指南 (因为当前公司项目有用到相关的组件, 需要快速学习一下) 总结 docker 的基本使用 学习 unix 网络编程 卷一 O3: 保持健康, 保持阅读\n有 25 天完成, 每天阅读 4 番茄钟的. 每周 至少健身 4次. 总结 执行力不够. 每天制定目标早起, 前天晚上又要早睡. 再加上健身时间, 周一至周五非工作时间都已经排满了.\n周末, 执行力不够, 会比较懒散地趴在床上刷抖音, 刷视频之类的. 没有有效地利用时间, 导致制定的计划都完不成.\n8 月份 OKR O1: 高级 go 语言开发者\ngo gmp 调度总结博文 map, context 总结博文输出 O2: 补充计算机基础知识\nTree 数据结构类型 Mysql 表结构数据类型总结博文 (6月份遗留) Unix 网络编程 卷一 O3: 保持健康, 保持阅读\n有 25 天完成, 每天阅读 4 番茄钟的. 有 25 天完成, 当天的总结和第二天的规划. 每周有4点,8点半之前到公司 每周 至少健身 4次. 8月份总结 过度娱乐，沉溺于抖音，每一天可以刷1-2个小时 健身花费的时间占比居高不下， 过度重视健身。 9月份安排 在写自我技术能力的时候，依旧没有能力把 精通 这两个字放在 Go语言前面 \u0026ndash; 9月份最主要目标 下调健身花费的时间占比， 采用5分化训练。 每次尽量把时间控制在一个小时之内。 每天保持一个小时的时间用于提高技术能力。 9 月份 OKR O1: 可以在自我介绍上写上 精通Go语言\ngo gmp 调度总结博文 map, context 总结博文输出 interface 深入学习 reflect 反射包使用 O2: 拓展知识\nMysql 表结构数据类型总结博文 (6月份遗留) O3: 保持健康, 保持阅读\n有 25 天完成, 每天阅读 4 番茄钟的. 每周有4点,8点半之前到公司 每周 至少健身 4次. 10 月份 OKR 无\n11 月份 OKR 技术\nO1: 精通Go语言\ngo map 总结博文输出 go context 总结博文输出 go gmp 调度总结博文 O2: 拓展技术边界\n前端技术入门 Python 入门 生活\nO1: 文字沉淀,\n摩托车给我带来了什么文章总结 摩托车骑行录像整理 ","permalink":"https://ynikl.github.io/neo/okr-2022/","summary":"2022 年度目标 提升自己的基础技术竞争力, 确保不会找不到工作\n精通 go 编程语言 精通 redis 精通 mysql 5 月份 OKR O:\n加深对 Go 语言的基础知识理解 熟悉 redis 的所有数据类型 KR:\n输出3篇高质量的 go 语言blog\nchannel module tools 数据 redis 所有数据类型总结博文一篇\n所有数据类型总结博文 6 月份 OKR 成为一个 golang 资深开发工程师\nGo GMP 调度总结博文 做一个部门内部的 GMP 调度培训 成为一个优秀的软件工程师\n微服务架构设计模式通读并完成博文输出 Mysql 表结构数据类型总结博文 成为一个独立的 apple 软件开发者\n开发一个 macos 蕃茄钟小程序雏形 总结 6 月份只完成了一项 微服务架构设计模式 书籍的阅读. 完成情况比较差.\n主要原因: 对设定的目标不够上心. 6月份对健身很感兴趣, 一心扑在了健身上了, 对于月初制定的计划也就淡忘了.\n7 月份 OKR O1: 首要目标, 还是要技术总结和输出 go 语言的基础知识, 成为一个 资深的 golang 开发者","title":"2022"},{"content":"工具分类 go build 编译源代码文件\n-race 编译出的目标程序，会启用数据竞争检测\ngo doc 查看包的文档(定义于doc.go的注释中), 于包中公开的函数签名\nexample\n1 2 3 go doc go doc encoding/json go env 查看 go 相关的环境变量\n1 2 3 4 5 # -w 设置环境变量 go env -w GOPAHT=\u0026#39;/some/path\u0026#39; # -u 恢复成默认设置 go env -u GOPATH go generate 扫描文件中的指令并执行, 相关指令目的应该是“生成或者修改源文件”\n注释的指令格式\n//go:generate command argument...\nps: wire 也是利用命令, 生成依赖注入文件\ngo get 管理当前module依赖\n1 2 3 4 5 6 7 8 # 添加依赖包 go get example.com/pkg # 指定包版本 go get example.com/pkg@1.2.3 # 移除依赖 go get example.com/pkg@none go install 获取包文件，并编译和安装。可执行文件编译到$GOBIN路径下, 包文件编译到$GOPATH/pkg\ngo list 列出包的数据信息\ngo mod 管理 modules\n1 2 3 4 edit\t修改go.mod init\t初始化 tidy\t自动补全依赖包 vendor\t生成一个所有依赖的vendor文件夹 go test 跑单元测试\n1 2 3 4 5 6 7 8 9 10 11 12 13 go test -v . # 指定函数 go test -run 函数名 # 性能测试 go test -v -bench . -benchtime 50s # 单元测试覆盖率 go test -cover # 强制重新跑测试, 不使用缓存的结果 source: https://stackoverflow.com/a/48882892/9992963 go test -count=1 go tool 1 2 # 不带参数，显示工具列表 go tool compile 使用go tool compile -N -l -S main.go生成汇编代码\n","permalink":"https://ynikl.github.io/blog/golang-cmd/","summary":"工具分类 go build 编译源代码文件\n-race 编译出的目标程序，会启用数据竞争检测\ngo doc 查看包的文档(定义于doc.go的注释中), 于包中公开的函数签名\nexample\n1 2 3 go doc go doc encoding/json go env 查看 go 相关的环境变量\n1 2 3 4 5 # -w 设置环境变量 go env -w GOPAHT=\u0026#39;/some/path\u0026#39; # -u 恢复成默认设置 go env -u GOPATH go generate 扫描文件中的指令并执行, 相关指令目的应该是“生成或者修改源文件”\n注释的指令格式\n//go:generate command argument...\nps: wire 也是利用命令, 生成依赖注入文件\ngo get 管理当前module依赖\n1 2 3 4 5 6 7 8 # 添加依赖包 go get example.","title":"Go 常用的命令汇总"},{"content":" 我: 昵称: 潜水员\n五流程序员 文字业余爱好者 摩托车爱好者 为什么写 在互联网中留下尘埃 把想法外显成文字才会有意义 促进自我思考 目前在学 Go Redis 微服务设计模式 计算机技能 Go Vim Live in Shell Redis Mysql Operating System Algorithm (basic) 想从生活中得到 摄影 游泳 Bucket List 逃离办公室 去西藏 出版一本小说 潜水 跳伞 目录分类说明 blog 一些技术上的杂文 posts 自己的一些感悟和发牢骚 notes 平时遇到的一些有感悟的文字 books 自己读的书籍的一些简单记录 ","permalink":"https://ynikl.github.io/me/","summary":" 我: 昵称: 潜水员\n五流程序员 文字业余爱好者 摩托车爱好者 为什么写 在互联网中留下尘埃 把想法外显成文字才会有意义 促进自我思考 目前在学 Go Redis 微服务设计模式 计算机技能 Go Vim Live in Shell Redis Mysql Operating System Algorithm (basic) 想从生活中得到 摄影 游泳 Bucket List 逃离办公室 去西藏 出版一本小说 潜水 跳伞 目录分类说明 blog 一些技术上的杂文 posts 自己的一些感悟和发牢骚 notes 平时遇到的一些有感悟的文字 books 自己读的书籍的一些简单记录 ","title":"我"},{"content":"Hugo 文章分类管理 文件夹 内容存放在content/目录下方, content/下方的子目录会形成资源URI,\n例如 content/blog/doc.md 文章访问目录即为 https//XXX.github.io/blog.doc.md\n分类管理 文章内容表述 (Front Matter) 使用进行分类, 默认只有tags\n1 2 3 tags: - Go - fast 可以在config添加自定的分类选项\n1 2 3 taxonomies: series: series category: categories 文章路径 类别 描述 地址 home 网站homepage /index.html page 指定页面 /post/页面/index.html section 分区 /section/index.html taxonomy 分类 /tags/index.html term 分类系列 /tags/go/index.html _index.md 和 index.md 在文件夹下方添加_index.md会识别成section. 在文件夹下方添加index.md会被识别成文章.\n千万不要在默认的content目录下方添加index.md\n","permalink":"https://ynikl.github.io/blog/hugo-%E5%88%86%E7%B1%BB%E7%AE%A1%E7%90%86/","summary":"Hugo 文章分类管理 文件夹 内容存放在content/目录下方, content/下方的子目录会形成资源URI,\n例如 content/blog/doc.md 文章访问目录即为 https//XXX.github.io/blog.doc.md\n分类管理 文章内容表述 (Front Matter) 使用进行分类, 默认只有tags\n1 2 3 tags: - Go - fast 可以在config添加自定的分类选项\n1 2 3 taxonomies: series: series category: categories 文章路径 类别 描述 地址 home 网站homepage /index.html page 指定页面 /post/页面/index.html section 分区 /section/index.html taxonomy 分类 /tags/index.html term 分类系列 /tags/go/index.html _index.md 和 index.md 在文件夹下方添加_index.md会识别成section. 在文件夹下方添加index.md会被识别成文章.\n千万不要在默认的content目录下方添加index.md","title":"Hugo 文章分类管理"},{"content":"","permalink":"https://ynikl.github.io/blog/diary/2023-03-20/","summary":"","title":""},{"content":"进程, 线程, 协程 进程 进程一般由程序、数据集合和进程控制块三部分组成。\n程序用于描述进程要完成的功能，是控制进程执行的指令集； 数据集合是程序在执行时所需要的数据和工作区； 程序控制块(Program Control Block，简称PCB)，包含进程的描述信息和控制信息，是进程存在的唯一标志。 进程是程序的实例，一个程序可以有多个实例，但一个实例只能对应一个进程\n线程 线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元，是处理器调度和分派的基本单位。\n一个进程可以有一个或多个线程，各个线程之间共享程序的内存空间(也就是所在进程的内存空间)。一个标准的线程由线程ID、当前指令指针(PC)、寄存器和堆栈组成。而进程由内存空间(代码、数据、进程空间、打开的文件)和一个或多个线程组成\n任务调度 大部分操作系统(如Windows、Linux)的任务调度是采用时间片轮转的抢占式调度方式。\n多线程与多核 多核(心)处理器是指在一个处理器上集成多个运算核心从而提高计算能力，也就是有多个真正并行计算的处理核心，每一个处理核心对应一个内核线程。\n内核线程（Kernel Thread，KLT）就是直接由操作系统内核支持的线程，这种线程由内核来完成线程切换，内核通过操作调度器对线程进行调度，并负责将线程的任务映射到各个处理器上。一般一个处理核心对应一个内核线程，比如单核处理器对应一个内核线程，双核处理器对应两个内核线程，四核处理器对应四个内核线程。\n超线程技术就是利用特殊的硬件指令，把一个物理芯片模拟成两个逻辑处理核心\n程序一般不会直接去使用内核线程，而是去使用内核线程的一种高级接口——轻量级进程（Lightweight Process，LWP），轻量级进程就是我们通常意义上所讲的线程，也被叫做用户线程。由于每个轻量级进程都由一个内核线程支持，因此只有先支持内核线程，才能有轻量级进程。\n线程切换 线程切换的实现一般放在内核，中断处理程序也是放在内核。从这个角度来说，如果线程当前处于用户态，若要发生线程切换，必然是要先要先进入内核态，发生状态切换的。线程切换的原因还可能是其他类型的中断，或者线程自身主动进入等待或者睡眠，这些情况无一例外都是要进入内核的。\n线程的切换分两种情况: 同进程内, 和不同进程内切换;\n线程模型 一对一模型: 一个用户线程对应一个内核线程\nCON\n许多操作系统限制了内核线程的数量，因此一对一模型会使用户线程的数量受到限制； 许多操作系统内核线程调度时，上下文切换的开销较大，导致用户线程的执行效率下降。 一对多模型: 多个用户线程对应一个内核线程\nCON\n如果其中一个用户线程阻塞，那么其它所有线程都将无法执行，因为此时内核线程也随之阻塞了； 在多处理器系统上，处理器数量的增加对多对一模型的线程性能不会有明显的增加 多对多模型: 多个用户线程对应一个内核线程\nPRO\n一个用户线程的阻塞不会导致所有线程的阻塞，因为此时还有别的内核线程被调度来执行； 多对多模型对用户线程的数量没有限制； 在多处理器的操作系统中，性能得到提升 协程 协程，英文Coroutines，是一种基于线程之上，但又比线程更加轻量级的存在，这种由程序员自己写程序来管理的轻量级线程叫做『用户空间线程』，具有对内核来说不可见的特性\n因为是自主开辟的异步任务，所以很多人也更喜欢叫它们纤程（Fiber），或者绿色线程（GreenThread）\n为什么使用协程 由于现代CPU发展的越来越快，每一个时间片能够处理的指令越来越多，很经常导致一个线程时间片还未用完，而进入了等待数据IO的时间。此时该线程必然要让出CPU，让另一个线程运行 之后有人提出了协程的概念，让同一个线程在一个CPU时间片内可以处理多个任务，虽然协程的切换也耗费时间，但总体来说要比线程的切换要好很多。因此，使用协程可以比使用线程能够得到更好的处理效果（这个不是一定的，还得跟服务器的任务性质以及协程的调度算法有关系，但一般情况下使用协程会比使用线程有更好的性能） 协程解决什么 协程的目的就是当出现长时间的I/O操作时，通过让出目前的协程调度，执行下一个任务的方式，来消除ContextSwitch上的开销。\n避免CPU一直等待IO, 增加延迟 同时可以避免创建过多的线程, 造成更多上下文切换\n进程 vs 线程 线程与进程最大的区别在于，线程是调度的基本单位，而进程则是资源拥有的基本单位。\n所谓内核中的任务调度，实际上的调度对象是线程；而进程只是给线程提供了虚拟内存、全局变量等资源。\n当进程只有一个线程时，可以认为进程就等于线程。 当进程拥有多个线程时，这些线程会共享相同的虚拟内存和全局变量等资源。这些资源在上下文切换时是不需要修改的。 另外，线程也有自己的私有数据，比如栈和寄存器等，这些在上下文切换时也是需要保存的 线程的上下文切换分成两种:\n前后两个线程属于不同进程。此时，因为资源不共享，所以切换过程就跟进程上下文切换是一样 前后两个线程属于同一个进程。此时，因为虚拟内存是共享的，所以在切换时，虚拟内存这些资源就保持不动，只需要切换线程的私有数据、寄存器等不共享的数据 协程 vs 线程 items thread goroutine 资源占用 8M 2k 调度所属 OS 用户 切换开销 涉及模式切换、16个寄存器 PC/SP/DX 性能 创建和销毁开销大 小 数据同步 依赖锁 只有一个线程，不存在同时写变量冲突，在协程中控制共享资源不加锁 寄存器\nPC 程序寄存器 - 程序指定地址 SP 栈地址 DX 数据寄存器 Reference 博客园-博客\n","permalink":"https://ynikl.github.io/blog/process_thread_routine/","summary":"进程, 线程, 协程 进程 进程一般由程序、数据集合和进程控制块三部分组成。\n程序用于描述进程要完成的功能，是控制进程执行的指令集； 数据集合是程序在执行时所需要的数据和工作区； 程序控制块(Program Control Block，简称PCB)，包含进程的描述信息和控制信息，是进程存在的唯一标志。 进程是程序的实例，一个程序可以有多个实例，但一个实例只能对应一个进程\n线程 线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元，是处理器调度和分派的基本单位。\n一个进程可以有一个或多个线程，各个线程之间共享程序的内存空间(也就是所在进程的内存空间)。一个标准的线程由线程ID、当前指令指针(PC)、寄存器和堆栈组成。而进程由内存空间(代码、数据、进程空间、打开的文件)和一个或多个线程组成\n任务调度 大部分操作系统(如Windows、Linux)的任务调度是采用时间片轮转的抢占式调度方式。\n多线程与多核 多核(心)处理器是指在一个处理器上集成多个运算核心从而提高计算能力，也就是有多个真正并行计算的处理核心，每一个处理核心对应一个内核线程。\n内核线程（Kernel Thread，KLT）就是直接由操作系统内核支持的线程，这种线程由内核来完成线程切换，内核通过操作调度器对线程进行调度，并负责将线程的任务映射到各个处理器上。一般一个处理核心对应一个内核线程，比如单核处理器对应一个内核线程，双核处理器对应两个内核线程，四核处理器对应四个内核线程。\n超线程技术就是利用特殊的硬件指令，把一个物理芯片模拟成两个逻辑处理核心\n程序一般不会直接去使用内核线程，而是去使用内核线程的一种高级接口——轻量级进程（Lightweight Process，LWP），轻量级进程就是我们通常意义上所讲的线程，也被叫做用户线程。由于每个轻量级进程都由一个内核线程支持，因此只有先支持内核线程，才能有轻量级进程。\n线程切换 线程切换的实现一般放在内核，中断处理程序也是放在内核。从这个角度来说，如果线程当前处于用户态，若要发生线程切换，必然是要先要先进入内核态，发生状态切换的。线程切换的原因还可能是其他类型的中断，或者线程自身主动进入等待或者睡眠，这些情况无一例外都是要进入内核的。\n线程的切换分两种情况: 同进程内, 和不同进程内切换;\n线程模型 一对一模型: 一个用户线程对应一个内核线程\nCON\n许多操作系统限制了内核线程的数量，因此一对一模型会使用户线程的数量受到限制； 许多操作系统内核线程调度时，上下文切换的开销较大，导致用户线程的执行效率下降。 一对多模型: 多个用户线程对应一个内核线程\nCON\n如果其中一个用户线程阻塞，那么其它所有线程都将无法执行，因为此时内核线程也随之阻塞了； 在多处理器系统上，处理器数量的增加对多对一模型的线程性能不会有明显的增加 多对多模型: 多个用户线程对应一个内核线程\nPRO\n一个用户线程的阻塞不会导致所有线程的阻塞，因为此时还有别的内核线程被调度来执行； 多对多模型对用户线程的数量没有限制； 在多处理器的操作系统中，性能得到提升 协程 协程，英文Coroutines，是一种基于线程之上，但又比线程更加轻量级的存在，这种由程序员自己写程序来管理的轻量级线程叫做『用户空间线程』，具有对内核来说不可见的特性\n因为是自主开辟的异步任务，所以很多人也更喜欢叫它们纤程（Fiber），或者绿色线程（GreenThread）\n为什么使用协程 由于现代CPU发展的越来越快，每一个时间片能够处理的指令越来越多，很经常导致一个线程时间片还未用完，而进入了等待数据IO的时间。此时该线程必然要让出CPU，让另一个线程运行 之后有人提出了协程的概念，让同一个线程在一个CPU时间片内可以处理多个任务，虽然协程的切换也耗费时间，但总体来说要比线程的切换要好很多。因此，使用协程可以比使用线程能够得到更好的处理效果（这个不是一定的，还得跟服务器的任务性质以及协程的调度算法有关系，但一般情况下使用协程会比使用线程有更好的性能） 协程解决什么 协程的目的就是当出现长时间的I/O操作时，通过让出目前的协程调度，执行下一个任务的方式，来消除ContextSwitch上的开销。\n避免CPU一直等待IO, 增加延迟 同时可以避免创建过多的线程, 造成更多上下文切换\n进程 vs 线程 线程与进程最大的区别在于，线程是调度的基本单位，而进程则是资源拥有的基本单位。\n所谓内核中的任务调度，实际上的调度对象是线程；而进程只是给线程提供了虚拟内存、全局变量等资源。\n当进程只有一个线程时，可以认为进程就等于线程。 当进程拥有多个线程时，这些线程会共享相同的虚拟内存和全局变量等资源。这些资源在上下文切换时是不需要修改的。 另外，线程也有自己的私有数据，比如栈和寄存器等，这些在上下文切换时也是需要保存的 线程的上下文切换分成两种:\n前后两个线程属于不同进程。此时，因为资源不共享，所以切换过程就跟进程上下文切换是一样 前后两个线程属于同一个进程。此时，因为虚拟内存是共享的，所以在切换时，虚拟内存这些资源就保持不动，只需要切换线程的私有数据、寄存器等不共享的数据 协程 vs 线程 items thread goroutine 资源占用 8M 2k 调度所属 OS 用户 切换开销 涉及模式切换、16个寄存器 PC/SP/DX 性能 创建和销毁开销大 小 数据同步 依赖锁 只有一个线程，不存在同时写变量冲突，在协程中控制共享资源不加锁 寄存器","title":""},{"content":"什么是TCP TCP —— 用于保证可靠性和流控制机制的数据，包括 Socket、序列号以及窗口大小 The combination of this information, including sockets, sequence numbers, and window sizes, is called a connection.\n为什么要三次握手 如果通信双方的通信次数只有两次，那么发送方一旦发出建立连接的请求之后它就没有办法 撤回这一次请求，如果在网络状况复杂或者较差的网络中，发送方连续发送多次建立连接的 请求，如果 TCP 建立连接只能通信两次，那么接收方只能选择接受或者拒绝发送方发起的请 求，它并不清楚这一次请求是不是由于网络拥堵而早早过期的连接。\n所以，TCP 选择使用三次握手来建立连接并在连接引入了 RST 这一控制消息，接收方当收到 请求时会将发送方发来的 SEQ+1 发送给对方，这时由发送方来判断当前连接是否是历史连接：\n如果当前连接是历史连接，即 SEQ 过期或者超时，那么发送方就会直接发送 RST 控制消息中止这一次连接； 如果当前连接不是历史连接，那么发送方就会发送 ACK 控制消息，通信双方就会成功建立连接； 使用三次握手和 RST 控制消息将是否建立连接的最终控制权交给了发送方，因为只有发送方 有足够的上下文来判断当前连接是否是错误的或者过期的，这也是 TCP 使用三次握手建立连 接的最主要原因。\n初始序列号 获得一个用于发送信息的初始化序列号 TCP 连接的发起方可以通过保存发出的序列号判断连接是否过期，如果让接收方来保存并 判断序列号却是不现实的，这也再一次强化了我们在上一节中提出的观点 —— 避免历史错 连接的初始化。\n","permalink":"https://ynikl.github.io/blog/tcp/","summary":"什么是TCP TCP —— 用于保证可靠性和流控制机制的数据，包括 Socket、序列号以及窗口大小 The combination of this information, including sockets, sequence numbers, and window sizes, is called a connection.\n为什么要三次握手 如果通信双方的通信次数只有两次，那么发送方一旦发出建立连接的请求之后它就没有办法 撤回这一次请求，如果在网络状况复杂或者较差的网络中，发送方连续发送多次建立连接的 请求，如果 TCP 建立连接只能通信两次，那么接收方只能选择接受或者拒绝发送方发起的请 求，它并不清楚这一次请求是不是由于网络拥堵而早早过期的连接。\n所以，TCP 选择使用三次握手来建立连接并在连接引入了 RST 这一控制消息，接收方当收到 请求时会将发送方发来的 SEQ+1 发送给对方，这时由发送方来判断当前连接是否是历史连接：\n如果当前连接是历史连接，即 SEQ 过期或者超时，那么发送方就会直接发送 RST 控制消息中止这一次连接； 如果当前连接不是历史连接，那么发送方就会发送 ACK 控制消息，通信双方就会成功建立连接； 使用三次握手和 RST 控制消息将是否建立连接的最终控制权交给了发送方，因为只有发送方 有足够的上下文来判断当前连接是否是错误的或者过期的，这也是 TCP 使用三次握手建立连 接的最主要原因。\n初始序列号 获得一个用于发送信息的初始化序列号 TCP 连接的发起方可以通过保存发出的序列号判断连接是否过期，如果让接收方来保存并 判断序列号却是不现实的，这也再一次强化了我们在上一节中提出的观点 —— 避免历史错 连接的初始化。","title":""},{"content":"","permalink":"https://ynikl.github.io/readme/","summary":"","title":""}]